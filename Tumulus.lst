------- FILE Tumulus.asm LEVEL 1 PASS 2
      1  10000 ????						;--------------------------------------------------------------
      2  10000 ????						;Tumulus : Burial Mound, Entrance to the underworld
      3  10000 ????						;One can shoot down, one accross, and one up. That way fireballs don't overlap
      4  10000 ????						;add second weapon a whip, then whip goes further, but is slower, on horse it cant stay out like the knife, it 
      5  10000 ????						;straddles several lines, so it's like this -----
      6  10000 ????						;						 -----
      7  10000 ????						;						      -----
      8  10000 ????						;Using hmove, not sure how to leave active, use player active? Maybe use ball instead of missle
      9  10000 ????						;endline1 is where players arm is miscolored
     10  10000 ????						;EndLin4b is where the color is bad for the arm now
     11  10000 ????
     12  10000 ????
     13  10000 ????						;a monster who shares the background color with head, so head is only seen when hit.
     14  10000 ????						;for linked creatures need to set them to same position at the beginning of each frame
     15  10000 ????
     16  10000 ????
     17  10000 ????
     18  10000 ????						;Dragon's name is scar??? So that way I don't have to fix black line
     19  10000 ????
     20  10000 ????						;FUTURE FEATURES / WATCH LIST
     21  10000 ????						;add more creatures
     22  10000 ????						;make sure points are scored for potion killed baddies
     23  10000 ????						;Can I remove duration, and calculate based on is it a boss, then use rand+level for duration???
     24  10000 ????						;Add other ways to cast spells
     25  10000 ????						; SWCHB.1    Select Button	    (0=Pressed)
     26  10000 ????						; Second controller button
     27  10000 ????
     28  10000 ????						;dragon lake
     29  10000 ????
     30  10000 ????
     31  10000 ????						;BUGS
     32  10000 ????						;1 line of player is discolored
     33  10000 ????						;make dragon not move
     34  10000 ????						;make dragon fire move
     35  10000 ????						;Touching an enemy causes one less line, will this cause TV distortion?
     36  10000 ????						;if you use potion on enemy too far right, they will stop and you can't continue
     37  10000 ????						;reintroduced bug that bounces screen if you hit bad guy, maybe related to timing of collision detection .nop
     38  10000 ????						;sometimes monsters wrap around screen
     39  10000 ????						;make overeyes only increment if monster on screen > min_damage
     40  10000 ????						;Touching an enemy sometimes drains all health
     41  10000 ????						;Eyes don't seem to activate
     42  10000 ????
     43  10000 ????						;IMPROVED
     44  10000 ????						;when you hit a monster on lane 3, the screen flickers for a moment
     45  10000 ????
     46  10000 ????
     47  10000 ????						;FIXED
     48  10000 ????						;Removed unused main hero graphics, which saved 32 bytes
     49  10000 ????						;Removed list of monsters, saved 57 bytes
     50  10000 ????						;Calculated score, saved 32 bytes
     51  10000 ????						;Calc duration, save 22
     52  10000 ????
     53  10000 ????						;--------------------------------------------------------------
     54  10000 ????						;5 different level masters
     55  10000 ????						;Need to go to 3.
     56  10000 ????						;Add end winning screen
     57  10000 ????						;Use wide for all bosses?
     58  10000 ????						;Mummy, Dragon, and Will-o-wisp
     59  10000 ????						;NAGA, can summon snakes
     60  10000 ????						;Gargoyle, 2 forms flying and still. When still can't be damaged
     61  10000 ????						;Griffon
     62  10000 ????						;Vampire, summon undead???, drain life, resurrect helpers in same spot they died, but as next more powerfull?, bats
     63  10000 ????						;Giant, can create craters that move accross screen
     64  10000 ????						;Mummy
     65  10000 ????						;Dragon, breath fire, uses the moving pit in mouth, change color when spit at player
     66  10000 ????						; 4 pieces, plus shoots fire pits.  two pieces for head, and 2 hands.
     67  10000 ????						; can move up and down only, when not shooting fire.
     68  10000 ????						;Minotaur
     69  10000 ????						;Sirens, control player
     70  10000 ????						;Gorgon, causes player death if on same level facing her
     71  10000 ????						;Fairy, can teleport, teleports past you, you must hit her from behind.
     72  10000 ????						;--------------------------------------------------------------
     73  10000 ????						;
     74  10000 ????
     75  10000 ????
     76  10000 ????
     77  10000 ????						;mummy will take 2 images to make him big, and change pit color
     78  10000 ????						;mummy b
     79  10000 ????						;Gargoyle, can fly straight at player quickly
     80  10000 ????						;Giant, creates moving craters. also large like mummy
     81  10000 ????						;Giant b
     82  10000 ????						;Dragon, large, shoots fire ball pits. only see head?
     83  10000 ????						;Dragon b
     84  10000 ????
     85  10000 ????
     86  10000 ????
     87  10000 ????
     88  10000 ????
     89  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE Tumulus.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE Tumulus.asm
     92  0000 ????
     93  0000 ????						; Constants ------
     94  0000 ????	       00 08	   C_P0_HEIGHT =	8	;height of sprite
     95  0000 ????	       00 0c	   C_P1_HEIGHT =	12	;height of hero sprite
     96  0000 ????	       00 b6	   C_KERNAL_HEIGHT =	182	;height of kernal/actually the largest line on the screen ;was 186
     97  0000 ????	       00 08	   Far_Left   =	8
     98  0000 ????	       00 8c	   Far_Right  =	140
     99  0000 ????	       00 6e	   Far_Right_Hero =	110
    100  0000 ????	       00 b4	   Far_Up_Hero =	180
    101  0000 ????	       00 32	   Far_Down_Hero =	38+C_P1_HEIGHT
    102  0000 ????	       00 04	   Enemy_Far_Left =	4
    103  0000 ????	       00 06	   Enemy_Pause_Left =	6
    104  0000 ????	       00 01	   HERO_SPEED_VER =	1
    105  0000 ????	       00 01	   HERO_SPEED_HOR =	1
    106  0000 ????	       00 14	   Screen_Rate =	20	;How fast screen is scrolling in X-Axis, for introducing enemy, not used yet
    107  0000 ????	       00 b9	   Enemy_Row_0 =	185	;185
    108  0000 ????	       00 a5	   Enemy_Row_E0 =	165	;160
    109  0000 ????	       00 91	   Enemy_Row_E1 =	145	;109
    110  0000 ????	       00 7d	   Enemy_Row_E2 =	125	;109
    111  0000 ????	       00 69	   Enemy_Row_E3 =	105	;109
    112  0000 ????	       00 55	   Enemy_Row_E4 =	85	;109
    113  0000 ????	       00 41	   Enemy_Row_E5 =	65	;109
    114  0000 ????	       00 2d	   Enemy_Row_E6 =	45	;73
    115  0000 ????	       00 17	   Enemy_Row_E7 =	23	;35  
    116  0000 ????	       00 3c	   Min_Eye_Quake =	60	; This is the count to start eyequake
    117  0000 ????	       00 0f	   Min_Eye_Trigger =	15	;Only creatures greater than this trigger the quake
    118  0000 ????	       00 09	   Min_Damage =	9	;
    119  0000 ????	       00 1b	   LVL1BOSS   =	27
    120  0000 ????	       00 19	   LVL2BOSS   =	25	;This is somehow causing the rolling
    121  0000 ????	       00 1a	   LVL3BOSS   =	26
    122  0000 ????	       00 1c	   LVL4BOSS   =	28	;This is obsolete, only 2 bosses now
    123  0000 ????	       00 1e	   LVL5BOSS   =	30	;This is obsolete, only 2 bosses now
    124  0000 ????	       00 19	   Mummy_Num  =	LVL2BOSS
    125  0000 ????						;Variables ------
    126  0000 ????
    127  0000 ????
    128  0000 ????
    129  0000 ????
    130  0000 ????
    131 U0100 ????				      seg.u	RAM
    132 U0080					      org	$0080
    133 U0080
    134 U0080
    135 U0080
    136 U0080		       00	   PICS       ds	1
    137 U0081		       00 00	   ROLLING_COUNTER ds	2
    138 U0083
    139 U0083		       00	   E0_Ptr     ds	1	;ptr to current graphic
    140 U0084		       00	   E1_Ptr     ds	1	;ptr to current graphic
    141 U0085		       00	   E2_Ptr     ds	1	;ptr to current graphic
    142 U0086		       00	   E3_Ptr     ds	1	;ptr to current graphic
    143 U0087		       00	   E4_Ptr     ds	1	;ptr to current graphic
    144 U0088		       00	   E5_Ptr     ds	1	;ptr to current graphic
    145 U0089		       00	   E6_Ptr     ds	1	;ptr to current graphic
    146 U008a		       00	   E7_Ptr     ds	1	;this is a temp variable for displaying score only
    147 U008b
    148 U008b		       00	   E0_Ptr2    ds	1	;ptr to current graphic
    149 U008c		       00	   E1_Ptr2    ds	1	;ptr to current graphic
    150 U008d		       00	   E2_Ptr2    ds	1	;ptr to current graphic
    151 U008e		       00	   E3_Ptr2    ds	1	;ptr to current graphic
    152 U008f		       00	   E4_Ptr2    ds	1	;ptr to current graphic
    153 U0090		       00	   E5_Ptr2    ds	1	;ptr to current graphic
    154 U0091		       00	   E6_Ptr2    ds	1	;ptr to current graphic
    155 U0092
    156 U0092		       00 00	   Temp_Ptr   ds	2	;ptr for temp holding
    157 U0094		       00	   Direction  ds	1	;direction character moving
    158 U0095
    159 U0095		       00	   Overeyes   ds	1
    160 U0096		       00	   EnemyGraphicsColorPtr_E0 ds	1
    161 U0097		       00	   EnemyGraphicsColorPtr_E1 ds	1
    162 U0098		       00	   EnemyGraphicsColorPtr_E2 ds	1
    163 U0099		       00	   EnemyGraphicsColorPtr_E3 ds	1
    164 U009a		       00	   EnemyGraphicsColorPtr_E4 ds	1
    165 U009b		       00	   EnemyGraphicsColorPtr_E5 ds	1
    166 U009c		       00	   EnemyGraphicsColorPtr_E6 ds	1
    167 U009d
    168 U009d		       00 00	   TempGraphicsColor ds	2
    169 U009f		       00 00	   MidSectionColorPtr ds	2
    170 U00a1
    171 U00a1		       00	   E0_XPos    ds	1	;horizontal position
    172 U00a2		       00	   E1_XPos    ds	1	;horizontal position
    173 U00a3		       00	   E2_XPos    ds	1	;horizontal position
    174 U00a4		       00	   E3_XPos    ds	1	;horizontal position
    175 U00a5		       00	   E4_XPos    ds	1	;horizontal position
    176 U00a6		       00	   E5_XPos    ds	1	;horizontal position
    177 U00a7		       00	   E6_XPos    ds	1	;horizontal position
    178 U00a8		       00	   Temp_XPos  ds	1	;temp horizontal position
    179 U00a9
    180 U00a9
    181 U00a9		       00	   E0_Type    ds	1	;Enemy Type
    182 U00aa		       00	   E1_Type    ds	1	;Enemy Type
    183 U00ab		       00	   E2_Type    ds	1	;Enemy Type
    184 U00ac		       00	   E3_Type    ds	1	;Enemy Type
    185 U00ad		       00	   E4_Type    ds	1	;Enemy Type
    186 U00ae		       00	   E5_Type    ds	1	;Enemy Type
    187 U00af		       00	   E6_Type    ds	1	;Enemy Type
    188 U00b0
    189 U00b0
    190 U00b0		       00	   E0_Health  ds	1	;Enemy Life Stat
    191 U00b1		       00	   E1_Health  ds	1	;Enemy Life Stat
    192 U00b2		       00	   E2_Health  ds	1	;Enemy Life Stat
    193 U00b3		       00	   E3_Health  ds	1	;Enemy Life Stat
    194 U00b4		       00	   E4_Health  ds	1	;Enemy Life Stat
    195 U00b5		       00	   E5_Health  ds	1	;Enemy Life Stat
    196 U00b6		       00	   E6_Health  ds	1	;Enemy Life Stat
    197 U00b7
    198 U00b7
    199 U00b7		       00	   Pit0_XPos  ds	1	;where pit is currently
    200 U00b8		       00	   Pit1_XPos  ds	1	;where pit is currently
    201 U00b9		       00	   Pit2_XPos  ds	1	;where pit is currently
    202 U00ba		       00	   Pit3_XPos  ds	1	;where pit is currently
    203 U00bb		       00	   Pit4_XPos  ds	1	;where pit is currently
    204 U00bc		       00	   Pit5_XPos  ds	1	;where pit is currently
    205 U00bd		       00	   Pit6_XPos  ds	1	;where pit is currently
    206 U00be
    207 U00be		       00	   Offset     ds	1
    208 U00bf		       00	   TempPit_XPos ds	1	;where next pit is
    209 U00c0
    210 U00c0		       00 00	   Hero_YPosFromBot ds	2	;Vertical position
    211 U00c2		       00 00	   Hero_XPos  ds	2	;horizontal position
    212 U00c4		       00	   Hero_Y     ds	1	;needed for skipdraw
    213 U00c5		       00 00	   Hero_Ptr   ds	2	;ptr to current graphic
    214 U00c7		       00	   Hero_Sword_Pos ds	1
    215 U00c8		       00 00	   HeroGraphicsColorPtr ds	2
    216 U00ca		       00	   Player_Health ds	1
    217 U00cb		       00	   MOV_STAT   ds	1	;direction player is moving
    218 U00cc		       00	   Level      ds	1	;What is the current level
    219 U00cd		       00	   Grapple    ds	1
    220 U00ce		       00	   Link       ds	1	;level for part of monster to be damaged
    221 U00cf
    222 U00cf		       00	   Graphics_Buffer ds	1	;buffer for graphics
    223 U00d0		       00	   Graphics_Buffer_2 ds	1	;buffer for graphics
    224 U00d1
    225 U00d1
    226 U00d1		       00	   Enemy_Life ds	1	;what eneamies are alive onscreen
    227 U00d2		       00	   Pause      ds	1	;are we waiting while enemy goes back and forth
    228 U00d3
    229 U00d3		       00	   PF0_L1     ds	1	; playfield buffer 
    230 U00d4		       00	   PF0_L2     ds	1	; playfield buffer 
    231 U00d5		       00	   PF0_L3     ds	1	; playfield buffer 
    232 U00d6		       00	   PF0_L4     ds	1	; playfield buffer			  
    233 U00d7
    234 U00d7		       00	   PF1_L1     ds	1	; playfield buffer 
    235 U00d8		       00	   PF1_L2     ds	1	; playfield buffer 
    236 U00d9		       00	   PF1_L3     ds	1	; playfield buffer 
    237 U00da		       00	   PF1_L4     ds	1	; playfield buffer			  
    238 U00db
    239 U00db		       00	   PF2_L1     ds	1	; playfield buffer 
    240 U00dc		       00	   PF2_L2     ds	1	; playfield buffer 
    241 U00dd		       00	   PF2_L3     ds	1	; playfield buffer 
    242 U00de		       00	   PF2_L4     ds	1	; playfield buffer 
    243 U00df
    244 U00df		       00	   PF3_L1     ds	1	; playfield buffer 
    245 U00e0		       00	   PF3_L2     ds	1	; playfield buffer 
    246 U00e1		       00	   PF3_L3     ds	1	; playfield buffer 
    247 U00e2		       00	   PF3_L4     ds	1	; playfield buffer			  
    248 U00e3
    249 U00e3		       00	   PF4_L1     ds	1	; playfield buffer 
    250 U00e4		       00	   PF4_L2     ds	1	; playfield buffer 
    251 U00e5		       00	   PF4_L3     ds	1	; playfield buffer 
    252 U00e6		       00	   PF4_L4     ds	1	; playfield buffer			  
    253 U00e7
    254 U00e7		       00	   PF5_L1     ds	1	; playfield buffer 
    255 U00e8		       00	   PF5_L2     ds	1	; playfield buffer 
    256 U00e9		       00	   PF5_L3     ds	1	; playfield buffer 
    257 U00ea		       00	   PF5_L4     ds	1	; playfield buffer 
    258 U00eb
    259 U00eb		       00	   PF_TEMP    ds	1	; playfield buffer temp
    260 U00ec		       00	   Multi_Temp ds	1	; 
    261 U00ed
    262 U00ed
    263 U00ed		       00	   Score      ds	1
    264 U00ee		       00	   Score1     ds	1
    265 U00ef		       00	   Score2     ds	1
    266 U00f0
    267 U00f0		       00	   Row_1      ds	1
    268 U00f1		       00	   Row_2      ds	1
    269 U00f2		       00	   Row_3      ds	1
    270 U00f3
    271 U00f3		       00	   duration   ds	1
    272 U00f4		       00	   musicData  ds	1
    273 U00f5		       00	   onhorse    ds	1
    274 U00f6		       00	   swordduration ds	1
    275 U00f7		       00	   SFX_Duration ds	1	;any sound effect other than music
    276 U00f8
    277 U00f8		       00	   Other_Hit  ds	1	;collision detection
    278 U00f9		       00	   New_Hit    ds	1	;collision detection
    279 U00fa		       00	   Player_Hit ds	1	;collision detection
    280 U00fb
    281 U00fb		       00	   Baddie_Duration ds	1	;time till next baddie
    282 U00fc		       00	   Baddie_Num ds	1	;current baddie displayed
    283 U00fd
    284 U00fd		       00	   Potion     ds	1	;Potions player currently has
    285 U00fe		       00	   RNG	      ds	1
    286 U00ff		       00	   Pit_Color2 ds	1
    287 U0100
    288  10000 ????				       seg	code
    289  f000					      org	$F000
    290  f000
    291  f000
    292  f000
    293  f000							;generic start up stuff...
    294  f000				   Start
    295  f000		       78		      SEI
    296  f001		       d8		      CLD
    297  f002		       a2 ff		      LDX	#$FF
    298  f004		       9a		      TXS
    299  f005		       a9 00		      LDA	#0
    300  f007
    301  f007
    302  f007				   ClearMem
    303  f007		       95 00		      STA	0,X
    304  f009		       ca		      DEX
    305  f00a		       d0 fb		      BNE	ClearMem
    306  f00c
    307  f00c
    308  f00c
    309  f00c
    310  f00c
    311  f00c
    312  f00c							;Setting some variables...
    313  f00c
    314  f00c
    315  f00c		       a9 11		      lda	#17
    316  f00e		       85 be		      sta	Offset
    317  f010
    318  f010		       85 c2		      STA	Hero_XPos
    319  f012
    320  f012		       a9 fe		      LDA	#%11111110
    321  f014		       85 d1		      STA	Enemy_Life
    322  f016
    323  f016
    324  f016		       a9 10		      LDA	#%00010000	;set playfield to not reflected
    325  f018		       85 0a		      STA	CTRLPF
    326  f01a		       85 f3		      sta	duration
    327  f01c							;LDA SnakeColorb ;Is this doing anything
    328  f01c							;STA Pit_Color ;Is this doing anything
    329  f01c
    330  f01c		       a9 f8		      LDA	#%11111000	;The last 3 bits control number and size of players
    331  f01e							;the second 2 bits control missle size
    332  f01e		       85 04		      STA	NUSIZ0
    333  f020		       85 05		      STA	NUSIZ1
    334  f022
    335  f022		       a2 03		      LDX	#3	;was 3
    336  f024
    337  f024
    338  f024				   LOADPFDATA
    339  f024
    340  f024
    341  f024		       bd f4 fe 	      LDA	PFData0-1,X
    342  f027		       95 d2		      STA	PF0_L1-1,x	;B
    343  f029
    344  f029		       bd fc fe 	      LDA	PFData1-1,X
    345  f02c		       95 d6		      STA	PF1_L1-1,x	;B
    346  f02e
    347  f02e		       bd 04 ff 	      LDA	PFData2-1,X
    348  f031		       95 da		      STA	PF2_L1-1,x	;C
    349  f033
    350  f033		       bd 0c ff 	      LDA	PFData3-1,X
    351  f036		       95 de		      STA	PF3_L1-1,x	;d
    352  f038
    353  f038		       bd 14 ff 	      LDA	PFData4-1,X
    354  f03b		       95 e2		      STA	PF4_L1-1,x	;E
    355  f03d
    356  f03d		       bd 1c ff 	      LDA	PFData5-1,X
    357  f040		       95 e6		      STA	PF5_L1-1,x	;F
    358  f042
    359  f042		       ca		      DEx
    360  f043		       d0 df		      BNE	LOADPFDATA
    361  f045
    362  f045
    363  f045							;VSYNC time
    364  f045
    365  f045
    366  f045				   MainLoop		;+++++++++++++++++++++++++++The start of a new screen
    367  f045				   MainLoopStart
    368  f045
    369  f045
    370  f045		       a9 1e		      LDA	#30
    371  f047
    372  f047		       85 00		      STA	VSYNC
    373  f049
    374  f049
    375  f049		       4c 07 f9 	      JMP	MORECALCS
    376  f04c				   MORECALCSRET
    377  f04c							;----------------------
    378  f04c
    379  f04c
    380  f04c
    381  f04c		       85 02		      STA	WSYNC	;//////////////////////////////////////////////	
    382  f04e		       85 2a		      STA	HMOVE
    383  f050
    384  f050
    385  f050
    386  f050
    387  f050		       a9 2b		      LDA	#43	;was 43	
    388  f052		       8d 96 02 	      STA	TIM64T
    389  f055
    390  f055
    391  f055
    392  f055		       a9 00		      LDA	#0
    393  f057		       85 00		      STA	VSYNC
    394  f059
    395  f059							;----------lots of time
    396  f059
    397  f059							;------------------------------------------
    398  f059
    399  f059
    400  f059
    401  f059
    402  f059							;setup pic animations ----------------------------------------------
    403  f059		       e6 81		      INC	ROLLING_COUNTER
    404  f05b		       d0 02		      BNE	RCROLLOVER
    405  f05d		       e6 82		      INC	ROLLING_COUNTER+1
    406  f05f				   RCROLLOVER
    407  f05f
    408  f05f
    409  f05f
    410  f05f		       a5 81		      LDA	ROLLING_COUNTER
    411  f061
    412  f061		       29 0f		      AND	#15	;every 8th screen swap to next image of player
    413  f063		       c9 08		      CMP	#8
    414  f065		       d0 0f		      BNE	PICSET3
    415  f067		       a5 80	   PICSET4    LDA	PICS
    416  f069		       c9 08		      CMP	#8
    417  f06b		       f0 05		      BEQ	PICSET
    418  f06d		       a9 08		      LDA	#8
    419  f06f		       4c 74 f0 	      JMP	PICSET2
    420  f072		       a9 00	   PICSET     LDA	#0
    421  f074		       85 80	   PICSET2    STA	PICS
    422  f076				   PICSET3
    423  f076
    424  f076
    425  f076		       a5 ca		      LDA	Player_Health
    426  f078		       f0 2d		      BEQ	SLICE4
    427  f07a
    428  f07a
    429  f07a		       a5 81		      LDA	ROLLING_COUNTER
    430  f07c		       29 07		      AND	#7
    431  f07e		       c9 00		      CMP	#0
    432  f080		       d0 03		      BNE	NS0
    433  f082		       4c 38 fe 	      JMP	SLICE0
    434  f085				   NS0
    435  f085		       c9 01		      CMP	#1
    436  f087		       d0 03		      BNE	NS1
    437  f089		       4c bf f0 	      JMP	SLICE1
    438  f08c				   NS1
    439  f08c		       c9 02		      CMP	#2
    440  f08e		       d0 03		      BNE	NS2
    441  f090		       4c 45 fa 	      JMP	SLICE2
    442  f093				   NS2
    443  f093		       c9 03		      CMP	#3
    444  f095		       d0 03		      BNE	NS3
    445  f097		       4c 25 fc 	      JMP	SLICE3
    446  f09a				   NS3
    447  f09a
    448  f09a		       c9 04		      CMP	#4
    449  f09c		       d0 03		      BNE	NS4
    450  f09e		       4c bf f0 	      JMP	SLICE1	;Baddie Movement is twice as fast
    451  f0a1				   NS4
    452  f0a1							;	CMP #5
    453  f0a1							;	BNE NS5
    454  f0a1		       4c a7 f0 	      JMP	SLICE4	;Baddie Movement is twice as fast
    455  f0a4				   NS5
    456  f0a4							;	CMP #6
    457  f0a4							;	BNE NS6
    458  f0a4							;	JMP SLICE1 ;Baddie Movement is twice as fast
    459  f0a4				   NS6
    460  f0a4							;	CMP #7
    461  f0a4							;	BNE NS7
    462  f0a4							;	JMP SLICE1 ;Baddie Movement is twice as fast
    463  f0a4				   NS7
    464  f0a4
    465  f0a4		       4c 17 f1 	      JMP	ENDSLICES
    466  f0a7
    467  f0a7
    468  f0a7
    469  f0a7
    470  f0a7
    471  f0a7
    472  f0a7
    473  f0a7				   SLICE4
    474  f0a7		       a9 00		      lda	#0
    475  f0a9
    476  f0a9		       85 f9		      sta	New_Hit
    477  f0ab		       85 f8		      sta	Other_Hit
    478  f0ad
    479  f0ad		       a5 fd		      LDA	Potion
    480  f0af		       c9 08		      CMP	#%00001000
    481  f0b1		       90 09		      bcc	OverPotionB
    482  f0b3		       38		      sec
    483  f0b4		       e9 08		      sbc	#%00001000
    484  f0b6		       85 fd		      sta	Potion
    485  f0b8		       a5 81		      lda	ROLLING_COUNTER	;#$FF
    486  f0ba		       85 f8		      sta	Other_Hit
    487  f0bc							;	sta New_Hit
    488  f0bc
    489  f0bc				   OverPotionB
    490  f0bc		       4c 17 f1 	      JMP	ENDSLICES
    491  f0bf
    492  f0bf
    493  f0bf
    494  f0bf
    495  f0bf
    496  f0bf				   SLICE1
    497  f0bf
    498  f0bf
    499  f0bf
    500  f0bf
    501  f0bf		       a2 07		      LDX	#7
    502  f0c1
    503  f0c1							;Eneamy Movement---------------------------------------------------
    504  f0c1
    505  f0c1				   MOVELEFT
    506  f0c1
    507  f0c1
    508  f0c1
    509  f0c1							;I think I can mess with Y
    510  f0c1
    511  f0c1		       bd b4 fa 	      LDA	#Multiplexer-1,x
    512  f0c4		       25 d1		      AND	Enemy_Life
    513  f0c6		       f0 43		      BEQ	PAUSED
    514  f0c8		       bd b4 fa 	      LDA	#Multiplexer-1,x
    515  f0cb		       25 94		      AND	Direction
    516  f0cd		       d0 0b		      BNE	FORWARD
    517  f0cf		       d6 a0		      DEC	E0_XPos-1,x
    518  f0d1		       a5 f5		      LDA	onhorse
    519  f0d3		       f0 13		      beq	DONEMOVE
    520  f0d5		       d6 a0		      DEC	E0_XPos-1,x
    521  f0d7		       4c e8 f0 	      JMP	DONEMOVE
    522  f0da				   FORWARD
    523  f0da		       b5 a8		      LDA	#E0_Type-1,x
    524  f0dc		       c9 09		      CMP	#Min_Damage
    525  f0de		       90 08		      BCC	DONEMOVE
    526  f0e0		       f6 a0		      INC	E0_XPos-1,x
    527  f0e2		       a5 f5		      LDA	onhorse
    528  f0e4		       f0 02		      beq	DONEMOVE
    529  f0e6		       f6 a0		      INC	E0_XPos-1,x
    530  f0e8				   DONEMOVE
    531  f0e8
    532  f0e8		       b5 a8		      LDA	#E0_Type-1,x
    533  f0ea		       c9 0f		      CMP	#Min_Eye_Trigger
    534  f0ec		       90 1d		      BCC	DONTCHANGER
    535  f0ee		       b5 a0		      LDA	E0_XPos-1,x
    536  f0f0		       c9 06		      CMP	#Enemy_Pause_Left
    537  f0f2		       b0 0c		      BCS	DONTCHANGEL
    538  f0f4		       a5 94		      LDA	Direction
    539  f0f6		       1d b4 fa 	      ORA	Multiplexer-1,x
    540  f0f9		       85 d2		      STA	Pause
    541  f0fb		       85 94		      STA	Direction
    542  f0fd		       4c 0b f1 	      JMP	DONTCHANGER
    543  f100				   DONTCHANGEL
    544  f100		       c9 82		      CMP	#Far_Right-10
    545  f102		       90 07		      BCC	DONTCHANGER
    546  f104		       a5 94		      LDA	Direction
    547  f106		       3d 2f fe 	      AND	Mask-1,x
    548  f109		       85 94		      STA	Direction
    549  f10b				   DONTCHANGER
    550  f10b
    551  f10b
    552  f10b				   PAUSED
    553  f10b		       ca		      DEX
    554  f10c		       d0 b3		      BNE	MOVELEFT
    555  f10e
    556  f10e		       a5 d1		      LDA	Enemy_Life
    557  f110		       d0 02		      BNE	DONTCHANGEDIR
    558  f112		       85 d2		      STA	Pause
    559  f114				   DONTCHANGEDIR
    560  f114
    561  f114
    562  f114				   MOVESET1
    563  f114
    564  f114
    565  f114
    566  f114		       4c 17 f1 	      JMP	ENDSLICES
    567  f117
    568  f117
    569  f117
    570  f117
    571  f117				   ENDSLICES
    572  f117
    573  f117		       a9 ff		      LDA	#255	; 3 cycles
    574  f119		       85 0d		      STA	PF0	; 3 cycles
    575  f11b		       85 0e		      STA	PF1	; 3 cycles
    576  f11d		       85 0f		      STA	PF2	; 3 cycles
    577  f11f							;-------------------------
    578  f11f		       a9 00		      LDA	#0
    579  f121		       85 21		      STA	HMP1	;Set Hero to stand still
    580  f123
    581  f123		       a5 cd		      LDA	Grapple
    582  f125		       f0 02		      BEQ	NOPFHIT
    583  f127		       06 ca		      asl	Player_Health
    584  f129				   NOPFHIT
    585  f129		       a5 94		      LDA	Direction
    586  f12b		       85 ec		      STA	Multi_Temp
    587  f12d		       a0 00		      LDY	#0
    588  f12f		       84 cd		      STY	Grapple
    589  f131		       a6 ce		      LDX	Link
    590  f133		       90 0c		      BCC	NotBossLevel
    591  f135		       a6 f8		      LDX	Other_Hit
    592  f137		       f0 03		      BEQ	HITSCORE
    593  f139
    594  f139		       4c 5f f2 	      JMP	NOSCORE
    595  f13c				   HITSCORE
    596  f13c		       a6 ce		      LDX	Link
    597  f13e		       4c 5f f2 	      JMP	NOSCORE
    598  f141
    599  f141				   NotBossLevel
    600  f141
    601  f141		       a2 07		      LDX	#7
    602  f143				   Collision
    603  f143
    604  f143		       bd b4 fa 	      LDA	Multiplexer-1,x
    605  f146		       25 f8		      AND	Other_Hit
    606  f148		       d0 03		      BNE	NoCollJMP
    607  f14a		       4c d1 f1 	      JMP	NoCollisionP0	;skip if not hitting...		
    608  f14d				   NoCollJMP
    609  f14d		       bd b4 fa 	      LDA	Multiplexer-1,x
    610  f150		       25 d1		      AND	Enemy_Life
    611  f152		       d0 03		      BNE	NoCoPo
    612  f154		       4c d1 f1 	      JMP	NoCollisionP0	;skip if not alive
    613  f157
    614  f157				   NoCoPo
    615  f157		       b5 a8		      lda	E0_Type-1,x
    616  f159		       c9 05		      cmp	#5
    617  f15b		       90 3b		      bcc	dontpause
    618  f15d		       85 d2		      sta	Pause
    619  f15f
    620  f15f		       c9 06		      CMP	#6
    621  f161		       f0 20		      BEQ	Type4
    622  f163
    623  f163		       c9 08		      CMP	#8
    624  f165		       f0 1c		      BEQ	Type4
    625  f167
    626  f167		       c9 0a		      CMP	#10
    627  f169		       f0 18		      BEQ	Type4
    628  f16b
    629  f16b
    630  f16b				   Type2
    631  f16b		       a5 94		      LDA	Direction	;make baddie change dir if hit
    632  f16d		       1d b4 fa 	      ORA	Multiplexer-1,x	;makes him go right
    633  f170		       85 94		      STA	Direction
    634  f172		       85 d2		      STA	Pause
    635  f174		       4c 98 f1 	      JMP	dontpause
    636  f177				   Type3
    637  f177		       a5 94		      LDA	Direction	;make baddie change dir if hit
    638  f179		       5d b4 fa 	      EOR	Multiplexer-1,x	;makes him just swap direction
    639  f17c		       85 94		      STA	Direction
    640  f17e		       85 d2		      STA	Pause
    641  f180		       4c 98 f1 	      JMP	dontpause
    642  f183				   Type4
    643  f183		       bd 2f fe 	      LDA	Mask-1,x	;makes him go left
    644  f186		       25 94		      AND	Direction	;make baddie change dir if hit
    645  f188		       85 94		      STA	Direction
    646  f18a		       85 d2		      STA	Pause
    647  f18c		       4c 98 f1 	      JMP	dontpause
    648  f18f
    649  f18f				   Type5
    650  f18f		       b5 a0		      LDA	E0_XPos-1,x
    651  f191		       c5 c2		      CMP	Hero_XPos
    652  f193		       b0 ee		      BCS	Type4
    653  f195		       4c 6b f1 	      JMP	Type2
    654  f198
    655  f198
    656  f198				   dontpause
    657  f198		       d6 af		      DEC	E0_Health-1,x
    658  f19a		       30 08		      BMI	ExtraDead
    659  f19c		       b5 a8		      LDA	E0_Type-1,x
    660  f19e		       c9 1b		      CMP	#LVL1BOSS
    661  f1a0		       f0 38		      BEQ	BOSS1
    662  f1a2		       d0 2d		      BNE	NoCollisionP0
    663  f1a4				   ExtraDead
    664  f1a4		       b5 a8		      lda	E0_Type-1,x
    665  f1a6		       84 eb		      sty	PF_TEMP
    666  f1a8		       65 eb		      adc	PF_TEMP
    667  f1aa		       b4 a8		      ldy	E0_Type-1,x	;This is where I will need to fix score baddie value
    668  f1ac		       bd 2f fe 	      LDA	Mask-1,x
    669  f1af		       25 d1		      AND	Enemy_Life
    670  f1b1		       85 d1		      STA	Enemy_Life
    671  f1b3		       b5 a8		      LDA	E0_Type-1,x
    672  f1b5		       f0 16		      BEQ	ITSZERO
    673  f1b7
    674  f1b7
    675  f1b7
    676  f1b7		       c9 05		      CMP	#5
    677  f1b9		       f0 5b		      BEQ	BlueMandrakeMan
    678  f1bb		       b0 14		      BCS	NoCollisionP0
    679  f1bd
    680  f1bd		       c9 02		      CMP	#2
    681  f1bf		       f0 60		      BEQ	RedMandrakePlant
    682  f1c1		       c9 03		      CMP	#3
    683  f1c3		       f0 61		      BEQ	BlueMandrakePlant
    684  f1c5		       c9 04		      CMP	#4
    685  f1c7		       f0 47		      BEQ	RedMandrakeMan
    686  f1c9
    687  f1c9
    688  f1c9
    689  f1c9		       c9 01		      CMP	#1	;Do I need to compare BEQ ITSZERO is at the beginning
    690  f1cb		       d0 04		      BNE	NoCollisionP0
    691  f1cd
    692  f1cd				   ITSZERO
    693  f1cd		       a9 18		      LDA	#24
    694  f1cf		       85 f5		      sta	onhorse
    695  f1d1
    696  f1d1				   NoCollisionP0
    697  f1d1		       b5 a8		      lda	E0_Type-1,x
    698  f1d3		       c9 09		      cmp	#Min_Damage	;This is causing snake to not damage player
    699  f1d5		       b0 61		      bcs	nosnakepause	;This is the routine that damages the player
    700  f1d7		       4c 41 f2 	      JMP	notsmacked
    701  f1da
    702  f1da				   BOSS1
    703  f1da		       86 ec		      stx	Multi_Temp
    704  f1dc		       b5 af		      lda	E0_Health-1,x
    705  f1de		       85 eb		      sta	PF_TEMP
    706  f1e0		       a9 00		      lda	#0
    707  f1e2		       95 af		      sta	E0_Health-1,x
    708  f1e4		       bd 2f fe 	      LDA	Mask-1,x
    709  f1e7		       25 d1		      AND	Enemy_Life
    710  f1e9		       85 d1		      STA	Enemy_Life
    711  f1eb		       a5 fe		      lda	RNG
    712  f1ed		       29 07		      and	#%00000111
    713  f1ef		       c9 07		      cmp	#%00000111
    714  f1f1		       d0 02		      bne	NotOutsideBOSSRange
    715  f1f3		       29 06		      and	#%00000110
    716  f1f5				   NotOutsideBOSSRange
    717  f1f5		       c9 00		      cmp	#0
    718  f1f7		       d0 02		      BNE	NotZeroLane
    719  f1f9		       a9 01		      lda	#1
    720  f1fb				   NotZeroLane
    721  f1fb		       aa		      tax
    722  f1fc		       bd b4 fa 	      LDA	Multiplexer-1,x
    723  f1ff		       05 d1		      ORA	Enemy_Life
    724  f201		       85 d1		      STA	Enemy_Life
    725  f203		       a5 eb		      lda	PF_TEMP
    726  f205		       95 af		      sta	E0_Health-1,x
    727  f207		       a9 1b		      lda	#LVL1BOSS
    728  f209		       95 a8		      sta	E0_Type-1,x
    729  f20b		       a6 ec		      ldx	Multi_Temp
    730  f20d		       4c d1 f1 	      JMP	NoCollisionP0
    731  f210
    732  f210				   RedMandrakeMan
    733  f210		       38		      SEC
    734  f211		       66 ca		      ROR	Player_Health	;Gain life because killed mandrake
    735  f213		       4c 41 f2 	      jmp	notsmacked
    736  f216				   BlueMandrakeMan
    737  f216		       a5 fd		      LDA	Potion
    738  f218		       c9 05		      CMP	#5
    739  f21a		       b0 25		      BCS	notsmacked
    740  f21c		       e6 fd		      INC	Potion	;Get a potion because kill Blue Mandrake
    741  f21e		       4c 41 f2 	      jmp	notsmacked
    742  f221				   RedMandrakePlant
    743  f221		       a9 04		      lda	#4	;convert plant to critter
    744  f223		       4c 28 f2 	      jmp	mandrake
    745  f226				   BlueMandrakePlant
    746  f226		       a9 05		      lda	#5	;Convert plant to critter
    747  f228				   mandrake
    748  f228		       95 a8		      sta	E0_Type-1,x
    749  f22a		       bd b4 fa 	      LDA	Multiplexer-1,x
    750  f22d		       05 d1		      ORA	Enemy_Life
    751  f22f		       85 d1		      STA	Enemy_Life
    752  f231		       a9 01		      LDA	#1
    753  f233		       95 af		      sta	E0_Health-1,x
    754  f235		       4c 41 f2 	      jmp	notsmacked
    755  f238				   nosnakepause
    756  f238							;lda #$FF
    757  f238							;sta Pause
    758  f238				   notsnake
    759  f238
    760  f238		       bd b4 fa 	      lda	Multiplexer-1,x
    761  f23b		       25 fa		      and	Player_Hit
    762  f23d		       f0 02		      beq	notsmacked
    763  f23f		       06 ca		      asl	Player_Health
    764  f241
    765  f241				   notsmacked
    766  f241
    767  f241		       ca		      DEX
    768  f242		       f0 03		      BEQ	NoCollision
    769  f244		       4c 43 f1 	      JMP	Collision
    770  f247				   NoCollision
    771  f247		       98		      tya
    772  f248		       a0 00		      ldy	#0
    773  f24a							;	ldx #0 ;we know x is 0, otherwise wouldn't be here
    774  f24a				   NotInvincable
    775  f24a		       c9 00		      cmp	#0
    776  f24c		       f0 11		      beq	NOSCORE
    777  f24e
    778  f24e
    779  f24e
    780  f24e							;---------------------Increment Score
    781  f24e		       f8		      sed
    782  f24f		       18		      clc
    783  f250		       65 ed		      adc	Score
    784  f252		       85 ed		      sta	Score
    785  f254		       8a		      txa
    786  f255		       65 ee		      adc	Score+1	;also adds carry
    787  f257		       85 ee		      sta	Score+1
    788  f259		       8a		      tXa
    789  f25a		       65 ef		      adc	Score+2	;also adds carry
    790  f25c		       85 ef		      sta	Score+2
    791  f25e		       d8		      cld
    792  f25f							;----------------------Increment Score
    793  f25f				   NOSCORE
    794  f25f
    795  f25f
    796  f25f		       a5 d1		      lda	Enemy_Life
    797  f261		       d0 04		      BNE	KEEPPAUSE
    798  f263		       85 d2		      sta	Pause
    799  f265		       85 94		      sta	Direction
    800  f267
    801  f267				   KEEPPAUSE
    802  f267
    803  f267							;---------------------------------------
    804  f267
    805  f267
    806  f267		       a5 fa		      lda	Player_Hit
    807  f269		       c9 01		      cmp	#1	;if not 1, you can't get on horse
    808  f26b		       a9 00		      lda	#0
    809  f26d		       b0 08		      BCS	Hit_Pit
    810  f26f		       a5 f9		      LDA	New_Hit
    811  f271		       c9 01		      CMP	#1
    812  f273		       a9 00		      LDA	#0	;to fix issue with player corruption from monster touching
    813  f275
    814  f275		       90 02		      BCC	Did_Not_Hit_Pit
    815  f277				   Hit_Pit
    816  f277		       85 f5		      sta	onhorse
    817  f279				   Did_Not_Hit_Pit
    818  f279
    819  f279
    820  f279				   not_on_horse
    821  f279
    822  f279
    823  f279
    824  f279		       a5 ce		      LDA	Link
    825  f27b		       f0 04		      BEQ	LinkZero
    826  f27d		       a5 ec		      LDA	Multi_Temp
    827  f27f		       85 94		      STA	Direction
    828  f281				   LinkZero
    829  f281							;setup pic animations ----------------------------------------------
    830  f281
    831  f281		       a5 81		      lda	ROLLING_COUNTER
    832  f283		       29 08		      and	#%00001000
    833  f285
    834  f285		       d0 26		      bne	RCP_1
    835  f287		       a5 f5		      lda	onhorse
    836  f289
    837  f289		       d0 11		      bne	swinging
    838  f28b		       a5 f6		      lda	swordduration
    839  f28d
    840  f28d		       f0 0d	   SW1	      beq	swinging
    841  f28f		       c9 0b	   SW2	      cmp	#11
    842  f291		       b0 09	   SW3	      bcs	swinging
    843  f293		       a9 fa	   SW4	      lda	#>HeroGraphics2	;high byte of graphic location
    844  f295		       85 c6	   SW5	      sta	Hero_Ptr+1	;store in high byte of graphic pointer
    845  f297		       a9 d0	   SW6	      lda	#<HeroGraphics2
    846  f299		       4c a5 f2    SW7	      jmp	noswinging
    847  f29c				   swinging
    848  f29c
    849  f29c
    850  f29c		       a9 fb		      lda	#>HeroGraphics0	;high byte of graphic location
    851  f29e		       85 c6	   SW8	      sta	Hero_Ptr+1	;store in high byte of graphic pointer
    852  f2a0		       18	   SW9	      clc
    853  f2a1		       a9 f5	   SW10       lda	#<HeroGraphics0	;low byte of ptr is graphic
    854  f2a3		       69 0c		      ADC	#C_P1_HEIGHT
    855  f2a5				   noswinging
    856  f2a5		       18		      CLC		;clear carry
    857  f2a6		       65 f5		      adc	onhorse
    858  f2a8		       85 c5		      sta	Hero_Ptr	;(high byte already set)
    859  f2aa		       4c b6 f2 	      JMP	RCP_2
    860  f2ad
    861  f2ad				   RCP_1
    862  f2ad		       a9 fb		      lda	#>HeroGraphics0	;high byte of graphic location
    863  f2af		       85 c6		      sta	Hero_Ptr+1	;store in high byte of graphic pointer
    864  f2b1		       18		      clc
    865  f2b2		       a9 f5		      lda	#<HeroGraphics0	;low byte of ptr is graphic
    866  f2b4		       65 f5		      adc	onhorse
    867  f2b6				   RCP_2
    868  f2b6		       85 c5		      sta	Hero_Ptr	;(high byte already set)
    869  f2b8
    870  f2b8
    871  f2b8
    872  f2b8				   TESTPOINTD
    873  f2b8
    874  f2b8		       a5 f5		      lda	onhorse
    875  f2ba		       c9 01		      cmp	#1
    876  f2bc		       b0 0d		      bcs	STARTHORSEMULT
    877  f2be
    878  f2be		       a9 d8		      LDA	#%11011000	;The last 3 bits control number and size of players
    879  f2c0							;the second 2 bits control missle size
    880  f2c0
    881  f2c0		       a6 f6		      LDX	swordduration
    882  f2c2		       e0 04		      cpx	#4
    883  f2c4		       90 07		      bcc	ENDHORSEMULT
    884  f2c6		       a9 e8		      LDA	#%11101000	;The last 3 bits control number and size of players
    885  f2c8							;the second 2 bits control missle size
    886  f2c8				   SMALLSWORD
    887  f2c8		       4c cd f2 	      JMP	ENDHORSEMULT
    888  f2cb				   STARTHORSEMULT
    889  f2cb		       a9 ed		      LDA	#%11101101	;The last 3 bits control number and size of players
    890  f2cd							;the second 2 bits control missle size
    891  f2cd
    892  f2cd				   ENDHORSEMULT
    893  f2cd
    894  f2cd		       85 05		      STA	NUSIZ1
    895  f2cf
    896  f2cf
    897  f2cf
    898  f2cf
    899  f2cf		       a5 d1		      LDA	Enemy_Life
    900  f2d1		       d0 02		      BNE	Enemies_Alive
    901  f2d3		       85 95		      STA	Overeyes
    902  f2d5				   Enemies_Alive
    903  f2d5
    904  f2d5
    905  f2d5
    906  f2d5
    907  f2d5							;for skipDraw, E0_Y needs to be set (usually during VBLANK)
    908  f2d5							;to Vertical Position (0 = top) + height of sprite - 1.
    909  f2d5							;we're storing distance from bottom, not top, so we have
    910  f2d5							;to start with the kernal height and YPosFromBot...
    911  f2d5		       a9 c0		      lda	#C_KERNAL_HEIGHT + #C_P1_HEIGHT - #2
    912  f2d7		       38		      sec
    913  f2d8		       e5 c0		      sbc	Hero_YPosFromBot	;subtract integer byte of distance from bottom
    914  f2da		       85 c4		      sta	Hero_Y
    915  f2dc
    916  f2dc
    917  f2dc							;we also need to adjust the graphic pointer for skipDraw
    918  f2dc							;it equals what it WOULD be at 'normally' - it's position
    919  f2dc							;from bottom plus sprite height - 1.
    920  f2dc							;(note this requires that the 'normal' starting point for
    921  f2dc							;the graphics be at least align 256 + kernalheight ,
    922  f2dc							;or else this subtraction could result in a 'negative'
    923  f2dc							; (page boundary crossing) value
    924  f2dc		       a5 c5		      lda	Hero_Ptr
    925  f2de		       38		      sec
    926  f2df		       e5 c0		      sbc	Hero_YPosFromBot	;integer part of distance from bottom
    927  f2e1		       18		      clc
    928  f2e2		       69 0b		      adc	#C_P1_HEIGHT - #1
    929  f2e4		       85 c5		      sta	Hero_Ptr	;2 byte
    930  f2e6
    931  f2e6
    932  f2e6		       a9 fb		      LDA	#>HeroGraphicsColor
    933  f2e8		       85 c9		      sta	HeroGraphicsColorPtr+1
    934  f2ea
    935  f2ea		       a9 c1		      LDA	#<HeroGraphicsColor
    936  f2ec							;	sta HeroGraphicsColorPtr
    937  f2ec
    938  f2ec
    939  f2ec							;	lda HeroGraphicsColorPtr
    940  f2ec		       38		      sec
    941  f2ed		       e5 c0		      sbc	Hero_YPosFromBot
    942  f2ef		       18		      clc
    943  f2f0		       69 0b		      adc	#C_P1_HEIGHT - #1
    944  f2f2		       65 f5		      adc	onhorse
    945  f2f4		       85 c8		      STA	HeroGraphicsColorPtr
    946  f2f6
    947  f2f6
    948  f2f6							;setup pic animations ----------------------------------------------
    949  f2f6
    950  f2f6
    951  f2f6		       ad b5 fd 	      lda	GraphicsColorTableHigh	;Cheating because all the color is in the same bank
    952  f2f9		       85 9e		      sta	TempGraphicsColor+1	;Cheating because all the color is in the same bank
    953  f2fb
    954  f2fb		       a0 07		      ldy	#7
    955  f2fd
    956  f2fd
    957  f2fd				   setuppics
    958  f2fd
    959  f2fd		       b9 b4 fa 	      lda	Multiplexer-1,y
    960  f300
    961  f300		       25 d1		      and	Enemy_Life
    962  f302		       d0 0d		      BNE	alive1b
    963  f304		       a9 c8		      lda	#<PonyGraphicsColor	;low byte of ptr is graphic
    964  f306		       99 82 00 	      sta	#E0_Ptr-1,y	;(high byte already set)
    965  f309
    966  f309		       a9 fd		      lda	#>PonyGraphicsColor	;high byte of graphic location
    967  f30b		       99 8a 00 	      sta	#E0_Ptr2-1,y	;store in high byte of graphic pointer
    968  f30e		       4c 22 f3 	      jmp	notalive1b
    969  f311				   alive1b
    970  f311
    971  f311
    972  f311		       b6 a8		      ldx	E0_Type-1,y
    973  f313
    974  f313							;GraphicsTable
    975  f313
    976  f313		       bd 55 fd 	      lda	GraphicsTableLow,x	;low byte of ptr is graphic
    977  f316		       18		      CLC		;clear carry
    978  f317		       65 80		      ADC	PICS
    979  f319		       99 82 00 	      sta	E0_Ptr-1,y
    980  f31c
    981  f31c		       bd 75 fd 	      lda	GraphicsTableHigh,x	;high byte of graphic location
    982  f31f
    983  f31f		       99 8a 00 	      sta	E0_Ptr2-1,y
    984  f322
    985  f322
    986  f322
    987  f322
    988  f322				   notalive1b
    989  f322
    990  f322
    991  f322		       b9 82 00 	      lda	E0_Ptr-1,y
    992  f325		       38		      sec
    993  f326		       f9 3b fa 	      sbc	DistFromBottom-1,y	;integer part of distance from bottom
    994  f329		       99 82 00 	      sta	E0_Ptr-1,y	;2 byte
    995  f32c
    996  f32c
    997  f32c		       a5 fd		      lda	Potion
    998  f32e		       c9 08		      cmp	#%00001000
    999  f330		       90 05		      bcc	AdjustTableForColorHitTest
   1000  f332		       a9 20		      LDA	#<EnemyFireColor
   1001  f334		       4c 4c f3 	      JMP	AdjustTableForColor
   1002  f337				   AdjustTableForColorHitTest
   1003  f337		       b9 a8 00 	      lda	E0_Type-1,y
   1004  f33a		       c9 10		      cmp	#$10
   1005  f33c		       90 0b		      bcc	NotAdjusted
   1006  f33e		       b9 b4 fa 	      lda	Multiplexer-1,y
   1007  f341		       25 f8		      and	Other_Hit
   1008  f343		       c9 01		      cmp	#1
   1009  f345		       a9 18		      LDA	#<EnemyHitColor
   1010  f347		       b0 03		      bcs	AdjustTableForColor
   1011  f349				   NotAdjusted
   1012  f349		       bd 95 fd 	      LDA	GraphicsColorTableLow,x
   1013  f34c				   AdjustTableForColor
   1014  f34c		       38		      sec
   1015  f34d		       f9 3b fa 	      sbc	DistFromBottom-1,y
   1016  f350		       99 95 00 	      STA	EnemyGraphicsColorPtr_E0-1,y
   1017  f353
   1018  f353
   1019  f353							;setup pic animations ----------------------------------------------
   1020  f353		       88		      dey
   1021  f354		       d0 a7		      bne	setuppics
   1022  f356
   1023  f356
   1024  f356							;setup pic animations ----------------------------------------------
   1025  f356
   1026  f356
   1027  f356
   1028  f356
   1029  f356
   1030  f356		       a5 01		      LDA	%00000001
   1031  f358		       85 25		      STA	VDELP0
   1032  f35a							;	STA VDELP1
   1033  f35a
   1034  f35a							;setup php ball trick
   1035  f35a		       a2 1e		      ldx	#ENAM0+1
   1036  f35c		       9a		      txs		;set stack to enam location
   1037  f35d							;end ball trick setup
   1038  f35d
   1039  f35d		       a0 04		      LDY	#4	; was 191	
   1040  f35f							;----------lots of time
   1041  f35f		       a5 95		      LDA	Overeyes
   1042  f361		       d0 02		      BNE	SETCOLOR	;//This is to change syline color when overeyes is on
   1043  f363		       a9 70		      LDA	#$70
   1044  f365		       85 08	   SETCOLOR   STA	COLUPF
   1045  f367
   1046  f367
   1047  f367				   TESTPOINTF
   1048  f367
   1049  f367							;music section ------------------------------------------------------------------------
   1050  f367
   1051  f367		       a9 b4		      lda	#180
   1052  f369		       c5 c7		      cmp	Hero_Sword_Pos
   1053  f36b		       90 18		      bcc	NoSwordSound
   1054  f36d
   1055  f36d
   1056  f36d		       a5 f6		      lda	swordduration
   1057  f36f		       0a		      asl
   1058  f370		       0a		      asl
   1059  f371		       0a		      asl
   1060  f372		       aa		      tax
   1061  f373							;	ldx swordduration
   1062  f373		       bd 24 ff 	      lda	SwordSongv-1,x
   1063  f376		       85 1a		      STA	AUDV1
   1064  f378
   1065  f378
   1066  f378		       bd 25 ff 	      lda	SwordSongc-1,x
   1067  f37b		       85 16		      STA	AUDC1
   1068  f37d
   1069  f37d		       bd 26 ff 	      lda	SwordSongf-1,x
   1070  f380		       85 18		      STA	AUDF1
   1071  f382
   1072  f382		       4c 85 f3 	      jmp	LeftSound
   1073  f385				   NoSwordSound
   1074  f385
   1075  f385
   1076  f385				   LeftSound
   1077  f385
   1078  f385		       c6 f3		      DEC	duration
   1079  f387		       d0 31		      bne	GotMusic
   1080  f389
   1081  f389
   1082  f389
   1083  f389		       a6 f4		      ldx	musicData
   1084  f38b		       bd 00 fd 	      lda	LEFTAUD,x
   1085  f38e		       29 07		      AND	#%00000111
   1086  f390		       85 19		      STA	AUDV0
   1087  f392
   1088  f392							;	lda LEFTAUDC,x  ;always 12 so cheating
   1089  f392		       ea		      nop		;why do I need this delay, player skips when moving without it
   1090  f393		       ea		      nop
   1091  f394		       a9 0c		      lda	#12
   1092  f396		       85 15		      STA	AUDC0
   1093  f398
   1094  f398		       bd 00 fd 	      lda	LEFTAUD,x
   1095  f39b		       4a		      LSR
   1096  f39c		       4a		      LSR
   1097  f39d		       4a		      LSR
   1098  f39e		       85 17		      STA	AUDF0
   1099  f3a0
   1100  f3a0
   1101  f3a0				   skipL052
   1102  f3a0
   1103  f3a0
   1104  f3a0		       a9 b4		      lda	#180
   1105  f3a2		       c5 c7		      cmp	Hero_Sword_Pos
   1106  f3a4		       b0 0d		      bcs	SkipRightSound2
   1107  f3a6
   1108  f3a6
   1109  f3a6							;	lda RIGHTAUDV,x ;always 4 so cheating
   1110  f3a6		       a9 04		      lda	#4
   1111  f3a8		       85 1a		      STA	AUDV1
   1112  f3aa
   1113  f3aa							;	lda RIGHTAUDC,x ;was always 6 so cheating
   1114  f3aa		       a9 06		      lda	#6
   1115  f3ac		       85 16		      STA	AUDC1
   1116  f3ae
   1117  f3ae		       bd a0 ff 	      lda	RIGHTAUDF,x
   1118  f3b1		       85 18		      STA	AUDF1
   1119  f3b3				   SkipRightSound2
   1120  f3b3
   1121  f3b3
   1122  f3b3
   1123  f3b3
   1124  f3b3
   1125  f3b3							;	lda NOTEDURATION,x ;Notes were alway 14, so cheating
   1126  f3b3		       a9 0e		      lda	#14
   1127  f3b5		       e6 f4		      inc	musicData
   1128  f3b7		       e8		      inx
   1129  f3b8		       85 f3		      STA	duration
   1130  f3ba
   1131  f3ba
   1132  f3ba				   GotMusic
   1133  f3ba
   1134  f3ba
   1135  f3ba		       bd 00 fd 	      lda	LEFTAUD,x
   1136  f3bd		       c9 ff		      cmp	#255
   1137  f3bf		       d0 04		      bne	resetx
   1138  f3c1		       a9 00		      lda	#0
   1139  f3c3		       85 f4		      sta	musicData
   1140  f3c5				   resetx
   1141  f3c5
   1142  f3c5							;music section ------------------------------------------------------------------------
   1143  f3c5
   1144  f3c5
   1145  f3c5
   1146  f3c5
   1147  f3c5
   1148  f3c5							;-----------------------------Overeys Pit Creation	
   1149  f3c5
   1150  f3c5							;	LDA Pause
   1151  f3c5							;	BCS NOBIGEYES
   1152  f3c5		       a5 95		      LDA	Overeyes
   1153  f3c7		       c9 3c		      CMP	#Min_Eye_Quake
   1154  f3c9		       a9 00		      LDA	#0
   1155  f3cb		       90 26		      BCC	NOEyesYet
   1156  f3cd
   1157  f3cd		       a5 fe		      LDA	RNG	;Create a monster if over 127?
   1158  f3cf		       c9 7f		      CMP	#127	;is it over 127
   1159  f3d1		       b0 1e		      BCS	NOTCREATED
   1160  f3d3
   1161  f3d3		       29 07		      AND	#%00000111	;making it a 0 to 31 number based on RNG
   1162  f3d5		       aa		      tax
   1163  f3d6		       b5 a8		      LDA	E0_Type-1,x
   1164  f3d8		       c9 11		      CMP	#$11
   1165  f3da		       b0 15		      BCS	NOTCREATED
   1166  f3dc
   1167  f3dc		       bd b4 fa 	      LDA	Multiplexer-1,x
   1168  f3df		       05 d1		      ORA	Enemy_Life
   1169  f3e1		       85 d1		      STA	Enemy_Life
   1170  f3e3		       a5 fe		      LDA	RNG	;Is this the next monster we are loading?
   1171  f3e5		       69 0a		      ADC	#10
   1172  f3e7		       29 60		      AND	#%01100000
   1173  f3e9		       95 a0		      STA	#E0_XPos-1,x
   1174  f3eb		       a9 0a		      LDA	#10	;Small Pit
   1175  f3ed
   1176  f3ed		       95 a8		      STA	#E0_Type-1,x	;list of monsters BADDIEVALUE3, or MonsterList, this is probably loading the monster
   1177  f3ef		       95 af		      STA	#E0_Health-1,x
   1178  f3f1				   NOTCREATED
   1179  f3f1
   1180  f3f1
   1181  f3f1
   1182  f3f1		       a9 ff		      LDA	#$FF
   1183  f3f3
   1184  f3f3				   NOEyesYet
   1185  f3f3		       a0 04		      LDY	#4
   1186  f3f5				   NOBIGEYES
   1187  f3f5
   1188  f3f5
   1189  f3f5		       85 1b		      sta	GRP0
   1190  f3f7
   1191  f3f7
   1192  f3f7							;There is time here
   1193  f3f7
   1194  f3f7
   1195  f3f7
   1196  f3f7
   1197  f3f7				   WaitForVblankEnd
   1198  f3f7		       ad 84 02 	      LDA	INTIM
   1199  f3fa		       d0 fb		      BNE	WaitForVblankEnd
   1200  f3fc
   1201  f3fc
   1202  f3fc		       85 02		      STA	WSYNC
   1203  f3fe		       85 01		      STA	VBLANK
   1204  f400
   1205  f400
   1206  f400							;main scanline loop...
   1207  f400
   1208  f400
   1209  f400				   PreScanLoop
   1210  f400
   1211  f400				   ScanLoopHero 		;start of kernal +++++++++++++++++++++++ for Hero positioning
   1212  f400		       18		      clc
   1213  f401		       a5 c2		      lda	Hero_XPos	;3
   1214  f403
   1215  f403
   1216  f403				   .Div15Hero
   1217  f403		       e9 0f		      sbc	#15	; 2	  
   1218  f405		       b0 fc		      bcs	.Div15Hero	; 3(2)
   1219  f407
   1220  f407		       aa		      tax
   1221  f408		       bd 0f f9 	      lda	fineAdjustTable,x	; 13 -> Consume 5 cycles by guaranteeing we cross a page boundary
   1222  f40b		       85 21		      sta	HMP1	;reset amount to fine adjust player
   1223  f40d		       85 11		      sta	RESP1	;reset where the player is
   1224  f40f		       85 13		      sta	RESM1	;reset where the sword is
   1225  f411		       85 23		      sta	HMM1	;reset amount to fine adjust sword
   1226  f413
   1227  f413
   1228  f413		       85 02		      STA	WSYNC	;3 cycles =
   1229  f415		       85 2a		      STA	HMOVE	;3
   1230  f417				   EndScanLoopHero		;end of kernal +++++++++++++++++ for Hero positioning
   1231  f417				   .100
   1232  f417							;this is to align sword
   1233  f417		       c6 c4		      DEC	Hero_Y
   1234  f419
   1235  f419
   1236  f419		       a6 19		      ldx	Mummy_Num
   1237  f41b
   1238  f41b							;GraphicsTable
   1239  f41b				   loadbellycolor
   1240  f41b		       bd 98 fa 	      lda	BellyColor,x	;low byte of ptr is graphic
   1241  f41e
   1242  f41e		       85 9f		      sta	MidSectionColorPtr
   1243  f420
   1244  f420
   1245  f420		       ea		      NOP
   1246  f421		       ea		      NOP
   1247  f422		       ea		      NOP
   1248  f423		       ea		      NOP
   1249  f424
   1250  f424
   1251  f424		       85 2b		      STA	HMCLR
   1252  f426		       a5 cb		      LDA	MOV_STAT
   1253  f428		       c9 01		      CMP	#1
   1254  f42a		       b0 03		      BCS	MLEFT
   1255  f42c		       4c 31 f4 	      JMP	MRIGHT
   1256  f42f				   MLEFT
   1257  f42f		       a9 30		      LDA	#%00110000	;Atari only looks at 4 most significant bits in 2's compliment, this is the distance from player
   1258  f431		       85 23	   MRIGHT     STA	HMM1
   1259  f433
   1260  f433		       85 2c		      STA	CXCLR	;reset the collision detection for next time
   1261  f435
   1262  f435
   1263  f435		       a9 00		      LDA	#$0
   1264  f437		       85 1c		      STA	GRP1
   1265  f439
   1266  f439		       a0 04		      LDY	#4
   1267  f43b
   1268  f43b
   1269  f43b							;	CMP Pause
   1270  f43b							;	BCS NOBIGEYES2
   1271  f43b							;	LDY #8 ;was 8//this controls if the skyline will shift color
   1272  f43b							;NOBIGEYES2
   1273  f43b
   1274  f43b		       a9 72		      LDA	#$72
   1275  f43d		       85 08		      STA	COLUPF
   1276  f43f
   1277  f43f
   1278  f43f
   1279  f43f
   1280  f43f		       85 02		      STA	WSYNC
   1281  f441		       85 2a		      STA	HMOVE	;3
   1282  f443
   1283  f443		       a5 cb		      lda	MOV_STAT
   1284  f445		       c9 01		      cmp	#1
   1285  f447		       b0 0f		      bcs	HORSEKNIFELEFT
   1286  f449
   1287  f449		       a5 f5		      lda	onhorse
   1288  f44b		       c9 01		      cmp	#1
   1289  f44d		       a9 e0		      LDA	#%11100000	; on horse value facing right
   1290  f44f		       b0 02		      bcs	onhorseknife
   1291  f451		       a9 00		      LDA	#%00000000	;not on horse value facing right
   1292  f453				   onhorseknife
   1293  f453		       85 23		      STA	HMM1
   1294  f455
   1295  f455		       4c 64 f4 	      JMP	NOTONHORSEKNIFE
   1296  f458				   HORSEKNIFELEFT
   1297  f458
   1298  f458		       a5 f5		      lda	onhorse
   1299  f45a		       c9 01		      cmp	#1
   1300  f45c		       a9 20		      LDA	#%00100000
   1301  f45e		       b0 02		      bcs	onhorseknife2
   1302  f460		       a9 30		      LDA	#%00110000
   1303  f462				   onhorseknife2
   1304  f462		       85 23		      STA	HMM1
   1305  f464
   1306  f464
   1307  f464				   NOTONHORSEKNIFE
   1308  f464							;DEX
   1309  f464		       a9 44		      LDA	#$44
   1310  f466		       85 06		      STA	COLUP0
   1311  f468
   1312  f468		       a9 01		      LDA	#%00000001
   1313  f46a		       85 27		      STA	VDELBL
   1314  f46c		       a2 00		      LDX	#0
   1315  f46e
   1316  f46e		       b9 8c ff 	      LDA	PFCOLOR-1,Y	; 4 cycles //Is this needed?
   1317  f471
   1318  f471
   1319  f471		       85 02		      STA	WSYNC
   1320  f473							;start of kernal +++++++++++++++++++++++ for player 0 positioning
   1321  f473		       85 2a		      STA	HMOVE
   1322  f475
   1323  f475							;ScanLoops ;start of kernal +++++++++++++++++++++++ for skyline
   1324  f475				   MTNRANGE2
   1325  f475
   1326  f475		       85 09		      STA	COLUBK	;and store as the bgcolor ; 3 cycles
   1327  f477		       b9 92 ff 	      LDA	PFCOLORB-1,Y
   1328  f47a		       85 08		      STA	COLUPF
   1329  f47c
   1330  f47c		       b5 d3		      LDA	PF0_L1,x	; 4 cycles
   1331  f47e		       85 0d		      STA	PF0	; 3 cycles
   1332  f480		       b5 d7		      LDA	PF1_L1,x	; 4 cycles
   1333  f482		       85 0e		      STA	PF1	; 3 cycles
   1334  f484		       b5 db		      LDA	PF2_L1,x	; 4 cycles
   1335  f486		       85 0f		      STA	PF2	; 3 cycles
   1336  f488							;3 cycles 
   1337  f488
   1338  f488
   1339  f488		       b5 df		      LDA	PF3_L1,x	; 4 cycles
   1340  f48a		       85 0d		      STA	PF0	; 3 cycles
   1341  f48c		       b5 e3		      LDA	PF4_L1,x	; 4 cycles
   1342  f48e		       85 0e		      STA	PF1	; 3 cycles
   1343  f490		       b5 e7		      LDA	PF5_L1,x	; 4 cycles
   1344  f492		       85 0f		      STA	PF2	; 3 cycles
   1345  f494
   1346  f494
   1347  f494		       88		      dey
   1348  f495		       e8		      INX
   1349  f496
   1350  f496		       a9 02		      LDA	#%00000010	;The last 3 bits control number and size of players
   1351  f498
   1352  f498
   1353  f498		       85 04		      STA	NUSIZ0
   1354  f49a
   1355  f49a		       b9 8c ff 	      LDA	PFCOLOR-1,Y	; 4 cycles
   1356  f49d
   1357  f49d		       e0 04		      cpx	#4
   1358  f49f		       85 02		      STA	WSYNC
   1359  f4a1		       d0 d2		      bne	MTNRANGE2
   1360  f4a3		       85 2a		      STA	HMOVE
   1361  f4a5
   1362  f4a5							;EndScanLoops ;end of kernal +++++++++++++++++++++++ for skyline
   1363  f4a5
   1364  f4a5		       85 08		      STA	COLUPF
   1365  f4a7							;LDA #$12;
   1366  f4a7		       a6 cc		      LDX	Level
   1367  f4a9		       a5 ca		      lda	Player_Health
   1368  f4ab		       d0 02		      bne	donjump2
   1369  f4ad		       a2 06		      ldx	#6
   1370  f4af				   donjump2
   1371  f4af		       bd 5a fc 	      LDA	Level_Color,x
   1372  f4b2		       85 09		      STA	COLUBK	;and store as the bgcolor
   1373  f4b4		       a0 b6		      LDY	#C_KERNAL_HEIGHT	;
   1374  f4b6
   1375  f4b6		       a9 01		      LDA	#$01	;Dragon Lake
   1376  f4b8		       85 0a		      STA	CTRLPF
   1377  f4ba		       a9 00		      LDA	#$0
   1378  f4bc		       85 0d		      STA	PF0	; 3 cycles
   1379  f4be		       85 0e		      STA	PF1	; 3 cycles
   1380  f4c0		       85 0f		      STA	PF2	; 3 cycles
   1381  f4c2							;	LDA #$0
   1382  f4c2		       a2 00		      LDX	#$0
   1383  f4c4		       85 eb		      STA	PF_TEMP
   1384  f4c6		       85 1b		      STA	GRP0
   1385  f4c8
   1386  f4c8		       85 02		      STA	WSYNC
   1387  f4ca		       85 2a		      STA	HMOVE
   1388  f4cc
   1389  f4cc		       e6 c4		      INC	Hero_Y
   1390  f4ce		       e6 c4		      INC	Hero_Y
   1391  f4d0		       e6 c4		      INC	Hero_Y
   1392  f4d2
   1393  f4d2
   1394  f4d2		       85 1c		      STA	GRP1
   1395  f4d4		       85 2b		      STA	HMCLR
   1396  f4d6
   1397  f4d6
   1398  f4d6		       85 04		      STA	NUSIZ0
   1399  f4d8
   1400  f4d8		       ad b5 fa 	      LDA	Multiplexer,1	;This is where you control number of critters on screen //////////////////////////////////
   1401  f4db		       85 ec		      sta	Multi_Temp
   1402  f4dd
   1403  f4dd
   1404  f4dd
   1405  f4dd		       a5 95		      LDA	Overeyes
   1406  f4df		       c9 3c		      CMP	#Min_Eye_Quake	;fixed
   1407  f4e1		       90 0a		      BCC	NOQUAKE
   1408  f4e3		       a5 81		      LDA	ROLLING_COUNTER
   1409  f4e5		       29 07		      AND	#%00000111
   1410  f4e7		       f0 04		      BEQ	NOQUAKE
   1411  f4e9		       85 02		      STA	WSYNC
   1412  f4eb
   1413  f4eb
   1414  f4eb
   1415  f4eb
   1416  f4eb		       85 02		      STA	WSYNC
   1417  f4ed
   1418  f4ed				   NOQUAKE
   1419  f4ed
   1420  f4ed		       18		      clc
   1421  f4ee		       a5 be		      lda	Offset
   1422  f4f0		       e9 0f		      sbc	#15
   1423  f4f2				   SHIFTING2
   1424  f4f2		       e9 01		      sbc	#1
   1425  f4f4		       90 05		      bcc	NOQUAKE4
   1426  f4f6		       85 02		      STA	WSYNC
   1427  f4f8		       4c f2 f4 	      JMP	SHIFTING2
   1428  f4fb				   NOQUAKE4
   1429  f4fb
   1430  f4fb
   1431  f4fb		       c4 c7		      cpy	Hero_Sword_Pos	;3
   1432  f4fd
   1433  f4fd		       85 02		      STA	WSYNC
   1434  f4ff
   1435  f4ff
   1436  f4ff
   1437  f4ff				   New_E2_Start
   1438  f4ff							;----------THE NEW START OF E2-----+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--------------------
   1439  f4ff		       86 1c		      stx	GRP1	;3
   1440  f501		       85 07		      sta	COLUP1
   1441  f503
   1442  f503
   1443  f503							;sword php style
   1444  f503		       08		      php		;3
   1445  f504
   1446  f504
   1447  f504		       a2 1e		      ldx	#ENAM0+1	;2
   1448  f506		       9a		      txs		;2 Set the top of the stack to ENAM1+1
   1449  f507							;sword php style 
   1450  f507							;skipDraw
   1451  f507
   1452  f507
   1453  f507							;--------------need to setup skyline--------------------------------------------------
   1454  f507
   1455  f507
   1456  f507
   1457  f507		       a6 eb		      ldx	PF_TEMP
   1458  f509
   1459  f509		       b5 b7		      lda	Pit0_XPos,x
   1460  f50b		       85 bf		      sta	TempPit_XPos
   1461  f50d		       f0 19		      beq	NOPITTHISLEVEL
   1462  f50f		       4c 28 f5 	      jmp	NOPITTHISLEVEL	;This may need to be removed to fix pit problems
   1463  f512		       18		      clc		;this is needed beacause of the subtract, and the sword compare
   1464  f513		       bd 97 ff 	      lda	Enemy_Row_Data,x
   1465  f516		       e9 0e		      sbc	#14	;was 14
   1466  f518		       85 f0		      sta	Row_1
   1467  f51a
   1468  f51a		       bd 98 ff 	      lda	Enemy_Row_Data+1,x
   1469  f51d		       e9 56		      sbc	#86	;was 100,86
   1470  f51f		       85 f2		      sta	Row_3
   1471  f521		       69 08		      adc	#8	;was 8,8
   1472  f523		       85 f1		      sta	Row_2
   1473  f525		       4c 3b f5 	      JMP	YESPIT
   1474  f528
   1475  f528				   NOPITTHISLEVEL
   1476  f528		       18		      clc		;this is needed beacause of the subtract, and the sword compare
   1477  f529		       bd 97 ff 	      lda	Enemy_Row_Data,x
   1478  f52c		       e9 0e		      sbc	#14	;was 15,14
   1479  f52e		       85 f0		      sta	Row_1
   1480  f530
   1481  f530		       bd 98 ff 	      lda	Enemy_Row_Data+1,x
   1482  f533		       e9 01		      sbc	#1	; was 1 
   1483  f535		       85 f2		      sta	Row_3
   1484  f537		       a9 01		      lda	#1	;was 5
   1485  f539		       85 f1		      sta	Row_2
   1486  f53b
   1487  f53b
   1488  f53b				   YESPIT
   1489  f53b							;--------------need to setup skyline--------------------
   1490  f53b
   1491  f53b
   1492  f53b							;skipDraw
   1493  f53b							; draw Hero sprite:
   1494  f53b		       a9 0b		      lda	#C_P1_HEIGHT-1	; 2 
   1495  f53d		       c7 c4		      dcp	Hero_Y	; 5 (DEC and CMP)																																		 
   1496  f53f		       b0 03		      bcs	.doDrawHero_E1_ebr	; 2/3 ; should be bcs
   1497  f541		       a2 00		      ldx	#0	; 2
   1498  f543		       2c		      .byte.b	$2c	;-1 (BIT ABS to skip next 2 bytes)(kinda like a jump)
   1499  f544				   .doDrawHero_E1_ebr
   1500  f544		       b3 c5		      lax	(Hero_Ptr),y	; 5
   1501  f546							;This allows us to do the calculation early, but must move dey to before routine
   1502  f546
   1503  f546		       b1 c8		      lda	(HeroGraphicsColorPtr),y	; 5
   1504  f548
   1505  f548
   1506  f548
   1507  f548				   new_E1_line1 		;   STA WSYNC						
   1508  f548							;----------added section----------------------------------------
   1509  f548
   1510  f548
   1511  f548							;----------added section----------------------------------------
   1512  f548		       86 1c		      stx	GRP1	;3
   1513  f54a		       85 07		      sta	COLUP1
   1514  f54c		       88		      DEY		;2 count down number of scan lines	     2 cycles
   1515  f54d
   1516  f54d
   1517  f54d
   1518  f54d							;sword php style
   1519  f54d		       c4 c7		      cpy	Hero_Sword_Pos	;3
   1520  f54f		       08		      php		;3
   1521  f550		       a2 1e		      ldx	#ENAM0+1	;2
   1522  f552		       9a		      txs		;2 Set the top of the stack to ENAM1+1
   1523  f553							;sword php style 
   1524  f553							;skipDraw
   1525  f553
   1526  f553
   1527  f553							;--------------need to setup all enemy variables--------------------------------------------------
   1528  f553
   1529  f553		       a6 eb		      ldx	PF_TEMP
   1530  f555
   1531  f555		       b5 a1		      lda	E0_XPos,x
   1532  f557		       85 a8		      sta	Temp_XPos
   1533  f559
   1534  f559
   1535  f559		       b5 96		      lda	EnemyGraphicsColorPtr_E0,x
   1536  f55b		       85 9d		      sta	TempGraphicsColor
   1537  f55d
   1538  f55d
   1539  f55d
   1540  f55d
   1541  f55d
   1542  f55d							;--------------need to setup all enemy variables--------------------
   1543  f55d
   1544  f55d
   1545  f55d							;skipDraw
   1546  f55d							; draw Hero sprite:
   1547  f55d		       a9 0b		      lda	#C_P1_HEIGHT-1	; 2 
   1548  f55f		       c7 c4		      dcp	Hero_Y	; 5 (DEC and CMP)																																		 
   1549  f561		       b0 03		      bcs	.doDrawHero_E1_ebrt	; 2/3 ; should be bcs
   1550  f563		       a2 00		      ldx	#0	; 2
   1551  f565		       2c		      .byte.b	$2c	;-1 (BIT ABS to skip next 2 bytes)(kinda like a jump)
   1552  f566				   .doDrawHero_E1_ebrt
   1553  f566		       b3 c5		      lax	(Hero_Ptr),y	; 5
   1554  f568							;This allows us to do the calculation early, but must move dey to before routine
   1555  f568		       b1 c8		      lda	(HeroGraphicsColorPtr),y	; 5
   1556  f56a
   1557  f56a
   1558  f56a
   1559  f56a		       88		      DEY		;2 count down number of scan lines	     2 cycles
   1560  f56b
   1561  f56b
   1562  f56b							;You have about 16 cycles here.
   1563  f56b							;	sta PF_TEMP
   1564  f56b
   1565  f56b
   1566  f56b		       85 02	   new_E1_line2 STA	WSYNC	;not enough time				
   1567  f56d							;----------added section----------------------------------------
   1568  f56d
   1569  f56d
   1570  f56d							;----------added section----------------------------------------
   1571  f56d		       86 1c		      stx	GRP1	;3
   1572  f56f		       85 07		      sta	COLUP1
   1573  f571
   1574  f571
   1575  f571
   1576  f571							;sword php style
   1577  f571		       c4 c7		      cpy	Hero_Sword_Pos	;3
   1578  f573		       08		      php		;3
   1579  f574
   1580  f574
   1581  f574
   1582  f574		       a2 1e		      ldx	#ENAM0+1	;2
   1583  f576		       9a		      txs		;2 Set the top of the stack to ENAM1+1
   1584  f577							;sword php style 
   1585  f577							;skipDraw
   1586  f577
   1587  f577
   1588  f577							;--------------need to setup all enemy variables--------------------------------------------------
   1589  f577
   1590  f577		       a6 eb		      ldx	PF_TEMP
   1591  f579
   1592  f579
   1593  f579		       b5 83		      lda	#E0_Ptr,x
   1594  f57b		       85 92		      sta	Temp_Ptr
   1595  f57d
   1596  f57d		       b5 8b		      lda	#E0_Ptr2,x
   1597  f57f		       85 93		      sta	Temp_Ptr+1
   1598  f581
   1599  f581
   1600  f581							;--------------need to setup all enemy variables--------------------
   1601  f581
   1602  f581							;	ldx #0 ;why is this here; oh, it stops the weird sliding line
   1603  f581							;	stx GRP0
   1604  f581
   1605  f581
   1606  f581
   1607  f581
   1608  f581							;skipDraw
   1609  f581							; draw Hero sprite:
   1610  f581		       a9 0b		      lda	#C_P1_HEIGHT-1	; 2 
   1611  f583		       c7 c4		      dcp	Hero_Y	; 5 (DEC and CMP)																																		 
   1612  f585		       b0 03		      bcs	.doDrawHero_E1_ebrt3	; 2/3 ; should be bcs
   1613  f587		       a2 00		      ldx	#0	; 2
   1614  f589		       2c		      .byte.b	$2c	;-1 (BIT ABS to skip next 2 bytes)(kinda like a jump)
   1615  f58a				   .doDrawHero_E1_ebrt3
   1616  f58a		       b3 c5		      lax	(Hero_Ptr),y	; 5
   1617  f58c							;This allows us to do the calculation early, but must move dey to before routine
   1618  f58c
   1619  f58c
   1620  f58c		       b1 c8		      lda	(HeroGraphicsColorPtr),y	; 5
   1621  f58e
   1622  f58e
   1623  f58e
   1624  f58e
   1625  f58e		       88		      DEY
   1626  f58f
   1627  f58f
   1628  f58f		       c4 c7		      cpy	Hero_Sword_Pos	;3
   1629  f591
   1630  f591
   1631  f591
   1632  f591
   1633  f591							;//This section was moved, so I have time later to fix the sliding line in the boss
   1634  f591
   1635  f591		       86 1c		      stx	GRP1	;3
   1636  f593
   1637  f593							;sword php style
   1638  f593		       08		      php		;3
   1639  f594		       a2 1e		      ldx	#ENAM0+1	;2
   1640  f596		       9a		      txs		;2 Set the top of the stack to ENAM1+1
   1641  f597							;sword php style 
   1642  f597							;skipDraw
   1643  f597
   1644  f597
   1645  f597
   1646  f597		       85 02	   new_E1_line3 STA	WSYNC
   1647  f599							;----------added section----------------------------------------
   1648  f599
   1649  f599
   1650  f599							;------------------------------------------------------------
   1651  f599		       85 07		      sta	COLUP1	;3
   1652  f59b
   1653  f59b
   1654  f59b							;---removed enemy display character
   1655  f59b
   1656  f59b
   1657  f59b							;skipDraw
   1658  f59b							; draw Hero sprite:
   1659  f59b		       a9 0b		      lda	#C_P1_HEIGHT-1	; 2 
   1660  f59d		       c7 c4		      dcp	Hero_Y	; 5 (DEC)																																		 
   1661  f59f		       b0 03		      bcs	.doDrawHero_E0_eb21ZZ	; 2/3 ; should be bcs
   1662  f5a1		       a9 00		      lda	#0	; 2
   1663  f5a3		       2c		      .byte.b	$2c	;-1 (BIT ABS to skip next 2 bytes)(kinda like a jump)
   1664  f5a4				   .doDrawHero_E0_eb21ZZ
   1665  f5a4		       b1 c5		      lda	(Hero_Ptr),y	; 5
   1666  f5a6							;This allows us to do the calculation early, but must move dey to before routine
   1667  f5a6		       85 d0		      sta	Graphics_Buffer_2
   1668  f5a8		       b3 c8		      lax	(HeroGraphicsColorPtr),y	; 5
   1669  f5aa
   1670  f5aa		       88		      dey
   1671  f5ab
   1672  f5ab							;skipDraw
   1673  f5ab							; draw Hero sprite:
   1674  f5ab		       a9 0b		      lda	#C_P1_HEIGHT-1	; 2 
   1675  f5ad		       c7 c4		      dcp	Hero_Y	; 5 (DEC)																																		 
   1676  f5af		       b0 03		      bcs	.doDrawHero_E0_eb22ZZ	; 2/3 ; should be bcs
   1677  f5b1		       a9 00		      lda	#0	; 2
   1678  f5b3		       2c		      .byte.b	$2c	;-1 (BIT ABS to skip next 2 bytes)(kinda like a jump)
   1679  f5b4				   .doDrawHero_E0_eb22ZZ
   1680  f5b4		       b1 c5		      lda	(Hero_Ptr),y	; 5
   1681  f5b6							;This allows us to do the calculation early, but must move dey to before routine
   1682  f5b6		       85 cf		      sta	Graphics_Buffer
   1683  f5b8
   1684  f5b8
   1685  f5b8
   1686  f5b8
   1687  f5b8		       c4 c7		      cpy	Hero_Sword_Pos	;3
   1688  f5ba
   1689  f5ba		       86 07		      stx	COLUP1
   1690  f5bc		       08		      php		;2
   1691  f5bd		       88		      DEY
   1692  f5be							;Need to jump to Endline2 if in the middle of linked monster
   1693  f5be
   1694  f5be		       a5 ce		      lda	Link
   1695  f5c0		       f0 0f		      BEQ	NotBoss
   1696  f5c2		       c0 55		      CPY	#Enemy_Row_E4
   1697  f5c4		       b0 0b		      BCS	NotBoss
   1698  f5c6
   1699  f5c6		       a5 d0		      lda	Graphics_Buffer_2
   1700  f5c8		       85 02		      STA	WSYNC
   1701  f5ca
   1702  f5ca		       85 1c		      sta	GRP1
   1703  f5cc
   1704  f5cc
   1705  f5cc
   1706  f5cc
   1707  f5cc		       85 02		      STA	WSYNC
   1708  f5ce
   1709  f5ce		       4c ea f5 	      JMP	AfterEndLine2
   1710  f5d1
   1711  f5d1		       a5 d0	   NotBoss    lda	Graphics_Buffer_2
   1712  f5d3
   1713  f5d3		       85 02	   EndLine1   STA	WSYNC
   1714  f5d5							;------------------------------------------------+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   1715  f5d5				   .600       SUBROUTINE
   1716  f5d5							;This is not a loop, this is a one time set position for the eneamy
   1717  f5d5		       18		      clc
   1718  f5d6		       85 1c		      sta	GRP1
   1719  f5d8
   1720  f5d8		       a5 a8		      lda	Temp_XPos	;3
   1721  f5da				   .Div15_E2_a
   1722  f5da		       e9 0f		      sbc	#15	; 2	     
   1723  f5dc		       b0 fc		      bcs	.Div15_E2_a	; 3(2)
   1724  f5de
   1725  f5de		       aa		      tax
   1726  f5df		       bd 0f f9 	      lda	fineAdjustTable,x	; 13 -> Consume 5 cycles by guaranteeing we cross a page boundary
   1727  f5e2		       85 20		      sta	HMP0
   1728  f5e4		       85 10		      sta	RESP0
   1729  f5e6
   1730  f5e6
   1731  f5e6							;sword php style	
   1732  f5e6		       85 02	   EndLine2   STA	WSYNC	;3 cycles =
   1733  f5e8		       85 2a		      STA	HMOVE
   1734  f5ea				   AfterEndLine2
   1735  f5ea
   1736  f5ea							;---------------------------------------------
   1737  f5ea
   1738  f5ea							;This is not a loop, this is a one time set position for the eneamy E2
   1739  f5ea
   1740  f5ea		       68		      pla		;this is to reset sword
   1741  f5eb							;sword php style
   1742  f5eb		       c4 c7		      cpy	Hero_Sword_Pos	;3
   1743  f5ed		       08		      php		;3
   1744  f5ee
   1745  f5ee		       a6 cf		      ldx	Graphics_Buffer	;3
   1746  f5f0		       86 1c		      stx	GRP1	;3
   1747  f5f2
   1748  f5f2
   1749  f5f2
   1750  f5f2		       b1 c8		      lda	(HeroGraphicsColorPtr),y	; 5
   1751  f5f4		       85 07		      sta	COLUP1
   1752  f5f6
   1753  f5f6
   1754  f5f6
   1755  f5f6
   1756  f5f6
   1757  f5f6		       68		      pla		;4 Set the top of the stack to ENAM1+1
   1758  f5f7
   1759  f5f7							;sword php style 
   1760  f5f7							;skipDraw
   1761  f5f7
   1762  f5f7		       a6 eb		      ldx	PF_TEMP
   1763  f5f9				   PITCOLLISION
   1764  f5f9							;---------collision
   1765  f5f9		       24 07		      BIT	CXPPMM	;3 cycles
   1766  f5fb		       10 06		      BPL	No_Hit_the_Pit	;2 cycles
   1767  f5fd		       a5 ec		      LDA	Multi_Temp
   1768  f5ff		       05 f9		      ORA	New_Hit	;4 cycles
   1769  f601		       85 f9		      STA	New_Hit	;4 cycles
   1770  f603				   No_Hit_the_Pit
   1771  f603
   1772  f603							;---------collision
   1773  f603
   1774  f603
   1775  f603
   1776  f603
   1777  f603							;skipDraw
   1778  f603							; draw Hero sprite:
   1779  f603		       a9 0b		      lda	#C_P1_HEIGHT-1	; 2 
   1780  f605		       c7 c4		      dcp	Hero_Y	; 5 (DEC and CMP)																																		 
   1781  f607		       b0 03		      bcs	.doDrawHero_E2_e	; 2/3 ; should be bcs
   1782  f609		       a2 00		      ldx	#0	; 2
   1783  f60b		       2c		      .byte.b	$2c	;-1 (BIT ABS to skip next 2 bytes)(kinda like a jump)
   1784  f60c				   .doDrawHero_E2_e
   1785  f60c		       b3 c5		      lax	(Hero_Ptr),y	; 5
   1786  f60e							;This allows us to do the calculation early, but must move dey to before routine
   1787  f60e
   1788  f60e
   1789  f60e		       24 03		      BIT	CXP1FB
   1790  f610		       10 04		      BPL	NOHITTING
   1791  f612		       a9 01		      LDA	#1
   1792  f614		       85 cd		      STA	Grapple
   1793  f616				   NOHITTING
   1794  f616		       b1 c8		      lda	(HeroGraphicsColorPtr),y	; 5
   1795  f618							;	  DEY		  ;2 count down number of scan lines	      2 cycles
   1796  f618
   1797  f618
   1798  f618
   1799  f618
   1800  f618		       e6 eb		      inc	PF_TEMP
   1801  f61a
   1802  f61a
   1803  f61a
   1804  f61a		       85 2c		      STA	CXCLR	;3
   1805  f61c
   1806  f61c				   EndLine3		;   STA WSYNC						      ;3 cycles =
   1807  f61c							;------------------------------------------------------------
   1808  f61c
   1809  f61c
   1810  f61c				   Draw_Enemy_E2
   1811  f61c				   .608
   1812  f61c							;-----------------------this needs to run for 8 lines, the size of an enemy
   1813  f61c							;sword php style
   1814  f61c
   1815  f61c		       85 07		      sta	COLUP1
   1816  f61e
   1817  f61e		       b1 9d		      lda	(TempGraphicsColor),y	; This is for monster because color is not delayed
   1818  f620		       85 06		      sta	COLUP0	;3 Needs to be as late in the line as possible
   1819  f622
   1820  f622
   1821  f622		       88		      DEY
   1822  f623
   1823  f623
   1824  f623		       c4 c7		      cpy	Hero_Sword_Pos	;3
   1825  f625		       08		      php
   1826  f626							;skipDraw
   1827  f626
   1828  f626
   1829  f626		       86 1c		      stx	GRP1	;3
   1830  f628
   1831  f628
   1832  f628		       b1 92		      lda	(Temp_Ptr),y	; 5
   1833  f62a		       85 1b		      sta	GRP0	;3
   1834  f62c
   1835  f62c
   1836  f62c
   1837  f62c		       68		      pla		;3
   1838  f62d							;sword php style 
   1839  f62d
   1840  f62d
   1841  f62d							;skipDraw
   1842  f62d							; draw Hero sprite:
   1843  f62d		       a9 0b		      lda	#C_P1_HEIGHT-1
   1844  f62f		       c7 c4		      dcp	Hero_Y
   1845  f631		       b0 03		      bcs	.doDrawHero_E2_eb8
   1846  f633		       a2 00		      ldx	#0
   1847  f635		       2c		      .byte.b	$2c
   1848  f636				   .doDrawHero_E2_eb8
   1849  f636		       b3 c5		      lax	(Hero_Ptr),y
   1850  f638
   1851  f638		       b1 c8		      lda	(HeroGraphicsColorPtr),y
   1852  f63a
   1853  f63a		       c4 f0		      cpy	Row_1
   1854  f63c		       90 05		      bcc	EndLine4
   1855  f63e
   1856  f63e
   1857  f63e
   1858  f63e		       85 02		      STA	WSYNC
   1859  f640		       4c 1c f6 	      JMP	Draw_Enemy_E2
   1860  f643				   EndLine4
   1861  f643
   1862  f643							;this is where the arm color is being messed up
   1863  f643		       85 02	   EndLin4b   STA	WSYNC
   1864  f645							;-----------------------this needs to run for 8 lines, the size of an enemy
   1865  f645		       85 07		      sta	COLUP1	;3
   1866  f647
   1867  f647							;---------------------line for setting up pits-----------------------------------------
   1868  f647							;sword php style
   1869  f647		       86 1c		      stx	GRP1	;3
   1870  f649		       88		      DEY
   1871  f64a
   1872  f64a		       c4 c7		      cpy	Hero_Sword_Pos	;3
   1873  f64c		       08		      php		;3
   1874  f64d		       68		      pla
   1875  f64e							;sword php style 
   1876  f64e
   1877  f64e
   1878  f64e
   1879  f64e							;---removed enemy display character
   1880  f64e
   1881  f64e				   collisionplayermissle
   1882  f64e
   1883  f64e							;--------New Collision Detection Style
   1884  f64e		       24 01		      BIT	CXM1P	;3 cycles
   1885  f650		       10 09		      BPL	No_Hit_the_Baddie	;2 cycles
   1886  f652		       a5 ec		      LDA	Multi_Temp	; 3 cycles
   1887  f654		       05 f8		      ORA	Other_Hit	;4 cycles
   1888  f656		       85 f8		      STA	Other_Hit	;4 cycles
   1889  f658		       4c 6b f6 	      JMP	Hit_Baddie
   1890  f65b				   No_Hit_the_Baddie
   1891  f65b		       a5 cd		      lda	Grapple
   1892  f65d		       f0 02		      beq	NotHitPf
   1893  f65f		       85 fa		      STA	Player_Hit
   1894  f661
   1895  f661				   NotHitPf
   1896  f661		       24 07		      BIT	CXPPMM	;3 cycles
   1897  f663		       10 06		      BPL	Hit_Baddie	;2 cycles
   1898  f665		       a5 ec		      LDA	Multi_Temp	; 3 cycles
   1899  f667							;	ORA Player_Hit ;4 cycles`
   1900  f667		       85 fa		      STA	Player_Hit	;4 cycles
   1901  f669
   1902  f669		       ea		      .NOP
   1903  f66a		       ea		      .NOP
   1904  f66b				   NOCOLLISIONPF2
   1905  f66b
   1906  f66b				   Hit_Baddie
   1907  f66b							;--------New Collision Detection Style
   1908  f66b
   1909  f66b
   1910  f66b
   1911  f66b							;skipDraw
   1912  f66b							; draw Hero sprite:
   1913  f66b		       a9 0b		      lda	#C_P1_HEIGHT-1	; 2 
   1914  f66d		       c7 c4		      dcp	Hero_Y	; 5 (DEC and CMP)																																		 
   1915  f66f		       b0 03		      bcs	.doDrawHero_E0_eb21az	; 2/3 ; should be bcs
   1916  f671		       a2 00		      ldx	#0	; 2
   1917  f673		       2c		      .byte.b	$2c	;-1 (BIT ABS to skip next 2 bytes)(kinda like a jump)
   1918  f674				   .doDrawHero_E0_eb21az
   1919  f674		       b3 c5		      lax	(Hero_Ptr),y	; 5
   1920  f676
   1921  f676
   1922  f676
   1923  f676		       a5 bf		      lda	TempPit_XPos
   1924  f678		       f0 02		      BEQ	MidLine5a	;this sets up the boss mid section
   1925  f67a		       a9 0f		      lda	#$0F	;2 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   1926  f67c
   1927  f67c				   MidLine5a
   1928  f67c		       85 1b		      sta	GRP0	;3
   1929  f67e
   1930  f67e
   1931  f67e		       b1 c8		      lda	(HeroGraphicsColorPtr),y	; 5
   1932  f680
   1933  f680
   1934  f680		       88		      dey
   1935  f681		       c4 c7		      cpy	Hero_Sword_Pos	;3
   1936  f683		       85 07		      sta	COLUP1	;3
   1937  f685
   1938  f685							;.nop
   1939  f685
   1940  f685				   EndLine5		;sta WSYNC
   1941  f685
   1942  f685							;---------------------line for setting up pits-----------------------------------------
   1943  f685							;sword php style
   1944  f685
   1945  f685		       08		      php
   1946  f686		       86 1c		      stx	GRP1	;3
   1947  f688
   1948  f688							;	lda	Pit_Color
   1949  f688							;	sta	COLUP0
   1950  f688
   1951  f688		       68		      pla
   1952  f689
   1953  f689
   1954  f689							;skipDraw
   1955  f689
   1956  f689							;---removed enemy display character
   1957  f689
   1958  f689
   1959  f689							;skipDraw
   1960  f689							; draw Hero sprite:
   1961  f689		       a9 0b		      lda	#C_P1_HEIGHT-1	; 2 
   1962  f68b		       c7 c4		      dcp	Hero_Y	; 5 (DEC and CMP)																																		 
   1963  f68d		       b0 03		      bcs	.doDrawHero_E0_eb21a	; 2/3 ; should be bcs
   1964  f68f		       a9 00		      lda	#0	; 3
   1965  f691		       2c		      .byte.b	$2c	;-1 (BIT ABS to skip next 2 bytes)(kinda like a jump)
   1966  f692				   .doDrawHero_E0_eb21a
   1967  f692		       b1 c5		      lda	(Hero_Ptr),y	; 5
   1968  f694		       85 d0		      sta	Graphics_Buffer_2
   1969  f696		       b3 c8		      lax	(HeroGraphicsColorPtr),y	; 5
   1970  f698
   1971  f698		       88		      dey
   1972  f699
   1973  f699
   1974  f699				   midline6
   1975  f699
   1976  f699
   1977  f699							;skipDraw
   1978  f699							; draw Hero sprite:
   1979  f699		       a9 0b		      lda	#C_P1_HEIGHT-1	; 2 
   1980  f69b		       c7 c4		      dcp	Hero_Y	; 5 (DEC and CMP)																																		 
   1981  f69d		       b0 03		      bcs	.doDrawHero_E0_eb22a	; 2/3 ; should be bcs
   1982  f69f		       a9 00		      lda	#0	; 2
   1983  f6a1		       2c		      .byte.b	$2c	;-1 (BIT ABS to skip next 2 bytes)(kinda like a jump)
   1984  f6a2				   .doDrawHero_E0_eb22a
   1985  f6a2		       b1 c5		      lda	(Hero_Ptr),y	; 5
   1986  f6a4		       85 cf		      sta	Graphics_Buffer
   1987  f6a6
   1988  f6a6
   1989  f6a6		       a5 d0		      lda	Graphics_Buffer_2
   1990  f6a8
   1991  f6a8
   1992  f6a8
   1993  f6a8
   1994  f6a8
   1995  f6a8
   1996  f6a8		       c4 c7		      cpy	Hero_Sword_Pos	;3	     
   1997  f6aa		       08		      php		;2
   1998  f6ab		       86 07		      stx	COLUP1
   1999  f6ad		       85 02	   Endline6   sta	WSYNC
   2000  f6af
   2001  f6af
   2002  f6af
   2003  f6af				   pitposition
   2004  f6af		       85 1c		      sta	GRP1
   2005  f6b1
   2006  f6b1
   2007  f6b1
   2008  f6b1		       a5 9f		      lda	MidSectionColorPtr
   2009  f6b3		       85 06		      sta	COLUP0
   2010  f6b5
   2011  f6b5
   2012  f6b5
   2013  f6b5
   2014  f6b5				   NOCOLLISIONPF
   2015  f6b5		       a9 00		      lda	#0
   2016  f6b7		       85 20		      sta	HMP0
   2017  f6b9
   2018  f6b9
   2019  f6b9							;sword php style	
   2020  f6b9		       85 02	   EndLine7   STA	WSYNC	;3 cycles =
   2021  f6bb
   2022  f6bb
   2023  f6bb		       b1 c8		      lda	(HeroGraphicsColorPtr),y	; 5 
   2024  f6bd		       85 07		      sta	COLUP1
   2025  f6bf
   2026  f6bf		       a5 cf		      lda	Graphics_Buffer	;3
   2027  f6c1		       85 1c		      sta	GRP1	;3
   2028  f6c3
   2029  f6c3		       68		      pla
   2030  f6c4							;-----------------------------------------------post turning on pit stuff
   2031  f6c4							;This is not a loop, this is a one time set position for the eneamy E2
   2032  f6c4
   2033  f6c4							;sword php style
   2034  f6c4
   2035  f6c4		       88		      DEY
   2036  f6c5
   2037  f6c5		       c4 c7		      cpy	Hero_Sword_Pos	;3
   2038  f6c7		       08		      php
   2039  f6c8
   2040  f6c8							;3
   2041  f6c8		       a2 1e		      ldx	#ENAM0+1	;2
   2042  f6ca		       9a		      txs		;2 Set the top of the stack to ENAM1+1
   2043  f6cb							;sword php style 
   2044  f6cb							;skipDraw
   2045  f6cb
   2046  f6cb
   2047  f6cb
   2048  f6cb							;skipDraw
   2049  f6cb							; draw Hero sprite:
   2050  f6cb		       a9 0b		      lda	#C_P1_HEIGHT-1	; 2 
   2051  f6cd		       c7 c4		      dcp	Hero_Y	; 5 (DEC and CMP)																																		 
   2052  f6cf		       b0 03		      bcs	.doDrawHero_E2_en	; 2/3 ; should be bcs
   2053  f6d1		       a2 00		      ldx	#0	; 2
   2054  f6d3		       2c		      .byte.b	$2c	;-1 (BIT ABS to skip next 2 bytes)(kinda like a jump)
   2055  f6d4				   .doDrawHero_E2_en
   2056  f6d4		       b3 c5		      lax	(Hero_Ptr),y	; 5
   2057  f6d6
   2058  f6d6							;This allows us to do the calculation early, but must move dey to before routine
   2059  f6d6
   2060  f6d6		       b1 c8		      lda	(HeroGraphicsColorPtr),y	; 5
   2061  f6d8
   2062  f6d8
   2063  f6d8		       88		      DEY		;2 count down number of scan lines	     2 cycles
   2064  f6d9
   2065  f6d9		       85 2c		      STA	CXCLR	;3
   2066  f6db
   2067  f6db
   2068  f6db		       85 02	   EndLine8   STA	WSYNC	;3 cycles =
   2069  f6dd							;------------------------------------------------------------
   2070  f6dd		       85 2a		      STA	HMOVE
   2071  f6df
   2072  f6df							;---------------------line for setting up pits-----------------------------------------
   2073  f6df
   2074  f6df
   2075  f6df
   2076  f6df
   2077  f6df
   2078  f6df				   ScanLoop_E2_c
   2079  f6df		       86 1c		      stx	GRP1	;3
   2080  f6e1		       85 07		      sta	COLUP1
   2081  f6e3
   2082  f6e3
   2083  f6e3							;sword php style
   2084  f6e3		       c4 c7		      cpy	Hero_Sword_Pos	;3
   2085  f6e5		       08		      php		;3
   2086  f6e6
   2087  f6e6							;--- need to put pits here----------------------------------------------------------------------------------------------------------------<<<<<<
   2088  f6e6							;you have about 24 cycles--------------------------
   2089  f6e6		       c4 f1		      CPY	Row_2	;3
   2090  f6e8		       b0 08		      BCS	NO_PIT
   2091  f6ea		       a5 bf		      LDA	TempPit_XPos
   2092  f6ec		       85 1b		      STA	GRP0
   2093  f6ee		       b1 9f		      lda	(MidSectionColorPtr),y
   2094  f6f0							;	lda MidSectionColorPtr ;What the heck now it's jumpy
   2095  f6f0		       85 06		      sta	COLUP0
   2096  f6f2
   2097  f6f2				   NO_PIT
   2098  f6f2
   2099  f6f2							;--- need to put pits here----------------------------------------------------------------------------------------------------------------<<<<<<
   2100  f6f2
   2101  f6f2
   2102  f6f2
   2103  f6f2		       a2 1e		      ldx	#ENAM0+1	;2
   2104  f6f4		       9a		      txs		;2 Set the top of the stack to ENAM1+1
   2105  f6f5							;sword php style 
   2106  f6f5							;skipDraw
   2107  f6f5
   2108  f6f5
   2109  f6f5
   2110  f6f5							;skipDraw
   2111  f6f5							; draw Hero sprite:
   2112  f6f5		       a9 0b		      lda	#C_P1_HEIGHT-1	; 2 
   2113  f6f7		       c7 c4		      dcp	Hero_Y	; 5 (DEC and CMP)																																		 
   2114  f6f9		       b0 03		      bcs	.doDrawHero_E2_eb	; 2/3 ; should be bcs
   2115  f6fb		       a2 00		      ldx	#0	; 2
   2116  f6fd		       2c		      .byte.b	$2c	;-1 (BIT ABS to skip next 2 bytes)(kinda like a jump)
   2117  f6fe				   .doDrawHero_E2_eb
   2118  f6fe		       b3 c5		      lax	(Hero_Ptr),y	; 5
   2119  f700							;This allows us to do the calculation early, but must move dey to before routine
   2120  f700
   2121  f700		       b1 c8		      lda	(HeroGraphicsColorPtr),y	; 5
   2122  f702
   2123  f702
   2124  f702
   2125  f702		       88		      DEY		;2 count down number of scan lines	     2 cycles
   2126  f703
   2127  f703
   2128  f703
   2129  f703
   2130  f703
   2131  f703		       c4 f2		      CPY	Row_3	;3
   2132  f705
   2133  f705		       85 02	   EndLine9   STA	WSYNC	;3 cycles =
   2134  f707
   2135  f707		       b0 d6		      BCS	ScanLoop_E2_c	;2 cycles =
   2136  f709				   EndScanLoop_E2_c
   2137  f709							;------------------------------------------------------------
   2138  f709							;------------------------------------------------------------
   2139  f709		       86 1c		      stx	GRP1	;3
   2140  f70b		       85 07		      sta	COLUP1	;3
   2141  f70d
   2142  f70d
   2143  f70d							;sword php style
   2144  f70d		       c4 c7		      cpy	Hero_Sword_Pos	;3
   2145  f70f		       08		      php		;3
   2146  f710		       a2 1e		      ldx	#ENAM0+1	;2
   2147  f712		       9a		      txs		;2 Set the top of the stack to ENAM1+1
   2148  f713							;sword php style 
   2149  f713							;skipDraw
   2150  f713
   2151  f713
   2152  f713							;skipDraw
   2153  f713							; draw Hero sprite:
   2154  f713		       a9 0b		      lda	#C_P1_HEIGHT-1	; 2 
   2155  f715		       c7 c4		      dcp	Hero_Y	; 5 (DEC and CMP)																																		 
   2156  f717		       b0 03		      bcs	.doDrawHero_E1_eb21	; 2/3 ; should be bcs
   2157  f719		       a2 00		      ldx	#0	; 2
   2158  f71b		       2c		      .byte.b	$2c	;-1 (BIT ABS to skip next 2 bytes)(kinda like a jump)
   2159  f71c				   .doDrawHero_E1_eb21
   2160  f71c		       b3 c5		      lax	(Hero_Ptr),y	; 5
   2161  f71e
   2162  f71e							;	lda PF_TEMP
   2163  f71e
   2164  f71e							;	cmp #8 ;this was 8, num of creatures max it's not using this it's using multitemp for bcs endline
   2165  f71e
   2166  f71e		       06 ec		      asl	Multi_Temp
   2167  f720
   2168  f720		       a5 ec		      lda	Multi_Temp
   2169  f722		       c9 80		      cmp	#%10000000	;Set this to number of monsters you want ////////////////////////////////
   2170  f724
   2171  f724		       b1 c8		      lda	(HeroGraphicsColorPtr),y	; 5
   2172  f726
   2173  f726		       88		      DEY
   2174  f727
   2175  f727
   2176  f727
   2177  f727		       b0 07		      bcs	end_Line
   2178  f729		       c4 c7		      cpy	Hero_Sword_Pos	;3
   2179  f72b		       85 02		      sta	WSYNC
   2180  f72d		       4c ff f4 	      jmp	New_E2_Start
   2181  f730				   end_Line
   2182  f730		       85 02	   EndLine10  STA	WSYNC
   2183  f732							;-------------------------Enemy number E-X End---------------------------
   2184  f732							;------------------------------------------------+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   2185  f732				   Enemy_Number_EX_End
   2186  f732
   2187  f732
   2188  f732
   2189  f732
   2190  f732				   Finish_Screen
   2191  f732							;------------------------------------------------------------
   2192  f732				   ScanLoop_E0_cz
   2193  f732		       86 1c		      stx	GRP1	;3
   2194  f734		       85 07		      sta	COLUP1
   2195  f736		       a9 00		      lda	#0
   2196  f738		       85 1b		      sta	GRP0
   2197  f73a
   2198  f73a							;sword php style
   2199  f73a		       c4 c7		      cpy	Hero_Sword_Pos	;3
   2200  f73c		       08		      php		;3
   2201  f73d		       a2 1e		      ldx	#ENAM0+1	;2
   2202  f73f		       9a		      txs		;2 Set the top of the stack to ENAM1+1
   2203  f740							;sword php style 
   2204  f740							;skipDraw
   2205  f740							;	sta ENABL
   2206  f740
   2207  f740							;---removed enemy display character
   2208  f740
   2209  f740
   2210  f740							;skipDraw
   2211  f740							; draw Hero sprite:
   2212  f740		       a9 0b		      lda	#C_P1_HEIGHT-1	; 2 
   2213  f742		       c7 c4		      dcp	Hero_Y	; 5 (DEC and CMP)																																		 
   2214  f744		       b0 03		      bcs	.doDrawHero_E0_ebz	; 2/3 ; should be bcs
   2215  f746		       a2 00		      ldx	#0	; 2
   2216  f748		       2c		      .byte.b	$2c	;-1 (BIT ABS to skip next 2 bytes)(kinda like a jump)
   2217  f749				   .doDrawHero_E0_ebz
   2218  f749		       b3 c5		      lax	(Hero_Ptr),y	; 5
   2219  f74b							;This allows us to do the calculation early, but must move dey to before routine
   2220  f74b		       b1 c8		      lda	(HeroGraphicsColorPtr),y	; 5
   2221  f74d
   2222  f74d
   2223  f74d
   2224  f74d		       88		      DEY		;2 count down number of scan lines	     2 cycles
   2225  f74e
   2226  f74e		       c4 be		      CPY	Offset	;3 was 2
   2227  f750
   2228  f750		       85 02		      STA	WSYNC
   2229  f752							;3 cycles =
   2230  f752		       b0 de		      BCS	ScanLoop_E0_cz	;2 cycles =
   2231  f754				   EndScanLoop_E0_cz
   2232  f754
   2233  f754
   2234  f754		       a9 b0		      LDA	#$B0	;start with a black background
   2235  f756		       85 09		      STA	COLUBK
   2236  f758
   2237  f758
   2238  f758							;php sword stuff
   2239  f758							;  cpy Hero_Sword_Pos	;3
   2240  f758							;  php
   2241  f758							; php sword stuff
   2242  f758
   2243  f758
   2244  f758							;E0_Ptr This and the next 24 bytes can be used for temp Score storage
   2245  f758		       85 02		      STA	WSYNC
   2246  f75a
   2247  f75a
   2248  f75a		       a5 95		      LDA	Overeyes
   2249  f75c		       c9 3c		      CMP	#Min_Eye_Quake
   2250  f75e		       90 06		      BCC	ALWAYSQUAKE
   2251  f760		       a5 81		      LDA	ROLLING_COUNTER
   2252  f762		       29 07		      AND	#%00000111
   2253  f764		       d0 04		      BNE	NOQUAKE2
   2254  f766				   ALWAYSQUAKE
   2255  f766		       85 02		      STA	WSYNC
   2256  f768		       85 02		      STA	WSYNC
   2257  f76a				   NOQUAKE2
   2258  f76a
   2259  f76a
   2260  f76a		       a9 00		      LDA	#0
   2261  f76c		       85 0d		      STA	PF0	;This is part of the playfield monster attack stuff
   2262  f76e		       85 0e		      STA	PF1
   2263  f770		       85 0f		      STA	PF2
   2264  f772
   2265  f772		       a2 0f		      LDX	#$0F
   2266  f774		       a9 68		      LDA	#%01101000
   2267  f776		       85 0a		      STA	CTRLPF
   2268  f778
   2269  f778		       a5 ee		      LDA	Score1
   2270  f77a		       29 0f		      AND	#$0F
   2271  f77c		       0a		      ASL
   2272  f77d		       0a		      ASL
   2273  f77e		       0a		      ASL
   2274  f77f		       a8		      TAY
   2275  f780
   2276  f780		       b9 f0 fe 	      LDA	NUM0,y
   2277  f783		       87 83		      SAX	E0_Ptr
   2278  f785
   2279  f785
   2280  f785		       b9 f1 fe 	      LDA	NUM0+1,y
   2281  f788		       87 84		      SAX	E1_Ptr
   2282  f78a
   2283  f78a
   2284  f78a		       b9 f2 fe 	      LDA	NUM0+2,y
   2285  f78d		       87 85		      SAX	E2_Ptr
   2286  f78f
   2287  f78f
   2288  f78f		       b9 f3 fe 	      LDA	NUM0+3,y
   2289  f792		       87 86		      SAX	E3_Ptr
   2290  f794
   2291  f794
   2292  f794		       b9 f4 fe 	      LDA	NUM0+4,y
   2293  f797		       87 87		      SAX	E4_Ptr
   2294  f799
   2295  f799		       a5 ee		      LDA	Score1
   2296  f79b		       29 f0		      AND	#$F0
   2297  f79d		       4a		      LSR
   2298  f79e
   2299  f79e
   2300  f79e
   2301  f79e				   LINEA
   2302  f79e
   2303  f79e
   2304  f79e		       a5 ee		      LDA	Score1
   2305  f7a0		       29 f0		      AND	#$F0
   2306  f7a2		       4a		      LSR
   2307  f7a3
   2308  f7a3		       a8		      TAY
   2309  f7a4
   2310  f7a4		       b9 f0 fe 	      LDA	NUM0,y
   2311  f7a7		       29 f0		      AND	#$F0
   2312  f7a9		       05 83		      ORA	E0_Ptr
   2313  f7ab		       85 83		      STA	E0_Ptr
   2314  f7ad
   2315  f7ad
   2316  f7ad		       b9 f1 fe 	      LDA	NUM0+1,y
   2317  f7b0		       29 f0		      AND	#$F0
   2318  f7b2		       05 84		      ORA	E1_Ptr
   2319  f7b4		       85 84		      STA	E1_Ptr
   2320  f7b6
   2321  f7b6
   2322  f7b6
   2323  f7b6		       b9 f2 fe 	      LDA	NUM0+2,y
   2324  f7b9		       29 f0		      AND	#$F0
   2325  f7bb		       05 85		      ORA	E2_Ptr
   2326  f7bd		       85 85		      STA	E2_Ptr
   2327  f7bf
   2328  f7bf		       b9 f3 fe 	      LDA	NUM0+3,y
   2329  f7c2		       29 f0		      AND	#$F0
   2330  f7c4		       05 86		      ORA	E3_Ptr
   2331  f7c6		       85 86		      STA	E3_Ptr
   2332  f7c8
   2333  f7c8
   2334  f7c8
   2335  f7c8		       b9 f4 fe 	      LDA	NUM0+4,y
   2336  f7cb		       29 f0		      AND	#$F0
   2337  f7cd		       05 87		      ORA	E4_Ptr
   2338  f7cf		       85 87		      STA	E4_Ptr
   2339  f7d1
   2340  f7d1		       a2 0f		      LDX	#$0F
   2341  f7d3		       a5 ed		      LDA	Score
   2342  f7d5		       29 f0		      AND	#$F0
   2343  f7d7		       4a		      LSR
   2344  f7d8		       69 50		      ADC	#80	;Because this is a reversed PF
   2345  f7da		       a8		      TAY
   2346  f7db
   2347  f7db
   2348  f7db		       b9 f0 fe 	      LDA	NUM0,y
   2349  f7de		       87 88		      SAX	E5_Ptr
   2350  f7e0
   2351  f7e0
   2352  f7e0				   LINEB
   2353  f7e0
   2354  f7e0
   2355  f7e0
   2356  f7e0		       b9 f1 fe 	      LDA	NUM0+1,y
   2357  f7e3		       87 89		      SAX	E6_Ptr
   2358  f7e5
   2359  f7e5
   2360  f7e5		       b9 f2 fe 	      LDA	NUM0+2,y
   2361  f7e8		       87 8a		      SAX	E7_Ptr
   2362  f7ea
   2363  f7ea
   2364  f7ea		       b9 f3 fe 	      LDA	NUM0+3,y
   2365  f7ed		       87 8b		      SAX	E0_Ptr2
   2366  f7ef
   2367  f7ef
   2368  f7ef		       b9 f4 fe 	      LDA	NUM0+4,y
   2369  f7f2		       87 8c		      SAX	E1_Ptr2
   2370  f7f4
   2371  f7f4
   2372  f7f4
   2373  f7f4				   LINEC
   2374  f7f4							;	STA WSYNC  
   2375  f7f4
   2376  f7f4		       a5 ed		      LDA	Score
   2377  f7f6		       29 0f		      AND	#$0F	;Because this is a reversed PF
   2378  f7f8		       0a		      ASL
   2379  f7f9		       0a		      ASL
   2380  f7fa		       0a		      ASL
   2381  f7fb		       69 50		      ADC	#80	;Because this is a reversed PF
   2382  f7fd		       a8		      TAY
   2383  f7fe
   2384  f7fe		       b9 f0 fe 	      LDA	NUM0,y
   2385  f801		       29 f0		      AND	#$F0
   2386  f803		       05 88		      ORA	E5_Ptr
   2387  f805		       85 88		      STA	E5_Ptr
   2388  f807
   2389  f807							;	INY
   2390  f807		       b9 f1 fe 	      LDA	NUM0+1,y
   2391  f80a		       29 f0		      AND	#$F0
   2392  f80c		       05 89		      ORA	E6_Ptr
   2393  f80e		       85 89		      STA	E6_Ptr
   2394  f810
   2395  f810							;	INY
   2396  f810		       b9 f2 fe 	      LDA	NUM0+2,y
   2397  f813		       29 f0		      AND	#$F0
   2398  f815		       05 8a		      ORA	E7_Ptr
   2399  f817		       85 8a		      STA	E7_Ptr
   2400  f819
   2401  f819				   LINED
   2402  f819							;	STA WSYNC  
   2403  f819
   2404  f819
   2405  f819
   2406  f819		       b9 f3 fe 	      LDA	NUM0+3,y
   2407  f81c		       29 f0		      AND	#$F0
   2408  f81e		       05 8b		      ORA	E0_Ptr2
   2409  f820		       85 8b		      STA	E0_Ptr2
   2410  f822
   2411  f822
   2412  f822		       b9 f4 fe 	      LDA	NUM0+4,y
   2413  f825		       29 f0		      AND	#$F0
   2414  f827		       05 8c		      ORA	E1_Ptr2
   2415  f829		       85 8c		      STA	E1_Ptr2
   2416  f82b
   2417  f82b		       a4 ce		      LDY	Link
   2418  f82d		       f0 21		      BEQ	LINEE	;if link zero skip this section
   2419  f82f		       b9 b0 00 	      LDA	#E0_Health,y
   2420  f832		       f0 13		      BEQ	KILLLINKS
   2421  f834		       d9 b1 00 	      CMP	#E1_Health,y
   2422  f837
   2423  f837		       f0 17		      BEQ	LINEE
   2424  f839		       90 06		      BCC	STABILIZE
   2425  f83b
   2426  f83b		       b9 b1 00 	      LDA	#E1_Health,y
   2427  f83e		       99 b0 00 	      STA	#E0_Health,y
   2428  f841				   STABILIZE
   2429  f841
   2430  f841		       99 b1 00 	      STA	#E1_Health,y
   2431  f844
   2432  f844		       4c 50 f8 	      JMP	LINEE
   2433  f847				   KILLLINKS
   2434  f847		       a9 00		      LDA	#0
   2435  f849
   2436  f849		       99 b7 00 	      STA	#Pit0_XPos,y
   2437  f84c
   2438  f84c							;	STA #E1_Health,y
   2439  f84c
   2440  f84c							;	STA #Pit1_XPos,y
   2441  f84c		       85 ce		      STA	Link
   2442  f84e		       85 d1		      STA	Enemy_Life	;Kills all life on screen, only bosses and related monsters should be on screen
   2443  f850
   2444  f850				   LINEE
   2445  f850							;	STA WSYNC  
   2446  f850
   2447  f850		       a5 ef		      LDA	Score2
   2448  f852		       29 0f		      AND	#$0F
   2449  f854		       0a		      ASL
   2450  f855		       0a		      ASL
   2451  f856		       0a		      ASL
   2452  f857		       a8		      TAY
   2453  f858
   2454  f858
   2455  f858		       b9 40 ff 	      LDA	NUM0_,y
   2456  f85b		       85 98		      STA	EnemyGraphicsColorPtr_E2
   2457  f85d
   2458  f85d
   2459  f85d		       b9 41 ff 	      LDA	NUM0_+1,y
   2460  f860		       85 99		      STA	EnemyGraphicsColorPtr_E3
   2461  f862
   2462  f862
   2463  f862		       b9 42 ff 	      LDA	NUM0_+2,y
   2464  f865		       85 9a		      STA	EnemyGraphicsColorPtr_E4
   2465  f867
   2466  f867
   2467  f867		       b9 43 ff 	      LDA	NUM0_+3,y
   2468  f86a		       85 9b		      STA	EnemyGraphicsColorPtr_E5
   2469  f86c
   2470  f86c
   2471  f86c		       b9 44 ff 	      LDA	NUM0_+4,y
   2472  f86f		       85 9c		      STA	EnemyGraphicsColorPtr_E6
   2473  f871				   LINEF
   2474  f871							;	STA WSYNC  
   2475  f871
   2476  f871		       a5 fd		      LDA	Potion
   2477  f873		       29 07		      AND	#%00000111
   2478  f875		       0a		      ASL
   2479  f876		       0a		      ASL
   2480  f877		       0a		      ASL
   2481  f878		       a8		      TAY
   2482  f879
   2483  f879		       b9 0f fa 	      LDA	ARNUM0,y
   2484  f87c		       85 8d		      STA	E2_Ptr2
   2485  f87e
   2486  f87e
   2487  f87e		       b9 10 fa 	      LDA	ARNUM0+1,y
   2488  f881		       85 8e		      STA	E3_Ptr2
   2489  f883
   2490  f883
   2491  f883		       b9 11 fa 	      LDA	ARNUM0+2,y
   2492  f886		       85 8f		      STA	E4_Ptr2
   2493  f888
   2494  f888
   2495  f888		       b9 12 fa 	      LDA	ARNUM0+3,y
   2496  f88b		       85 90		      STA	E5_Ptr2
   2497  f88d
   2498  f88d
   2499  f88d		       b9 13 fa 	      LDA	ARNUM0+4,y
   2500  f890		       85 91		      STA	E6_Ptr2
   2501  f892
   2502  f892
   2503  f892
   2504  f892							;	LDA #$FF
   2505  f892							;	STA COLUPF
   2506  f892
   2507  f892		       85 02		      STA	WSYNC	;Can't rid of this, causes bouncing
   2508  f894				   rand_8
   2509  f894		       a5 fe		      LDA	RNG	; get seed
   2510  f896		       d0 02		      BNE	Not_Zero
   2511  f898		       a5 81		      LDA	ROLLING_COUNTER
   2512  f89a				   Not_Zero
   2513  f89a		       0a		      ASL		; shift byte
   2514  f89b		       90 02		      BCC	no_eor	; branch if no carry
   2515  f89d
   2516  f89d		       49 cf		      EOR	#$CF	; else EOR with $CF
   2517  f89f				   no_eor
   2518  f89f		       85 fe		      STA	RNG	; save number as next seed
   2519  f8a1
   2520  f8a1
   2521  f8a1
   2522  f8a1							;EnemyGraphicsColorPtr_E2
   2523  f8a1
   2524  f8a1
   2525  f8a1		       a0 05		      LDY	#5
   2526  f8a3
   2527  f8a3				   WSYNCAMT
   2528  f8a3		       85 02		      STA	WSYNC
   2529  f8a5		       88		      DEY
   2530  f8a6		       d0 fb		      BNE	WSYNCAMT
   2531  f8a8
   2532  f8a8		       a0 05		      LDY	#5
   2533  f8aa
   2534  f8aa
   2535  f8aa
   2536  f8aa		       4c e8 fa 	      JMP	CalcScore
   2537  f8ad
   2538  f8ad
   2539  f8ad
   2540  f8ad
   2541  f8c0					      ORG	$F8C0
   2542  f8c0
   2543  f8c0				   GhostGraphics
   2544  f8c0		       00		      .byte.b	#%00000000	;$0E
   2545  f8c1		       70		      .byte.b	#%01110000	;$0E
   2546  f8c2		       38		      .byte.b	#%00111000	;$0E
   2547  f8c3		       32		      .byte.b	#%00110010	;$0E
   2548  f8c4		       7c		      .byte.b	#%01111100	;$0E
   2549  f8c5		       90		      .byte.b	#%10010000	;$0E
   2550  f8c6		       28		      .byte.b	#%00101000	;$32
   2551  f8c7		       38		      .byte.b	#%00111000	;$0E
   2552  f8c8				   GhostGraphicsb
   2553  f8c8		       00		      .byte.b	#%00000000	;$0E
   2554  f8c9		       1c		      .byte.b	#%00011100	;$0E
   2555  f8ca		       38		      .byte.b	#%00111000	;$0E
   2556  f8cb		       b0		      .byte.b	#%10110000	;$0E
   2557  f8cc		       7c		      .byte.b	#%01111100	;$0E
   2558  f8cd		       12		      .byte.b	#%00010010	;$0E
   2559  f8ce		       28		      .byte.b	#%00101000	;$32
   2560  f8cf		       38		      .byte.b	#%00111000	;$0E
   2561  f8d0
   2562  f8d0
   2563  f8d0				   BoggartGraphics
   2564  f8d0		       0c		      .byte.b	#%00001100	;$06
   2565  f8d1		       64		      .byte.b	#%01100100	;$06
   2566  f8d2		       28		      .byte.b	#%00101000	;$06
   2567  f8d3		       1a		      .byte.b	#%00011010	;$06
   2568  f8d4		       3c		      .byte.b	#%00111100	;$06
   2569  f8d5		       58		      .byte.b	#%01011000	;$02
   2570  f8d6		       8c		      .byte.b	#%10001100	;$02
   2571  f8d7		       1c		      .byte.b	#%00011100	;--
   2572  f8d8				   BoggartGraphicsb
   2573  f8d8		       60		      .byte.b	#%01100000	;$06
   2574  f8d9		       2c		      .byte.b	#%00101100	;$06
   2575  f8da		       28		      .byte.b	#%00101000	;$06
   2576  f8db		       18		      .byte.b	#%00011000	;$06
   2577  f8dc		       18		      .byte.b	#%00011000	;$06
   2578  f8dd		       38		      .byte.b	#%00111000	;$02
   2579  f8de		       4c		      .byte.b	#%01001100	;$02
   2580  f8df		       9c		      .byte.b	#%10011100	;--
   2581  f8e0
   2582  f8e0				   PitGraphics_canIgetRidOf
   2583  f8e0		       00		      .byte.b	#%00000000
   2584  f8e1		       38		      .byte.b	#%00111000
   2585  f8e2		       7c		      .byte.b	#%01111100
   2586  f8e3		       7c		      .byte.b	#%01111100
   2587  f8e4		       7c		      .byte.b	#%01111100
   2588  f8e5		       38		      .byte.b	#%00111000
   2589  f8e6		       00		      .byte.b	#%00000000
   2590  f8e7		       00		      .byte.b	#%00000000
   2591  f8e8
   2592  f8e8				   PitGraphics
   2593  f8e8				   WillOWispGraphics
   2594  f8e8		       00		      .byte.b	#%00000000
   2595  f8e9		       38		      .byte.b	#%00111000
   2596  f8ea		       7c		      .byte.b	#%01111100
   2597  f8eb		       7c		      .byte.b	#%01111100
   2598  f8ec		       7c		      .byte.b	#%01111100
   2599  f8ed		       38		      .byte.b	#%00111000
   2600  f8ee		       00		      .byte.b	#%00000000
   2601  f8ef		       00		      .byte.b	#%00000000
   2602  f8f0
   2603  f8f0		       00		      .byte.b	#%00000000
   2604  f8f1		       00		      .byte.b	#%00000000
   2605  f8f2		       38		      .byte.b	#%00111000
   2606  f8f3		       7c		      .byte.b	#%01111100
   2607  f8f4		       7c		      .byte.b	#%01111100
   2608  f8f5		       7c		      .byte.b	#%01111100
   2609  f8f6		       38		      .byte.b	#%00111000
   2610  f8f7							;	.byte #%00000000
   2611  f8f7
   2612  f8f7				   BrownieaGraphics
   2613  f8f7
   2614  f8f7		       00		      .byte.b	#%00000000
   2615  f8f8		       14		      .byte.b	#%00010100
   2616  f8f9		       14		      .byte.b	#%00010100
   2617  f8fa		       3c		      .byte.b	#%00111100
   2618  f8fb		       7e		      .byte.b	#%01111110
   2619  f8fc		       10		      .byte.b	#%00010000
   2620  f8fd		       38		      .byte.b	#%00111000
   2621  f8fe		       38		      .byte.b	#%00111000
   2622  f8ff
   2623  f8ff
   2624  f8ff
   2625  f8ff		       00		      .byte.b	#%00000000
   2626  f900		       22		      .byte.b	#%00100010
   2627  f901		       24		      .byte.b	#%00100100
   2628  f902		       3c		      .byte.b	#%00111100
   2629  f903		       7e		      .byte.b	#%01111110
   2630  f904		       10		      .byte.b	#%00010000
   2631  f905		       38		      .byte.b	#%00111000
   2632  f906		       38		      .byte.b	#%00111000
   2633  f907
   2634  f907
   2635  f907
   2636  f907
   2637  f907
   2638  f907				   MORECALCS
   2639  f907							;assum horiz speed will be zero
   2640  f907
   2641  f907
   2642  f907		       a5 ca		      lda	Player_Health
   2643  f909		       d0 03		      bne	donjump
   2644  f90b		       4c 4c f0 	      JMP	MORECALCSRET
   2645  f90e
   2646  f90e				   donjump
   2647  f90e		       a5 f5		      lda	onhorse	;while on horse knife is always readied
   2648  f910		       f0 04		      beq	horseknife
   2649  f912		       a9 08		      lda	#8
   2650  f914		       85 f6		      sta	swordduration
   2651  f916				   horseknife
   2652  f916
   2653  f916
   2654  f916
   2655  f916		       a5 fd		      lda	Potion
   2656  f918		       f0 1c		      beq	NoPotion
   2657  f91a		       c9 08		      cmp	#%00001000
   2658  f91c		       b0 18		      bcs	OverPotion
   2659  f91e
   2660  f91e							;	LDA  SWCHB		 ; Start/Reset button....
   2661  f91e							;	LSR			 ; Shove bit 0 into carry flag,
   2662  f91e							;	LSR						; second bit is for select button
   2663  f91e							;	BEQ  PotionUsedButton	 ; and if it's pushed...
   2664  f91e							;was bcs
   2665  f91e
   2666  f91e		       ad 82 02 	      LDA	SWCHB	;Get console switches. 						    ;4	  
   2667  f921		       29 02		      AND	#$02	;Check select switch						   ;2	 
   2668  f923		       f0 04		      BEQ	PotionUsedButton	;Branch if Select.
   2669  f925
   2670  f925
   2671  f925							;DATA BIT SWITCH
   2672  f925							;D7 PI Difficulty
   2673  f925							;D6 PO Difficulty
   2674  f925							;D5 Not used.
   2675  f925							;D4 Not used.
   2676  f925							;D3 Color - B/W
   2677  f925							;D2 Not used.
   2678  f925							;Dl SELECT
   2679  f925							;DO RESET
   2680  f925
   2681  f925
   2682  f925
   2683  f925							;Need something for second genesis button
   2684  f925
   2685  f925		       a6 0d		      ldx	INPT5
   2686  f927		       30 0d		      bmi	NoPotion
   2687  f929				   PotionUsedButton
   2688  f929							;	asl
   2689  f929							;	asl
   2690  f929		       0a		      asl
   2691  f92a		       0a		      asl
   2692  f92b		       0a		      asl
   2693  f92c							;	cmp #%1110000
   2694  f92c							;	bne nobonus	
   2695  f92c							;	lda #%11100000 ;This was 10000000 trying to make potion last longer
   2696  f92c				   nobonus
   2697  f92c		       05 fd		      ora	Potion
   2698  f92e		       85 fd		      sta	Potion
   2699  f930
   2700  f930							;	lda RNG
   2701  f930							;	BMI DONTDECPOISION
   2702  f930		       c6 fd		      dec	Potion
   2703  f932				   DONTDECPOISION
   2704  f932		       a9 ff		      lda	#$FF	;
   2705  f934		       85 f8		      sta	Other_Hit
   2706  f936							;	jmp NoPotion
   2707  f936				   OverPotion
   2708  f936
   2709  f936
   2710  f936
   2711  f936				   NoPotion
   2712  f936							;check Hero Sword Attack
   2713  f936		       a6 0c		      ldx	INPT4
   2714  f938		       30 15		      bmi	NoSwordAttack2	;(button not pressed)
   2715  f93a		       e6 f6		      inc	swordduration
   2716  f93c		       a5 f6		      lda	swordduration
   2717  f93e		       c9 0b		      cmp	#11
   2718  f940		       b0 11		      bcs	NoSwordAttack
   2719  f942				   SwordAttack
   2720  f942
   2721  f942							;	lda swordduration
   2722  f942		       4a		      lsr
   2723  f943		       4a		      lsr
   2724  f944		       85 eb		      sta	PF_TEMP
   2725  f946		       a5 c0		      lda	Hero_YPosFromBot
   2726  f948							;	clc ;carry will always be set because of earlier compare
   2727  f948		       e9 02		      sbc	#C_P1_HEIGHT - 10
   2728  f94a							;	sec
   2729  f94a		       e5 eb		      sbc	PF_TEMP
   2730  f94c		       4c 55 f9 	      jmp	DoneWithSwordAttack
   2731  f94f				   NoSwordAttack2
   2732  f94f		       a9 00		      lda	#0
   2733  f951							;sta PF_TEMP
   2734  f951		       85 f6		      sta	swordduration
   2735  f953				   NoSwordAttack
   2736  f953		       a9 c8		      lda	#200
   2737  f955				   DoneWithSwordAttack
   2738  f955		       85 c7		      sta	Hero_Sword_Pos
   2739  f957
   2740  f957
   2741  f957
   2742  f957							;	lda Grapple
   2743  f957							;	bne HeroDown
   2744  f957
   2745  f957							;	LDA #%01000000	;Left?
   2746  f957		       2c 80 02 	      BIT	SWCHA
   2747  f95a		       70 20		      BVS	SkipMoveLeft
   2748  f95c							;16 bit math
   2749  f95c
   2750  f95c		       38		      sec
   2751  f95d		       a5 c2		      lda	Hero_XPos
   2752  f95f		       e9 01		      sbc	#<HERO_SPEED_HOR
   2753  f961		       85 c2		      sta	Hero_XPos
   2754  f963		       a5 c3		      lda	Hero_XPos+1
   2755  f965		       e9 00		      sbc	#>HERO_SPEED_HOR
   2756  f967		       85 c3		      sta	Hero_XPos+1
   2757  f969
   2758  f969							;; moving left, so we need the mirror image
   2759  f969		       a9 08		      LDA	#%00001000	;a 1 in D3 of REFP0 says make it mirror
   2760  f96b							;	STA REFP0
   2761  f96b		       85 0c		      STA	REFP1
   2762  f96d		       a9 01		      LDA	#%00000001
   2763  f96f		       85 cb		      STA	MOV_STAT
   2764  f971
   2765  f971							;Don't allow Hero too far left
   2766  f971		       a9 08		      LDA	#Far_Left
   2767  f973		       c5 c2		      CMP	Hero_XPos
   2768  f975		       90 02		      BCC	HeroLeft
   2769  f977		       85 c2		      STA	Hero_XPos
   2770  f979				   HeroLeft
   2771  f979
   2772  f979		       4c 97 f9 	      JMP	SkipMoveRight
   2773  f97c
   2774  f97c				   SkipMoveLeft
   2775  f97c		       2c 80 02 	      BIT	SWCHA
   2776  f97f		       30 16		      BMI	SkipMoveRight
   2777  f981
   2778  f981
   2779  f981		       a5 c2		      lda	Hero_XPos
   2780  f983		       c9 6e		      CMP	#Far_Right_Hero
   2781  f985		       b0 0a		      BCS	TOOFARTOMOVE
   2782  f987							;	clc ;carry can never be set here, because it would have jumped from previous statement
   2783  f987		       69 01		      adc	#<HERO_SPEED_HOR
   2784  f989		       85 c2		      sta	Hero_XPos
   2785  f98b		       a5 c3		      lda	Hero_XPos+1
   2786  f98d		       69 00		      adc	#>HERO_SPEED_HOR
   2787  f98f		       85 c3		      sta	Hero_XPos+1
   2788  f991				   TOOFARTOMOVE
   2789  f991							;; moving right, cancel any mirrorimage
   2790  f991		       a9 00		      LDA	#%00000000
   2791  f993							;	STA REFP0
   2792  f993		       85 0c		      STA	REFP1
   2793  f995		       85 cb		      STA	MOV_STAT
   2794  f997
   2795  f997
   2796  f997
   2797  f997							;Don't allow Hero too far right
   2798  f997							;	LDA #Far_Right_Hero
   2799  f997							;	CMP Hero_XPos
   2800  f997							;	BCS HeroRight
   2801  f997							;	STA Hero_XPos
   2802  f997				   HeroRight
   2803  f997
   2804  f997
   2805  f997				   SkipMoveRight
   2806  f997
   2807  f997
   2808  f997
   2809  f997							;Don't allow Hero above top position
   2810  f997		       a9 b4		      LDA	#Far_Up_Hero
   2811  f999		       c5 c0		      CMP	Hero_YPosFromBot
   2812  f99b		       b0 02		      BCS	HeroUp
   2813  f99d		       85 c0		      STA	Hero_YPosFromBot
   2814  f99f				   HeroUp
   2815  f99f
   2816  f99f							;Don't allow Hero below bottom
   2817  f99f		       a9 32		      LDA	#Far_Down_Hero
   2818  f9a1		       c5 c0		      CMP	Hero_YPosFromBot
   2819  f9a3		       90 02		      BCC	HeroDown
   2820  f9a5		       85 c0		      STA	Hero_YPosFromBot
   2821  f9a7				   HeroDown
   2822  f9a7
   2823  f9a7		       4c 4c f0 	      JMP	MORECALCSRET
   2824  f9aa
   2825  f9aa
   2826  f9c0					      ORG	$F9C0
   2827  f9c0
   2828  f9c0				   MandrakePlantGraphics
   2829  f9c0		       00		      .byte.b	#%00000000	;$D2
   2830  f9c1		       3c		      .byte.b	#%00111100	;$D2
   2831  f9c2		       18		      .byte.b	#%00011000	;$D2
   2832  f9c3		       18		      .byte.b	#%00011000	;$C2
   2833  f9c4		       24		      .byte.b	#%00100100	;$C4
   2834  f9c5		       42		      .byte.b	#%01000010	;$D2
   2835  f9c6		       c3		      .byte.b	#%11000011	;$C4
   2836  f9c7		       c3		      .byte.b	#%11000011	;$30
   2837  f9c8
   2838  f9c8				   MandrakePlantGraphicsb
   2839  f9c8		       00		      .byte.b	#%00000000	;$D2
   2840  f9c9		       3c		      .byte.b	#%00111100	;$D2
   2841  f9ca		       18		      .byte.b	#%00011000	;$D2
   2842  f9cb		       18		      .byte.b	#%00011000	;$C2
   2843  f9cc		       24		      .byte.b	#%00100100	;$C4
   2844  f9cd		       42		      .byte.b	#%01000010	;$D2
   2845  f9ce		       33		      .byte.b	#%0110011	;$C4
   2846  f9cf		       66		      .byte.b	#%01100110	;$30
   2847  f9d0
   2848  f9d0
   2849  f9d0				   OrcGraphics
   2850  f9d0		       00		      .byte.b	#%00000000	;
   2851  f9d1		       48		      .byte.b	#%01001000	;
   2852  f9d2		       28		      .byte.b	#%00101000	;
   2853  f9d3		       38		      .byte.b	#%00111000	;
   2854  f9d4		       78		      .byte.b	#%01111000	;
   2855  f9d5		       10		      .byte.b	#%00010000	;
   2856  f9d6		       70		      .byte.b	#%01110000	;
   2857  f9d7		       70		      .byte.b	#%01110000	;
   2858  f9d8
   2859  f9d8				   OrcGraphicsb
   2860  f9d8		       00		      .byte.b	#%00000000	;
   2861  f9d9		       20		      .byte.b	#%00100000	;
   2862  f9da		       28		      .byte.b	#%00101000	;
   2863  f9db		       38		      .byte.b	#%00111000	;
   2864  f9dc		       78		      .byte.b	#%01111000	;
   2865  f9dd		       10		      .byte.b	#%00010000	;
   2866  f9de		       70		      .byte.b	#%01110000	;
   2867  f9df		       70		      .byte.b	#%01110000	;
   2868  f9e0
   2869  f9e0
   2870  f9e0
   2871  f9e0				   PonyGraphics
   2872  f9e0
   2873  f9e0		       00		      .byte.b	#%00000000	;$C0
   2874  f9e1		       14		      .byte.b	#%00010100	;$22
   2875  f9e2		       14		      .byte.b	#%00010100	;$C2
   2876  f9e3		       1e		      .byte.b	#%00011110	;$D2
   2877  f9e4		       7f		      .byte.b	#%01111111	;$D2
   2878  f9e5		       dc		      .byte.b	#%11011100	;$C2
   2879  f9e6		       00		      .byte.b	#%00000000	;$C0
   2880  f9e7		       00		      .byte.b	#%00000000	;$D0
   2881  f9e8
   2882  f9e8
   2883  f9e8		       00		      .byte.b	#%00000000	;$C0
   2884  f9e9		       14		      .byte.b	#%00010100	;$22
   2885  f9ea		       14		      .byte.b	#%00010100	;$C2
   2886  f9eb		       de		      .byte.b	#%11011110	;$D2
   2887  f9ec		       7f		      .byte.b	#%01111111	;$D2
   2888  f9ed		       1c		      .byte.b	#%00011100	;$C2
   2889  f9ee		       00		      .byte.b	#%00000000	;$C0
   2890  f9ef		       00		      .byte.b	#%00000000	;$D0
   2891  f9f0
   2892  f9f0
   2893  f9f0
   2894  f9f0
   2895  f9f0				   BatGraphics
   2896  f9f0		       00		      .byte.b	#%00000000	;--
   2897  f9f1		       81		      .byte.b	#%10000001	;--
   2898  f9f2		       bd		      .byte.b	#%10111101	;--
   2899  f9f3		       ff		      .byte.b	#%11111111	;--
   2900  f9f4		       ff		      .byte.b	#%11111111	;--
   2901  f9f5		       db		      .byte.b	#%11011011	;--
   2902  f9f6		       5a		      .byte.b	#%01011010	;--
   2903  f9f7		       00		      .byte.b	#%00000000	;--
   2904  f9f8				   BatGraphicsb
   2905  f9f8		       00		      .byte.b	#%00000000	;--
   2906  f9f9		       3c		      .byte.b	#%00111100	;--
   2907  f9fa		       7e		      .byte.b	#%01111110	;--
   2908  f9fb		       ff		      .byte.b	#%11111111	;--
   2909  f9fc		       ff		      .byte.b	#%11111111	;--
   2910  f9fd		       db		      .byte.b	#%11011011	;--
   2911  f9fe		       c3		      .byte.b	#%11000011	;--
   2912  f9ff		       81		      .byte.b	#%10000001	;--
   2913  fa00
   2914  fa00
   2915  fa00							;-----------------------------
   2916  fa00							; This table converts the "remainder" of the division by 15 (-1 to -15) to the correct
   2917  fa00							; fine adjustment value. This table is on a page boundary to guarantee the processor
   2918  fa00							; will cross a page boundary and waste a cycle in order to be at the precise position
   2919  fa00							; for a RESP0,x write
   2920  fa00							;ROM is located from F000 to FFFF
   2921  fa00
   2922  fa00					      ORG	$FA00	;this a critical location, must be on edge of page 
   2923  fa00				   fineAdjustBegin
   2924  fa00
   2925  fa00		       70		      DC.B	%01110000	; Left 7
   2926  fa01		       60		      DC.B	%01100000	; Left 6
   2927  fa02		       50		      DC.B	%01010000	; Left 5
   2928  fa03		       40		      DC.B	%01000000	; Left 4
   2929  fa04		       30		      DC.B	%00110000	; Left 3
   2930  fa05		       20		      DC.B	%00100000	; Left 2
   2931  fa06		       10		      DC.B	%00010000	; Left 1
   2932  fa07		       00		      DC.B	%00000000	; No movement.
   2933  fa08		       f0		      DC.B	%11110000	; Right 1
   2934  fa09		       e0		      DC.B	%11100000	; Right 2
   2935  fa0a		       d0		      DC.B	%11010000	; Right 3
   2936  fa0b		       c0		      DC.B	%11000000	; Right 4
   2937  fa0c		       b0		      DC.B	%10110000	; Right 5
   2938  fa0d		       a0		      DC.B	%10100000	; Right 6
   2939  fa0e		       90		      DC.B	%10010000	; Right 7
   2940  fa0f
   2941  fa0f		       f9 0f	   fineAdjustTable EQU	fineAdjustBegin - %11110001	; NOTE: %11110001 = -15
   2942  fa0f				   ARNUM0
   2943  fa0f		       7e		      .byte.b	#%01111110	;
   2944  fa10		       00		      .byte.b	#%00000000	;
   2945  fa11		       00		      .byte.b	#%00000000	;
   2946  fa12		       00		      .byte.b	#%00000000	;
   2947  fa13		       7e		      .byte.b	#%01111110	;
   2948  fa14		       ff		      .byte.b	#$FF
   2949  fa15		       ff		      .byte.b	#$FF
   2950  fa16		       ff		      .byte.b	#$FF
   2951  fa17
   2952  fa17				   ARNUM1
   2953  fa17		       1c		      .byte.b	#%00011100	;
   2954  fa18		       08		      .byte.b	#%00001000	;
   2955  fa19		       08		      .byte.b	#%00001000	;
   2956  fa1a		       08		      .byte.b	#%00001000	;
   2957  fa1b		       1c		      .byte.b	#%00011100	;
   2958  fa1c		       ff		      .byte.b	#$FF
   2959  fa1d		       ff		      .byte.b	#$FF
   2960  fa1e		       ff		      .byte.b	#$FF
   2961  fa1f
   2962  fa1f				   ARNUM2
   2963  fa1f		       3e		      .byte.b	#%00111110	;
   2964  fa20		       14		      .byte.b	#%00010100	;
   2965  fa21		       14		      .byte.b	#%00010100	;
   2966  fa22		       14		      .byte.b	#%00010100	;
   2967  fa23		       3e		      .byte.b	#%00111110	;
   2968  fa24		       ff		      .byte.b	#$FF
   2969  fa25		       ff		      .byte.b	#$FF
   2970  fa26		       ff		      .byte.b	#$FF
   2971  fa27
   2972  fa27
   2973  fa27				   ARNUM3
   2974  fa27		       7e		      .byte.b	#%01111110	;
   2975  fa28		       54		      .byte.b	#%01010100	;
   2976  fa29		       54		      .byte.b	#%01010100	;
   2977  fa2a		       54		      .byte.b	#%01010100	;
   2978  fa2b		       7e		      .byte.b	#%01111110	;
   2979  fa2c		       ff		      .byte.b	#$FF
   2980  fa2d		       ff		      .byte.b	#$FF
   2981  fa2e		       ff		      .byte.b	#$FF
   2982  fa2f
   2983  fa2f				   ARNUM4
   2984  fa2f		       7e		      .byte.b	#%01111110	;
   2985  fa30		       24		      .byte.b	#%00100100	;
   2986  fa31		       54		      .byte.b	#%01010100	;
   2987  fa32		       54		      .byte.b	#%01010100	;
   2988  fa33		       7e		      .byte.b	#%01111110	;
   2989  fa34		       ff		      .byte.b	#$FF
   2990  fa35		       ff		      .byte.b	#$FF
   2991  fa36		       ff		      .byte.b	#$FF
   2992  fa37
   2993  fa37				   ARNUM5
   2994  fa37		       7c		      .byte.b	#%01111100	;
   2995  fa38		       10		      .byte.b	#%00010000	;
   2996  fa39		       28		      .byte.b	#%00101000	;
   2997  fa3a		       28		      .byte.b	#%00101000	;
   2998  fa3b		       7c		      .byte.b	#%01111100	;
   2999  fa3c
   3000  fa3c
   3001  fa3c
   3002  fa3c				   DistFromBottom
   3003  fa3c		       a9		      .byte.b	#Enemy_Row_0-#8-#C_P0_HEIGHT
   3004  fa3d		       95		      .byte.b	#Enemy_Row_E0-#8-#C_P0_HEIGHT
   3005  fa3e		       81		      .byte.b	#Enemy_Row_E1-#8-#C_P0_HEIGHT
   3006  fa3f		       6d		      .byte.b	#Enemy_Row_E2-#8-#C_P0_HEIGHT
   3007  fa40		       59		      .byte.b	#Enemy_Row_E3-#8-#C_P0_HEIGHT
   3008  fa41		       45		      .byte.b	#Enemy_Row_E4-#8-#C_P0_HEIGHT
   3009  fa42		       31		      .byte.b	#Enemy_Row_E5-#8-#C_P0_HEIGHT
   3010  fa43		       1d		      .byte.b	#Enemy_Row_E6-#8-#C_P0_HEIGHT
   3011  fa44		       07		      .byte.b	#Enemy_Row_E7-#8-#C_P0_HEIGHT
   3012  fa45
   3013  fa45
   3014  fa45				   SLICE2
   3015  fa45
   3016  fa45		       a5 81		      LDA	ROLLING_COUNTER
   3017  fa47		       29 78		      AND	#%01111000
   3018  fa49
   3019  fa49
   3020  fa49		       c9 78		      CMP	#%01111000
   3021  fa4b		       d0 54		      BNE	SKIPMTN
   3022  fa4d
   3023  fa4d		       a9 10		      LDA	#%00010000
   3024  fa4f		       25 d3		      AND	PF0_L1
   3025  fa51		       18		      CLC
   3026  fa52		       f0 01		      BEQ	R1AJMP
   3027  fa54		       38		      SEC
   3028  fa55				   R1AJMP
   3029  fa55							;movign the initial bit into and outof the 4bit is causing the issue
   3030  fa55				   ROTATE1
   3031  fa55		       66 e7		      ROR	PF5_L1	; 4bit
   3032  fa57		       26 e3		      ROL	PF4_L1	;reversed
   3033  fa59		       66 df		      ROR	PF3_L1	;
   3034  fa5b		       a9 08		      LDA	#%00001000
   3035  fa5d		       25 df		      AND	PF3_L1
   3036  fa5f							;	CMP #0
   3037  fa5f		       18		      CLC
   3038  fa60		       f0 01		      BEQ	R1JMP
   3039  fa62		       38		      SEC
   3040  fa63				   R1JMP
   3041  fa63		       66 db		      ROR	PF2_L1	;4bit
   3042  fa65		       26 d7		      ROL	PF1_L1	;reversed
   3043  fa67		       66 d3		      ROR	PF0_L1
   3044  fa69
   3045  fa69
   3046  fa69
   3047  fa69							;---------------------------------------
   3048  fa69
   3049  fa69		       a9 10		      LDA	#%00010000
   3050  fa6b		       25 d4		      AND	PF0_L2
   3051  fa6d							;	CMP #0
   3052  fa6d		       18		      CLC
   3053  fa6e		       f0 01		      BEQ	R2AJMP
   3054  fa70		       38		      SEC
   3055  fa71				   R2AJMP
   3056  fa71							;movign the initial bit into and outof the 4bit is causing the issue
   3057  fa71				   ROTATE2
   3058  fa71		       66 e8		      ROR	PF5_L2	; 4bit
   3059  fa73		       26 e4		      ROL	PF4_L2	;reversed
   3060  fa75		       66 e0		      ROR	PF3_L2	;
   3061  fa77		       a9 08		      LDA	#%00001000
   3062  fa79		       25 e0		      AND	PF3_L2
   3063  fa7b							;	CMP #0
   3064  fa7b		       18		      CLC
   3065  fa7c		       f0 01		      BEQ	R2JMP
   3066  fa7e		       38		      SEC
   3067  fa7f				   R2JMP
   3068  fa7f		       66 dc		      ROR	PF2_L2	;4bit
   3069  fa81		       26 d8		      ROL	PF1_L2	;reversed
   3070  fa83		       66 d4		      ROR	PF0_L2
   3071  fa85
   3072  fa85
   3073  fa85							;----------------------------------------
   3074  fa85
   3075  fa85
   3076  fa85		       a9 10		      LDA	#%00010000
   3077  fa87		       25 d5		      AND	PF0_L3
   3078  fa89							;	CMP #0
   3079  fa89		       18		      CLC
   3080  fa8a		       f0 01		      BEQ	R3AJMP
   3081  fa8c		       38		      SEC
   3082  fa8d				   R3AJMP
   3083  fa8d							;movign the initial bit into and outof the 4bit is causing the issue
   3084  fa8d				   ROTATE3
   3085  fa8d		       66 e9		      ROR	PF5_L3	; 4bit
   3086  fa8f		       26 e5		      ROL	PF4_L3	;reversed
   3087  fa91		       66 e1		      ROR	PF3_L3	;
   3088  fa93		       a9 08		      LDA	#%00001000
   3089  fa95		       25 e1		      AND	PF3_L3
   3090  fa97							;	CMP #0
   3091  fa97		       18		      CLC
   3092  fa98		       f0 01		      BEQ	R3JMP
   3093  fa9a		       38		      SEC
   3094  fa9b				   R3JMP
   3095  fa9b		       66 dd		      ROR	PF2_L3	;4bit
   3096  fa9d		       26 d9		      ROL	PF1_L3	;reversed
   3097  fa9f		       66 d5		      ROR	PF0_L3
   3098  faa1
   3099  faa1				   SKIPMTN
   3100  faa1		       4c 17 f1 	      JMP	ENDSLICES
   3101  faa4
   3102  faa4
   3103  faa4				   PreOverScanWait
   3104  faa4							;Can put stuff here --------------------------------------------------
   3105  faa4
   3106  faa4				   OverScanWait
   3107  faa4		       85 02		      STA	WSYNC
   3108  faa6		       88		      DEY
   3109  faa7		       d0 fb		      BNE	OverScanWait
   3110  faa9		       4c 45 f0 	      JMP	MainLoop
   3111  faac
   3112  faac				   NotBellyColor
   3113  fa98					      org	NotBellyColor-#20	;This is because only the end bosses have belly color, saves 20 bytes
   3114  fa98				   BellyColor		;could save some byte by having two orgs, one for the label and one where the data starts
   3115  faac					      org	NotBellyColor
   3116  faac		       30		      .byte.b	#$30	;Monster 23
   3117  faad		       30		      .byte.b	#$30	;Monster 24
   3118  faae		       30		      .byte.b	#$30	;Monster 25
   3119  faaf		       30		      .byte.b	#$30	;Monster 26
   3120  fab0		       30		      .byte.b	#$30	;Monster 27
   3121  fab1		       30		      .byte.b	#$30	;Monster 28
   3122  fab2		       30		      .byte.b	#$30	;Monster 29
   3123  fab3		       30		      .byte.b	#$30	;Monster 30
   3124  fab4		       30		      .byte.b	#$30	;Monster 31
   3125  fab5
   3126  fab5
   3127  fab5				   Multiplexer
   3128  fab5		       01		      .byte.b	#%00000001
   3129  fab6		       02		      .byte.b	#%00000010
   3130  fab7		       04		      .byte.b	#%00000100
   3131  fab8		       08		      .byte.b	#%00001000
   3132  fab9		       10		      .byte.b	#%00010000
   3133  faba		       20		      .byte.b	#%00100000
   3134  fabb		       40		      .byte.b	#%01000000
   3135  fabc		       80		      .byte.b	#%10000000
   3136  fabd
   3137  fac0					      org	$FAC0
   3138  fac0				   MandrakeManGraphics
   3139  fac0		       00		      .byte.b	#%00000000	;$D2
   3140  fac1		       16		      .byte.b	#%00010110	;$D2
   3141  fac2		       1c		      .byte.b	#%00011100	;$D2
   3142  fac3		       1d		      .byte.b	#%00011101	;$C2
   3143  fac4		       3e		      .byte.b	#%00111110	;$C4
   3144  fac5		       48		      .byte.b	#%01001000	;$D2
   3145  fac6		       1c		      .byte.b	#%00011100	;$C4
   3146  fac7		       14		      .byte.b	#%00010100	;$30
   3147  fac8
   3148  fac8				   MandrakeManGraphicsb
   3149  fac8		       00		      .byte.b	#%00000000	;$D2
   3150  fac9		       34		      .byte.b	#%00110100	;$D2
   3151  faca		       1c		      .byte.b	#%00011100	;$D2
   3152  facb		       5c		      .byte.b	#%01011100	;$C2
   3153  facc		       3e		      .byte.b	#%00111110	;$C4
   3154  facd		       09		      .byte.b	#%00001001	;$D2
   3155  face		       1c		      .byte.b	#%00011100	;$C4
   3156  facf		       14		      .byte.b	#%00010100	;$30
   3157  fad0
   3158  fad0
   3159  fad0				   HeroGraphics2
   3160  fad0		       00		      .byte.b	#%00000000	;$F4
   3161  fad1		       d8		      .byte.b	#%11011000	;$F4
   3162  fad2		       90		      .byte.b	#%10010000	;$F4
   3163  fad3		       f0		      .byte.b	#%11110000	;$F4
   3164  fad4		       f0		      .byte.b	#%11110000	;$F4
   3165  fad5		       fc		      .byte.b	#%11111100	;$EA
   3166  fad6		       f2		      .byte.b	#%11110010	;$CA
   3167  fad7		       31		      .byte.b	#%00110001	;$46
   3168  fad8		       f1		      .byte.b	#%11110001	;$0E
   3169  fad9		       f0		      .byte.b	#%11110000	;$0E
   3170  fada		       c0		      .byte.b	#%11000000	;$0E
   3171  fadb		       f0		      .byte.b	#%11110000	;$22
   3172  fadc
   3173  fadc
   3174  fadc
   3175  fadc		       00		      .byte.b	#%00000000	;$F4
   3176  fadd		       50		      .byte.b	#%01010000	;$F4
   3177  fade		       a0		      .byte.b	#%10100000	;$F4
   3178  fadf		       f0		      .byte.b	#%11110000	;$F4
   3179  fae0		       f0		      .byte.b	#%11110000	;$F4
   3180  fae1		       fc		      .byte.b	#%11111100	;$EA
   3181  fae2		       f2		      .byte.b	#%11110010	;$CA
   3182  fae3		       31		      .byte.b	#%00110001	;$46
   3183  fae4		       f1		      .byte.b	#%11110001	;$0E
   3184  fae5		       f0		      .byte.b	#%11110000	;$0E
   3185  fae6		       c0		      .byte.b	#%11000000	;$0E
   3186  fae7		       f0		      .byte.b	#%11110000	;$22
   3187  fae8
   3188  fae8
   3189  fae8
   3190  fae8
   3191  fae8
   3192  fae8
   3193  fae8
   3194  fae8
   3195  fae8				   CalcScore
   3196  fae8
   3197  fae8
   3198  fae8
   3199  fae8
   3200  fae8
   3201  fae8		       ea		      NOP
   3202  fae9		       ea		      NOP
   3203  faea
   3204  faea
   3205  faea
   3206  faea		       a9 00		      LDA	#00	; 4 cycles
   3207  faec		       85 0d		      STA	PF0	; 3 cycles
   3208  faee		       a5 ca		      LDA	Player_Health	; 4 cycles
   3209  faf0		       85 0e		      STA	PF1	; 3 cycles
   3210  faf2		       b9 8c 00 	      LDA	#E2_Ptr2-1,Y	; 4 cycles
   3211  faf5		       85 0f		      STA	PF2	; 3 cycles
   3212  faf7
   3213  faf7		       ea		      NOP
   3214  faf8							;	NOP
   3215  faf8							;	NOP
   3216  faf8							;	NOP
   3217  faf8		       b9 97 00 	      LDA	#EnemyGraphicsColorPtr_E2-1,Y	; 4 cycles
   3218  fafb		       85 0d		      STA	PF0	; 3 cycles
   3219  fafd		       b9 82 00 	      LDA	#E0_Ptr-1,Y	; 4 cycles
   3220  fb00		       85 0e		      STA	PF1	; 3 cycles
   3221  fb02		       b9 87 00 	      LDA	#E5_Ptr-1,Y	; 4 cycles
   3222  fb05		       85 0f		      STA	PF2	; 3 cycles
   3223  fb07
   3224  fb07		       88		      DEY
   3225  fb08		       85 02		      STA	WSYNC
   3226  fb0a		       d0 dc		      BNE	CalcScore
   3227  fb0c
   3228  fb0c
   3229  fb0c		       a9 00		      LDA	#$00
   3230  fb0e		       85 0d		      STA	PF0
   3231  fb10		       85 0e		      STA	PF1
   3232  fb12		       85 0f		      STA	PF2
   3233  fb14
   3234  fb14
   3235  fb14		       a9 68		      LDA	#%01101000
   3236  fb16
   3237  fb16		       85 0a		      STA	CTRLPF
   3238  fb18
   3239  fb18
   3240  fb18
   3241  fb18		       85 01		      STA	VBLANK
   3242  fb1a		       a0 1e		      LDY	#30	;number of overscan lines	
   3243  fb1c
   3244  fb1c
   3245  fb1c							;--------New Collision Detection Style
   3246  fb1c		       24 01		      BIT	CXM1P	;3 cycles
   3247  fb1e		       10 06		      BPL	No_Hit_the_Baddie3	;2 cycles
   3248  fb20		       a9 80		      LDA	#%10000000
   3249  fb22		       05 f8		      ORA	Other_Hit	;4 cycles
   3250  fb24		       85 f8		      STA	Other_Hit	;4 cycles
   3251  fb26				   No_Hit_the_Baddie3
   3252  fb26							;--------New Collision Detection Style
   3253  fb26
   3254  fb26
   3255  fb26
   3256  fb26		       88		      DEY
   3257  fb27							;	STA WSYNC
   3258  fb27
   3259  fb27							;Fix Positions
   3260  fb27		       24 07		      BIT	CXPPMM	;3 cycles
   3261  fb29		       10 06		      BPL	No_Hit_the_Pit2	;2 cycles
   3262  fb2b		       a5 f9		      LDA	New_Hit	;4 cycles
   3263  fb2d		       09 80		      ORA	#%10000000	;3 cycles
   3264  fb2f		       85 f9		      STA	New_Hit	;4 cycles
   3265  fb31				   No_Hit_the_Pit2
   3266  fb31
   3267  fb31		       a2 08		      LDX	#8
   3268  fb33		       a9 7f		      LDA	#%01111111
   3269  fb35		       85 eb		      STA	PF_TEMP
   3270  fb37
   3271  fb37
   3272  fb37
   3273  fb37				   Check_Pos
   3274  fb37							;Don't allow P0 past Position 160
   3275  fb37		       b5 a0		      LDA	E0_XPos-1,x	;2
   3276  fb39		       c9 8d		      CMP	#Far_Right+1	;2
   3277  fb3b		       90 04		      BCC	P0Right	;2(3)
   3278  fb3d		       a9 08		      LDA	#Far_Left	;2
   3279  fb3f		       95 a0		      STA	E0_XPos-1,x	;3
   3280  fb41				   P0Right
   3281  fb41
   3282  fb41
   3283  fb41							;Don't allow P0 past Position 160
   3284  fb41		       b5 a0		      LDA	E0_XPos-1,x
   3285  fb43		       c9 04		      CMP	#Enemy_Far_Left	;2
   3286  fb45		       b0 0a		      BCS	P0left	;2(3)
   3287  fb47		       a5 eb		      lda	PF_TEMP
   3288  fb49		       25 d1		      and	Enemy_Life
   3289  fb4b		       85 d1		      sta	Enemy_Life
   3290  fb4d		       a9 8c		      LDA	#Far_Right
   3291  fb4f		       95 a0		      STA	E0_XPos-1,x
   3292  fb51				   P0left
   3293  fb51					      SET
   3294  fb51		       66 eb		      ROR	PF_TEMP
   3295  fb53
   3296  fb53							;	LDA Pause
   3297  fb53							;	BNE DontmovePit
   3298  fb53
   3299  fb53				   DontmovePit
   3300  fb53							;	LDA Pit0_XPos-1,x 
   3301  fb53							;	CMP #Far_Right
   3302  fb53							;	BCC PAUSED2
   3303  fb53							;	LDA #0
   3304  fb53							;	STA Pit0_XPos-1,x 
   3305  fb53				   PAUSED2
   3306  fb53
   3307  fb53
   3308  fb53		       88		      DEY
   3309  fb54		       ca		      DEX
   3310  fb55
   3311  fb55
   3312  fb55
   3313  fb55		       85 02		      STA	WSYNC
   3314  fb57		       d0 de		      BNE	Check_Pos
   3315  fb59		       85 02		      STA	WSYNC
   3316  fb5b
   3317  fb5b		       a5 0c		      lda	INPT4
   3318  fb5d		       30 0e		      bmi	Dont_Reset	;(button not pressed)
   3319  fb5f
   3320  fb5f
   3321  fb5f		       a5 fc		      LDA	Baddie_Num
   3322  fb61		       d0 0a		      BNE	Dont_Reset
   3323  fb63		       a5 ca		      LDA	Player_Health
   3324  fb65		       d0 06		      BNE	Dont_Reset
   3325  fb67
   3326  fb67		       a9 f0		      LDA	#$F0
   3327  fb69		       85 ca		      STA	Player_Health
   3328  fb6b		       85 c0		      STA	Hero_YPosFromBot
   3329  fb6d				   Dont_Reset
   3330  fb6d
   3331  fb6d
   3332  fb6d							;	 for up and down, we INC or DEC
   3333  fb6d							; the Y Position
   3334  fb6d
   3335  fb6d		       a9 10		      LDA	#%00010000	;Down?
   3336  fb6f		       2c 80 02 	      BIT	SWCHA
   3337  fb72		       d0 0d		      BNE	SkipMoveDown
   3338  fb74
   3339  fb74							;16 bit math, add both bytes
   3340  fb74							;of the speed constant to
   3341  fb74							;the 2 bytes of the position
   3342  fb74		       18		      clc
   3343  fb75		       a5 c0		      lda	Hero_YPosFromBot
   3344  fb77		       69 01		      adc	#<HERO_SPEED_VER
   3345  fb79		       85 c0		      sta	Hero_YPosFromBot
   3346  fb7b		       a5 c1		      lda	Hero_YPosFromBot+1
   3347  fb7d		       69 00		      adc	#>HERO_SPEED_VER
   3348  fb7f		       85 c1		      sta	Hero_YPosFromBot+1
   3349  fb81				   SkipMoveDown
   3350  fb81
   3351  fb81		       a9 20		      LDA	#%00100000	;Up?
   3352  fb83		       2c 80 02 	      BIT	SWCHA
   3353  fb86		       d0 0d		      BNE	SkipMoveUp
   3354  fb88
   3355  fb88							;16 bit math, subtract both bytes
   3356  fb88							;of the speed constant to
   3357  fb88							;the 2 bytes of the position
   3358  fb88		       38		      sec
   3359  fb89		       a5 c0		      lda	Hero_YPosFromBot
   3360  fb8b		       e9 01		      sbc	#<HERO_SPEED_VER
   3361  fb8d		       85 c0		      sta	Hero_YPosFromBot
   3362  fb8f		       a5 c1		      lda	Hero_YPosFromBot+1
   3363  fb91		       e9 00		      sbc	#>HERO_SPEED_VER
   3364  fb93		       85 c1		      sta	Hero_YPosFromBot+1
   3365  fb95
   3366  fb95
   3367  fb95				   SkipMoveUp
   3368  fb95
   3369  fb95
   3370  fb95		       a9 3c		      LDA	#Min_Eye_Quake
   3371  fb97		       c5 95		      CMP	Overeyes
   3372  fb99		       d0 02		      BNE	Overeyes_Reset
   3373  fb9b		       85 95		      STA	Overeyes
   3374  fb9d
   3375  fb9d				   Overeyes_Reset
   3376  fb9d
   3377  fb9d		       4c a4 fa 	      JMP	PreOverScanWait
   3378  fba0
   3379  fba0
   3380  fba0
   3381  fba0
   3382  fba0
   3383  fba0
   3384  fbc0					      org	$FBC0
   3385  fbc0
   3386  fbc0
   3387  fbc0		       0c		      .byte.b	#$0C	;this is a cheat, his feet sometimes get the wrong color
   3388  fbc1
   3389  fbc1				   HeroGraphicsColor		;2468ACE
   3390  fbc1		       0c		      .byte.b	#$0C
   3391  fbc2		       0a		      .byte.b	#$0A
   3392  fbc3		       0a		      .byte.b	#$0A
   3393  fbc4		       08		      .byte.b	#$08
   3394  fbc5		       04		      .byte.b	#$04
   3395  fbc6		       04		      .byte.b	#$04
   3396  fbc7		       04		      .byte.b	#$04
   3397  fbc8		       04		      .byte.b	#$04
   3398  fbc9		       06		      .byte.b	#$06
   3399  fbca		       06		      .byte.b	#$06
   3400  fbcb		       0a		      .byte.b	#$0A
   3401  fbcc		       08		      .byte.b	#$08
   3402  fbcd
   3403  fbcd				   HeroGraphicsColor2
   3404  fbcd
   3405  fbcd		       0c		      .byte.b	#$0C
   3406  fbce		       0a		      .byte.b	#$0A
   3407  fbcf		       0a		      .byte.b	#$0A
   3408  fbd0		       08		      .byte.b	#$08
   3409  fbd1		       fe		      .byte.b	#$FE
   3410  fbd2		       fe		      .byte.b	#$FE
   3411  fbd3		       fc		      .byte.b	#$FC
   3412  fbd4		       f6		      .byte.b	#$F6
   3413  fbd5		       fa		      .byte.b	#$FA
   3414  fbd6		       f8		      .byte.b	#$F8
   3415  fbd7		       fe		      .byte.b	#$FE
   3416  fbd8		       fe		      .byte.b	#$FE
   3417  fbd9
   3418  fbd9				   HeroGraphicsColor3
   3419  fbd9
   3420  fbd9		       00		      .byte.b	#$00
   3421  fbda		       00		      .byte.b	#$00
   3422  fbdb		       00		      .byte.b	#$00
   3423  fbdc		       00		      .byte.b	#$00
   3424  fbdd		       00		      .byte.b	#$00
   3425  fbde		       04		      .byte.b	#$04
   3426  fbdf		       04		      .byte.b	#$04
   3427  fbe0		       04		      .byte.b	#$04
   3428  fbe1		       06		      .byte.b	#$06
   3429  fbe2		       06		      .byte.b	#$06
   3430  fbe3		       0a		      .byte.b	#$0A
   3431  fbe4		       08		      .byte.b	#$08
   3432  fbe5
   3433  fbe5
   3434  fbe5				   DragonGraphicsa
   3435  fbe5		       67		      .byte.b	#%01100111	;$0E ;now a dragon head
   3436  fbe6		       67		      .byte.b	#%01100111	;$0C
   3437  fbe7		       7f		      .byte.b	#%01111111	;$0E
   3438  fbe8		       0f		      .byte.b	#%00001111	;$0C
   3439  fbe9		       0d		      .byte.b	#%00001101	;$0E
   3440  fbea		       0d		      .byte.b	#%00001101	;$0C
   3441  fbeb		       0f		      .byte.b	#%00001111	;$0E
   3442  fbec		       04		      .byte.b	#%00000100	;$0C
   3443  fbed
   3444  fbed		       67		      .byte.b	#%01100111	;$0E 
   3445  fbee		       67		      .byte.b	#%01100111	;$0C
   3446  fbef		       7f		      .byte.b	#%01111111	;$0E
   3447  fbf0		       0f		      .byte.b	#%00001111	;$0C
   3448  fbf1		       0d		      .byte.b	#%00001101	;$0E
   3449  fbf2		       0d		      .byte.b	#%00001101	;$0C
   3450  fbf3		       0f		      .byte.b	#%00001111	;$0E
   3451  fbf4		       04		      .byte.b	#%00000100	;$0C
   3452  fbf5
   3453  fbf5
   3454  fbf5
   3455  fbf5
   3456  fbf5				   HeroGraphics0
   3457  fbf5		       00		      .byte.b	#%00000000	;$22
   3458  fbf6		       d8		      .byte.b	#%11011000	;$F4
   3459  fbf7		       90		      .byte.b	#%10010000	;$F4
   3460  fbf8		       f0		      .byte.b	#%11110000	;$F4
   3461  fbf9		       f0		      .byte.b	#%11110000	;$F4
   3462  fbfa		       f0		      .byte.b	#%11110000	;$F4
   3463  fbfb		       fc		      .byte.b	#%11111100	;$EA
   3464  fbfc		       32		      .byte.b	#%00110010	;$CA
   3465  fbfd		       f2		      .byte.b	#%11110010	;$0E
   3466  fbfe		       f0		      .byte.b	#%11110000	;$0E
   3467  fbff		       c0		      .byte.b	#%11000000	;$0E
   3468  fc00		       f0		      .byte.b	#%11110000	;$22
   3469  fc01
   3470  fc01
   3471  fc01		       00		      .byte.b	#%00000000	;$22
   3472  fc02		       50		      .byte.b	#%01010000	;$F4
   3473  fc03		       a0		      .byte.b	#%10100000	;$F4
   3474  fc04		       f0		      .byte.b	#%11110000	;$F4
   3475  fc05		       f0		      .byte.b	#%11110000	;$F4
   3476  fc06		       f0		      .byte.b	#%11110000	;$F4
   3477  fc07		       fc		      .byte.b	#%11111100	;$EA
   3478  fc08		       32		      .byte.b	#%00110010	;$46
   3479  fc09		       f2		      .byte.b	#%11110010	;$0E
   3480  fc0a		       f0		      .byte.b	#%11110000	;$0E
   3481  fc0b		       c0		      .byte.b	#%11000000	;$0E
   3482  fc0c		       f0		      .byte.b	#%11110000	;$22
   3483  fc0d
   3484  fc0d
   3485  fc0d				   HeroGraphics1
   3486  fc0d		       00		      .byte.b	#%00000000	;$F4
   3487  fc0e		       24		      .byte.b	#%00100100	;$F4
   3488  fc0f		       3c		      .byte.b	#%00111100	;$F4
   3489  fc10		       fc		      .byte.b	#%11111100	;$F4
   3490  fc11		       36		      .byte.b	#%00110110	;$F4
   3491  fc12		       3c		      .byte.b	#%00111100	;$EA
   3492  fc13		       30		      .byte.b	#%00110000	;$CA
   3493  fc14		       10		      .byte.b	#%00010000	;$46
   3494  fc15		       30		      .byte.b	#%00110000	;$0E
   3495  fc16		       30		      .byte.b	#%00110000	;$0E
   3496  fc17		       20		      .byte.b	#%00100000	;$0E
   3497  fc18		       30		      .byte.b	#%00110000	;$22
   3498  fc19
   3499  fc19
   3500  fc19
   3501  fc19
   3502  fc19		       00		      .byte.b	#%00000000	;$F4
   3503  fc1a		       42		      .byte.b	#%01000010	;$F4
   3504  fc1b		       3c		      .byte.b	#%00111100	;$F4
   3505  fc1c		       7c		      .byte.b	#%01111100	;$F4
   3506  fc1d		       b6		      .byte.b	#%10110110	;$F4
   3507  fc1e		       3c		      .byte.b	#%00111100	;$EA
   3508  fc1f		       30		      .byte.b	#%00110000	;$CA
   3509  fc20		       10		      .byte.b	#%00010000	;$46
   3510  fc21		       30		      .byte.b	#%00110000	;$0E
   3511  fc22		       30		      .byte.b	#%00110000	;$0E
   3512  fc23		       20		      .byte.b	#%00100000	;$0E
   3513  fc24		       30		      .byte.b	#%00110000	;$22
   3514  fc25							;MonsterList
   3515  fc25							;(Section of don't damage players, but will scare away horse)
   3516  fc25							;0,00000,Blank 
   3517  fc25							;1,00001,Horse		    ; Looks Good
   3518  fc25							;2,00010,Mandrake Red Plant ; Looks Good	
   3519  fc25							;3,00011,Mandrake Blue Plant; Looks Good
   3520  fc25							;4,00100,Mandrake Red Man   ; Looks Good
   3521  fc25							;5,00101,Mandrake Blue Man  ; Looks Good
   3522  fc25							;6,00110,Treasure Chest     ;Needs different pallet
   3523  fc25							;7,00111,Weapon Upgrade??? ;Doesn't Exist
   3524  fc25							;8,01000, Tree		; Looks Good	
   3525  fc25							;(Section of monsters that can exit the screen, and damage player)
   3526  fc25							;9,01001,Large Pit	;Doesn't Exist
   3527  fc25							;10,01010,Small Pit	 ; Looks Good
   3528  fc25							;11,01011,Snake	; Looks Good
   3529  fc25							;12,01100,Bat		; Looks Good
   3530  fc25							;13,01101,Rat		; Looks Like a frog
   3531  fc25							;14,01110,Homonoculus	 ; Looks Good
   3532  fc25							;15,01111,Goblin	; Looks Good
   3533  fc25							;(Section of monsters that must be defeated)
   3534  fc25							;16,10000,RedCap ;Palette swap of Goblin??? ; Looks Good
   3535  fc25							;17,10001,Orc			;Needs a larger sprite
   3536  fc25							;18,10010,Ghost			; Looks Good
   3537  fc25							;19,10011,Snake Man		;Needs to have different color than snake
   3538  fc25							;20,10100,Boggart Fighter	 ;Graphics need to be inverted
   3539  fc25							;21,10101,Brownie		;Looks identical to goblin
   3540  fc25							;22,10110,Satyr			; Looks Good
   3541  fc25							;(Section of monster that are Bosses, double size bossed require 2 entries)
   3542  fc25							;23,10111,Mummy A
   3543  fc25							;24,11000,Mummy B
   3544  fc25							;25,11001,Dragon A
   3545  fc25							;26,11010,Dragon B
   3546  fc25							;27,11011,Will O Wisp
   3547  fc25
   3548  fc25
   3549  fc25
   3550  fc25
   3551  fc25
   3552  fc25
   3553  fc25
   3554  fc25
   3555  fc25				   SLICE3
   3556  fc25				   MOVESECTION
   3557  fc25		       a5 d2		      LDA	Pause
   3558  fc27							;	CMP #0
   3559  fc27		       f0 02		      BEQ	NOMAKEEYES
   3560  fc29		       e6 95		      INC	Overeyes
   3561  fc2b				   NOMAKEEYES
   3562  fc2b		       a9 00		      LDA	#0
   3563  fc2d		       85 fa		      STA	Player_Hit	;Need to make it easier to live
   3564  fc2f		       85 f9		      STA	New_Hit
   3565  fc31		       4c 14 f1 	      JMP	MOVESET1
   3566  fc34				   NOMOVESET
   3567  fc34
   3568  fc34		       a5 95		      LDA	Overeyes
   3569  fc36		       c9 3c		      CMP	#Min_Eye_Quake
   3570  fc38		       90 0d		      BCC	NOPITCREATION
   3571  fc3a		       a5 fe		      LDA	RNG
   3572  fc3c		       c9 78		      CMP	#120
   3573  fc3e		       b0 07		      BCS	NOPITCREATION
   3574  fc40		       c9 8c		      CMP	#Far_Right
   3575  fc42		       b0 03		      BCS	NOPITCREATION
   3576  fc44		       29 07		      AND	#%00000111
   3577  fc46		       aa		      tax
   3578  fc47
   3579  fc47				   NOPITCREATION
   3580  fc47		       c9 0b		      CMP	#11
   3581  fc49		       d0 04		      BNE	NOLOSEHORSE
   3582  fc4b		       a9 00		      LDA	#0
   3583  fc4d		       85 f5		      STA	onhorse
   3584  fc4f				   NOLOSEHORSE
   3585  fc4f
   3586  fc4f
   3587  fc4f		       a5 fa		      LDA	Player_Hit
   3588  fc51		       f0 04		      BEQ	HORSENOTLOST
   3589  fc53		       a9 00		      LDA	#0
   3590  fc55		       85 f5		      STA	onhorse
   3591  fc57				   HORSENOTLOST
   3592  fc57		       4c 17 f1 	      JMP	ENDSLICES
   3593  fc5a
   3594  fc5a
   3595  fc5a
   3596  fc5a				   Level_Color		;One level per monster
   3597  fc5a		       b0		      .byte.b	#$B0
   3598  fc5b		       d4		      .byte.b	#$D4
   3599  fc5c		       d0		      .byte.b	#$D0
   3600  fc5d		       e4		      .byte.b	#$E4
   3601  fc5e		       f4		      .byte.b	#$F4
   3602  fc5f		       12		      .byte.b	#$12
   3603  fc60
   3604  fc60
   3605  fc60				   DragonGraphicsb
   3606  fc60		       04		      .byte.b	#%00000100	;$0C ;now a dragon head
   3607  fc61		       0f		      .byte.b	#%00001111	;$0E
   3608  fc62		       0d		      .byte.b	#%00001101	;$0C
   3609  fc63		       0d		      .byte.b	#%00001101	;$0E
   3610  fc64		       0f		      .byte.b	#%00001111	;$0C
   3611  fc65		       7f		      .byte.b	#%01111111	;$0E
   3612  fc66		       67		      .byte.b	#%01100111	;$0C
   3613  fc67		       67		      .byte.b	#%01100111	;$0E
   3614  fc68
   3615  fc68
   3616  fc68		       04		      .byte.b	#%00000100	;$0C 
   3617  fc69		       0f		      .byte.b	#%00001111	;$0E
   3618  fc6a		       0d		      .byte.b	#%00001101	;$0C
   3619  fc6b		       0d		      .byte.b	#%00001101	;$0E
   3620  fc6c		       0f		      .byte.b	#%00001111	;$0C
   3621  fc6d		       7f		      .byte.b	#%01111111	;$0E
   3622  fc6e		       67		      .byte.b	#%01100111	;$0C
   3623  fc6f		       67		      .byte.b	#%01100111	;$0E
   3624  fc70
   3625  fc70
   3626  fc70				   NEXTBADDIETYPE		;first 3 bits is the lane, last 5 is the type
   3627  fc70							;     .byte #%00001000
   3628  fc70							;     .byte #%00101100 
   3629  fc70							;     .byte #%10011001 ;mummy arms
   3630  fc70							;     .byte #%10111010 ;mummy legs
   3631  fc70							;     .byte #%10011111;This is mummy middle,pit; pits seems to be broken except in two spots needs to start 1 slot later
   3632  fc70							;     .byte #%01100001
   3633  fc70							;     .byte #%11000011 
   3634  fc70							;     .byte #%11001011
   3635  fc70							;     .byte #%00001011
   3636  fc70							;     .byte #%00101110
   3637  fc70							;     .byte #%01010000
   3638  fc70							;     .byte #%01110001
   3639  fc70							;     .byte #%10010010
   3640  fc70							;     .byte #%10110011
   3641  fc70							;     .byte #%11000010
   3642  fc70							;     .byte #%11000010
   3643  fc70							;     .byte #%00000010
   3644  fc70							;     .byte #%00100010
   3645  fc70							;     .byte #%01001100
   3646  fc70							;     .byte #%01101011
   3647  fc70							;     .byte #%10001111
   3648  fc70							;     .byte #%10101011
   3649  fc70							;     .byte #%11001011
   3650  fc70							;     .byte #%11001110
   3651  fc70							;     .byte #255 ;This is to reset to beginning
   3652  fc70
   3653  fc70							;Maybe constant duration based on level
   3654  fc70				   NEXTBADDIEDUR
   3655  fc70							;	.byte #$0
   3656  fc70							;	.byte #$10
   3657  fc70							;	.byte #$FA
   3658  fc70							;	.byte #$10
   3659  fc70
   3660  fc70				   BADDIEVALUE3 		;Is this the level data? This doesn't seem to be used anywhere
   3661  fc70							;     .byte #0 ;;0,Tree
   3662  fc70							;     .byte #0 ;;1,Horse
   3663  fc70							;     .byte #1 ;;2,Mandrake Red Plant
   3664  fc70							;     .byte #1 ;;3,Mandrake Blue Plant
   3665  fc70							;     .byte #1 ;;4,Mandrake Red Man
   3666  fc70							;     .byte #1 ;;5,Mandrake Blue Man
   3667  fc70							;     .byte #3 ;;6,Treasure Chest
   3668  fc70							;     .byte #3 ;;7,Weapon Upgrade???
   3669  fc70							;     .byte #3 ;;8,
   3670  fc70							;     .byte #0 ;;9,Large Pit
   3671  fc70							;     .byte #0 ;;10,Small Pit
   3672  fc70							;     .byte #2 ;;11,Snake
   3673  fc70							;     .byte #2 ;;12,Bat 
   3674  fc70							;     .byte #1 ;;13,Rat
   3675  fc70							;     .byte #1 ;;14,Homonoculus
   3676  fc70							;     .byte #1 ;;15,Goblin
   3677  fc70							;     .byte #1 ;;16,RedCap
   3678  fc70							;     .byte #1 ;;17,Ogre
   3679  fc70							;     .byte #4 ;;18,Ghost
   3680  fc70							;     .byte #4 ;;19,Snake Man
   3681  fc70							;     .byte #4 ;;20,Boggart Fighter
   3682  fc70							;     .byte #4 ;;21,Brownie
   3683  fc70							;     .byte #4 ;;22,Satyr
   3684  fc70							;     .byte #4 ;;23,Mummy A
   3685  fc70							;     .byte #5 ;;24,Mummy B
   3686  fc70							;     .byte #5 ;;25,Dragon A
   3687  fc70							;     .byte #5 ;;26,Dragon B
   3688  fc70							;     .byte #6 ;;27,Will O Wisp
   3689  fc70							;     .byte #7 ;;28,Monster 4a
   3690  fc70							;    .byte #7 ;;29,Monster 4b
   3691  fc70							;     .byte #8 ;;30,Monster 5a
   3692  fc70							;    .byte #8 ;;31,Monster 5b
   3693  fc70
   3694  fc70
   3695  fc70				   BlankGraphics
   3696  fc70		       00		      .byte.b	$00
   3697  fc71		       00		      .byte.b	$00
   3698  fc72		       00		      .byte.b	$00
   3699  fc73		       00		      .byte.b	$00
   3700  fc74		       00		      .byte.b	$00
   3701  fc75		       00		      .byte.b	$00
   3702  fc76		       00		      .byte.b	$00
   3703  fc77		       00		      .byte.b	$00
   3704  fc78		       00		      .byte.b	$00
   3705  fc79		       00		      .byte.b	$00
   3706  fc7a		       00		      .byte.b	$00
   3707  fc7b		       00		      .byte.b	$00
   3708  fc7c		       00		      .byte.b	$00
   3709  fc7d		       00		      .byte.b	$00
   3710  fc7e		       00		      .byte.b	$00
   3711  fc7f		       00		      .byte.b	$00
   3712  fc80
   3713  fcc0					      org	#$FCC0	;HeroGraphicsColor + #256
   3714  fcc0
   3715  fcc0
   3716  fcc0
   3717  fcc0				   TreeGraphics 		;Tree
   3718  fcc0
   3719  fcc0		       00		      .byte.b	#%00000000
   3720  fcc1		       18		      .byte.b	#%00011000
   3721  fcc2		       18		      .byte.b	#%00011000
   3722  fcc3		       3c		      .byte.b	#%00111100
   3723  fcc4		       5a		      .byte.b	#%01011010
   3724  fcc5		       7e		      .byte.b	#%01111110
   3725  fcc6		       ff		      .byte.b	#%11111111
   3726  fcc7		       38		      .byte.b	#%00111000
   3727  fcc8
   3728  fcc8
   3729  fcc8
   3730  fcc8		       00		      .byte.b	#%00000000
   3731  fcc9		       18		      .byte.b	#%00011000
   3732  fcca		       18		      .byte.b	#%00011000
   3733  fccb		       3c		      .byte.b	#%00111100
   3734  fccc		       5a		      .byte.b	#%01011010
   3735  fccd		       7e		      .byte.b	#%01111110
   3736  fcce		       ff		      .byte.b	#%11111111
   3737  fccf		       38		      .byte.b	#%00111000
   3738  fcd0
   3739  fcd0				   SnakeGraphics		;Snake
   3740  fcd0
   3741  fcd0		       00		      .byte.b	#%00000000
   3742  fcd1		       78		      .byte.b	#%01111000
   3743  fcd2		       84		      .byte.b	#%10000100
   3744  fcd3		       08		      .byte.b	#%00001000
   3745  fcd4		       10		      .byte.b	#%00010000
   3746  fcd5		       10		      .byte.b	#%00010000
   3747  fcd6		       10		      .byte.b	#%00010000
   3748  fcd7		       38		      .byte.b	#%00111000
   3749  fcd8
   3750  fcd8
   3751  fcd8
   3752  fcd8		       00		      .byte.b	#%00000000
   3753  fcd9		       78		      .byte.b	#%01111000
   3754  fcda		       48		      .byte.b	#%01001000
   3755  fcdb		       10		      .byte.b	#%00010000
   3756  fcdc		       20		      .byte.b	#%00100000
   3757  fcdd		       20		      .byte.b	#%00100000
   3758  fcde		       20		      .byte.b	#%00100000
   3759  fcdf		       70		      .byte.b	#%01110000
   3760  fce0
   3761  fce0
   3762  fce0				   HomonoculusGraphics
   3763  fce0		       00		      .byte.b	#%00000000	;$0E
   3764  fce1		       24		      .byte.b	#%00100100	;$0E
   3765  fce2		       38		      .byte.b	#%00111000	;$0E
   3766  fce3		       b8		      .byte.b	#%10111000	;$0E
   3767  fce4		       7c		      .byte.b	#%01111100	;$0E
   3768  fce5		       12		      .byte.b	#%00010010	;$0E
   3769  fce6		       28		      .byte.b	#%00101000	;$32
   3770  fce7		       38		      .byte.b	#%00111000	;$0E
   3771  fce8
   3772  fce8		       00		      .byte.b	#%00000000	;$0E
   3773  fce9		       4c		      .byte.b	#%01001100	;$0E
   3774  fcea		       38		      .byte.b	#%00111000	;$0E
   3775  fceb		       3a		      .byte.b	#%00111010	;$0E
   3776  fcec		       7c		      .byte.b	#%01111100	;$0E
   3777  fced		       90		      .byte.b	#%10010000	;$0E
   3778  fcee		       28		      .byte.b	#%00101000	;$32
   3779  fcef		       38		      .byte.b	#%00111000	;$0E
   3780  fcf0
   3781  fcf0
   3782  fcf0				   SnakeManGraphics		;Snakeman
   3783  fcf0
   3784  fcf0		       00		      .byte.b	#%00000000
   3785  fcf1		       78		      .byte.b	#%01111000
   3786  fcf2		       84		      .byte.b	#%10000100
   3787  fcf3		       08		      .byte.b	#%00001000
   3788  fcf4		       10		      .byte.b	#%00010000
   3789  fcf5		       7c		      .byte.b	#%01111100
   3790  fcf6		       10		      .byte.b	#%00010000
   3791  fcf7		       38		      .byte.b	#%00111000
   3792  fcf8
   3793  fcf8
   3794  fcf8
   3795  fcf8		       00		      .byte.b	#%00000000
   3796  fcf9		       78		      .byte.b	#%01111000
   3797  fcfa		       48		      .byte.b	#%01001000
   3798  fcfb		       10		      .byte.b	#%00010000
   3799  fcfc		       20		      .byte.b	#%00100000
   3800  fcfd		       f8		      .byte.b	#%11111000
   3801  fcfe		       20		      .byte.b	#%00100000
   3802  fcff		       70		      .byte.b	#%01110000
   3803  fd00
   3804  fd00
   3805  fd00
   3806  fd00
   3807  fd00
   3808  fd00
   3809  fd00				   LEFTAUD
   3810  fd00		       84		      .byte.b	#%10000100
   3811  fd01		       84		      .byte.b	#%10000100
   3812  fd02		       94		      .byte.b	#%10010100
   3813  fd03		       bc		      .byte.b	#%10111100
   3814  fd04		       c4		      .byte.b	#%11000100
   3815  fd05		       bc		      .byte.b	#%10111100
   3816  fd06		       dc		      .byte.b	#%11011100
   3817  fd07		       dc		      .byte.b	#%11011100
   3818  fd08		       c4		      .byte.b	#%11000100
   3819  fd09		       bc		      .byte.b	#%10111100
   3820  fd0a		       dc		      .byte.b	#%11011100
   3821  fd0b		       dc		      .byte.b	#%11011100
   3822  fd0c		       84		      .byte.b	#%10000100
   3823  fd0d		       84		      .byte.b	#%10000100
   3824  fd0e		       94		      .byte.b	#%10010100
   3825  fd0f		       bc		      .byte.b	#%10111100
   3826  fd10		       c4		      .byte.b	#%11000100
   3827  fd11		       bc		      .byte.b	#%10111100
   3828  fd12		       dc		      .byte.b	#%11011100
   3829  fd13		       dc		      .byte.b	#%11011100
   3830  fd14		       c4		      .byte.b	#%11000100
   3831  fd15		       bc		      .byte.b	#%10111100
   3832  fd16		       dc		      .byte.b	#%11011100
   3833  fd17		       dc		      .byte.b	#%11011100
   3834  fd18		       6c		      .byte.b	#%01101100
   3835  fd19		       6c		      .byte.b	#%01101100
   3836  fd1a		       84		      .byte.b	#%10000100
   3837  fd1b		       8c		      .byte.b	#%10001100
   3838  fd1c		       bc		      .byte.b	#%10111100
   3839  fd1d		       9c		      .byte.b	#%10011100
   3840  fd1e		       c4		      .byte.b	#%11000100
   3841  fd1f		       c4		      .byte.b	#%11000100
   3842  fd20		       a4		      .byte.b	#%10100100
   3843  fd21		       9c		      .byte.b	#%10011100
   3844  fd22		       c4		      .byte.b	#%11000100
   3845  fd23		       c4		      .byte.b	#%11000100
   3846  fd24		       84		      .byte.b	#%10000100
   3847  fd25		       84		      .byte.b	#%10000100
   3848  fd26		       94		      .byte.b	#%10010100
   3849  fd27		       bc		      .byte.b	#%10111100
   3850  fd28		       c4		      .byte.b	#%11000100
   3851  fd29		       bc		      .byte.b	#%10111100
   3852  fd2a		       dc		      .byte.b	#%11011100
   3853  fd2b		       dc		      .byte.b	#%11011100
   3854  fd2c		       c4		      .byte.b	#%11000100
   3855  fd2d		       bc		      .byte.b	#%10111100
   3856  fd2e		       9c		      .byte.b	#%10011100
   3857  fd2f		       94		      .byte.b	#%10010100
   3858  fd30		       a4		      .byte.b	#%10100100
   3859  fd31		       a1		      .byte.b	#%10100001
   3860  fd32		       9c		      .byte.b	#%10011100
   3861  fd33		       99		      .byte.b	#%10011001
   3862  fd34		       94		      .byte.b	#%10010100
   3863  fd35		       94		      .byte.b	#%10010100
   3864  fd36		       84		      .byte.b	#%10000100
   3865  fd37		       84		      .byte.b	#%10000100
   3866  fd38		       9c		      .byte.b	#%10011100
   3867  fd39		       99		      .byte.b	#%10011001
   3868  fd3a		       94		      .byte.b	#%10010100
   3869  fd3b		       94		      .byte.b	#%10010100
   3870  fd3c		       84		      .byte.b	#%10000100
   3871  fd3d		       84		      .byte.b	#%10000100
   3872  fd3e		       6c		      .byte.b	#%01101100
   3873  fd3f		       6c		      .byte.b	#%01101100
   3874  fd40		       a4		      .byte.b	#%10100100
   3875  fd41		       a1		      .byte.b	#%10100001
   3876  fd42		       9c		      .byte.b	#%10011100
   3877  fd43		       99		      .byte.b	#%10011001
   3878  fd44		       94		      .byte.b	#%10010100
   3879  fd45		       94		      .byte.b	#%10010100
   3880  fd46		       84		      .byte.b	#%10000100
   3881  fd47		       84		      .byte.b	#%10000100
   3882  fd48		       6c		      .byte.b	#%01101100
   3883  fd49		       69		      .byte.b	#%01101001
   3884  fd4a		       84		      .byte.b	#%10000100
   3885  fd4b		       81		      .byte.b	#%10000001
   3886  fd4c		       94		      .byte.b	#%10010100
   3887  fd4d		       91		      .byte.b	#%10010001
   3888  fd4e		       84		      .byte.b	#%10000100
   3889  fd4f		       81		      .byte.b	#%10000001
   3890  fd50		       9c		      .byte.b	#%10011100
   3891  fd51		       99		      .byte.b	#%10011001
   3892  fd52		       34		      .byte.b	#%00110100
   3893  fd53		       34		      .byte.b	#%00110100
   3894  fd54		       ff		      .byte.b	#$FF
   3895  fd55
   3896  fd55
   3897  fd55
   3898  fd55
   3899  fd55				   GraphicsTableLow
   3900  fd55		       70		      .byte.b	#<BlankGraphics	;0
   3901  fd56
   3902  fd56		       e0		      .byte.b	#<PonyGraphics	;1
   3903  fd57
   3904  fd57		       c0		      .byte.b	#<MandrakePlantGraphics	;2
   3905  fd58
   3906  fd58		       c0		      .byte.b	#<MandrakePlantGraphics	;3
   3907  fd59
   3908  fd59		       c0		      .byte.b	#<MandrakeManGraphics	;4
   3909  fd5a
   3910  fd5a		       c0		      .byte.b	#<MandrakeManGraphics	;5
   3911  fd5b
   3912  fd5b		       e0		      .byte.b	#<ChestGraphics	;6
   3913  fd5c
   3914  fd5c		       e0		      .byte.b	#<ChestGraphics	;7
   3915  fd5d
   3916  fd5d		       c0		      .byte.b	#<TreeGraphics	;8
   3917  fd5e
   3918  fd5e		       e8		      .byte.b	#<PitGraphics	;9
   3919  fd5f
   3920  fd5f		       e8		      .byte.b	#<PitGraphics	;10
   3921  fd60
   3922  fd60		       d0		      .byte.b	#<SnakeGraphics	;11
   3923  fd61
   3924  fd61		       f0		      .byte.b	#<BatGraphics	;12
   3925  fd62
   3926  fd62		       c0		      .byte.b	#<RatGraphics	;13
   3927  fd63
   3928  fd63		       e0		      .byte.b	#<HomonoculusGraphics	;14
   3929  fd64
   3930  fd64		       98		      .byte.b	#<BrownieGraphics	;15
   3931  fd65
   3932  fd65		       98		      .byte.b	#<BrownieGraphics	;16
   3933  fd66
   3934  fd66		       d0		      .byte.b	#<OrcGraphics	;17
   3935  fd67
   3936  fd67		       c0		      .byte.b	#<GhostGraphics	;18
   3937  fd68
   3938  fd68		       f0		      .byte.b	#<SnakeManGraphics	;19
   3939  fd69
   3940  fd69		       d0		      .byte.b	#<BoggartGraphics	;20
   3941  fd6a
   3942  fd6a		       d0		      .byte.b	#<SatyrGraphics	;21
   3943  fd6b
   3944  fd6b		       d0		      .byte.b	#<SatyrGraphics	;22
   3945  fd6c
   3946  fd6c		       f0		      .byte.b	#<Mummy0b	;23
   3947  fd6d
   3948  fd6d		       f0		      .byte.b	#<Mummy0a	;24
   3949  fd6e
   3950  fd6e		       e5		      .byte.b	#<DragonGraphicsa	;25
   3951  fd6f
   3952  fd6f		       60		      .byte.b	#<DragonGraphicsb	;26
   3953  fd70
   3954  fd70		       e8		      .byte.b	#<WillOWispGraphics	;27
   3955  fd71
   3956  fd71		       f0		      .byte.b	#<VampGraphicsb	;28
   3957  fd72
   3958  fd72		       f0		      .byte.b	#<VampGraphicsa	;29
   3959  fd73
   3960  fd73		       f0		      .byte.b	#<MinotaurGraphicsb	;30
   3961  fd74
   3962  fd74		       f0		      .byte.b	#<MinotaurGraphicsa	;31
   3963  fd75
   3964  fd75
   3965  fd75
   3966  fd75				   GraphicsTableHigh
   3967  fd75		       fc		      .byte.b	#>BlankGraphics	;0
   3968  fd76
   3969  fd76		       f9		      .byte.b	#>PonyGraphics	;1
   3970  fd77
   3971  fd77		       f9		      .byte.b	#>MandrakePlantGraphics	;2
   3972  fd78
   3973  fd78		       f9		      .byte.b	#>MandrakePlantGraphics	;3
   3974  fd79
   3975  fd79		       fa		      .byte.b	#>MandrakeManGraphics	;4
   3976  fd7a
   3977  fd7a		       fa		      .byte.b	#>MandrakeManGraphics	;5
   3978  fd7b
   3979  fd7b		       fe		      .byte.b	#>ChestGraphics	;6
   3980  fd7c
   3981  fd7c		       fe		      .byte.b	#>ChestGraphics	;7
   3982  fd7d
   3983  fd7d		       fc		      .byte.b	#>TreeGraphics	;8
   3984  fd7e
   3985  fd7e		       f8		      .byte.b	#>PitGraphics	;9
   3986  fd7f
   3987  fd7f		       f8		      .byte.b	#>PitGraphics	;10
   3988  fd80
   3989  fd80		       fc		      .byte.b	#>SnakeGraphics	;11
   3990  fd81
   3991  fd81		       f9		      .byte.b	#>BatGraphics	;12
   3992  fd82
   3993  fd82		       fe		      .byte.b	#>RatGraphics	;13
   3994  fd83
   3995  fd83		       fc		      .byte.b	#>HomonoculusGraphics	;14
   3996  fd84
   3997  fd84		       fe		      .byte.b	#>BrownieGraphics	;15
   3998  fd85
   3999  fd85		       fe		      .byte.b	#>BrownieGraphics	;16
   4000  fd86
   4001  fd86		       f9		      .byte.b	#>OrcGraphics	;17
   4002  fd87
   4003  fd87		       f8		      .byte.b	#>GhostGraphics	;18
   4004  fd88
   4005  fd88		       fc		      .byte.b	#>SnakeManGraphics	;19
   4006  fd89
   4007  fd89		       f8		      .byte.b	#>BoggartGraphics	;20
   4008  fd8a
   4009  fd8a		       fe		      .byte.b	#>SatyrGraphics	;21
   4010  fd8b
   4011  fd8b		       fe		      .byte.b	#>SatyrGraphics	;22
   4012  fd8c
   4013  fd8c		       fe		      .byte.b	#>Mummy0b	;23
   4014  fd8d
   4015  fd8d		       fe		      .byte.b	#>Mummy0a	;24
   4016  fd8e
   4017  fd8e		       fb		      .byte.b	#>DragonGraphicsa	;25
   4018  fd8f
   4019  fd8f		       fc		      .byte.b	#>DragonGraphicsb	;26
   4020  fd90
   4021  fd90		       f8		      .byte.b	#>WillOWispGraphics	;27
   4022  fd91
   4023  fd91		       fe		      .byte.b	#>VampGraphicsb	;28
   4024  fd92
   4025  fd92		       fe		      .byte.b	#>VampGraphicsa	;29
   4026  fd93
   4027  fd93		       fe		      .byte.b	#>MinotaurGraphicsb	;30
   4028  fd94
   4029  fd94		       fe		      .byte.b	#>MinotaurGraphicsa	;31
   4030  fd95
   4031  fd95
   4032  fd95				   GraphicsColorTableLow
   4033  fd95
   4034  fd95		       c0		      .byte.b	#<TreeGraphicsColor	;0
   4035  fd96
   4036  fd96		       c8		      .byte.b	#<PonyGraphicsColor	;1
   4037  fd97
   4038  fd97		       f8		      .byte.b	#<MandrakeColorRed	;2
   4039  fd98
   4040  fd98		       00		      .byte.b	#<MandrakeColorBlue	;3
   4041  fd99
   4042  fd99		       f8		      .byte.b	#<MandrakeColorRed	;4 
   4043  fd9a
   4044  fd9a		       00		      .byte.b	#<MandrakeColorBlue	;5
   4045  fd9b
   4046  fd9b		       10		      .byte.b	#<ChestColor	;6
   4047  fd9c
   4048  fd9c		       e8		      .byte.b	#<GhostColor	;7
   4049  fd9d
   4050  fd9d		       08		      .byte.b	#<BatColor	;8
   4051  fd9e
   4052  fd9e		       d8		      .byte.b	#<WarriorColor	;9
   4053  fd9f
   4054  fd9f		       c8		      .byte.b	#<PonyGraphicsColor	;10
   4055  fda0
   4056  fda0		       e0		      .byte.b	#<SnakeColor	;11
   4057  fda1
   4058  fda1		       08		      .byte.b	#<BatColor	;12
   4059  fda2
   4060  fda2		       c0		      .byte.b	#<TreeGraphicsColor	;13
   4061  fda3
   4062  fda3		       08		      .byte.b	#<BatColor	;14
   4063  fda4
   4064  fda4		       c0		      .byte.b	#<TreeGraphicsColor	;15 
   4065  fda5
   4066  fda5		       f8		      .byte.b	#<MandrakeColorRed	;16
   4067  fda6
   4068  fda6		       e0		      .byte.b	#<SnakeColor	;17
   4069  fda7
   4070  fda7		       e8		      .byte.b	#<GhostColor	;18
   4071  fda8
   4072  fda8		       e0		      .byte.b	#<SnakeColor	;19
   4073  fda9
   4074  fda9		       c0		      .byte.b	#<TreeGraphicsColor	;20
   4075  fdaa
   4076  fdaa		       c0		      .byte.b	#<TreeGraphicsColor	;21
   4077  fdab
   4078  fdab		       f8		      .byte.b	#<MandrakeColorRed	;22
   4079  fdac
   4080  fdac		       c0		      .byte.b	#<TreeGraphicsColor	;23
   4081  fdad
   4082  fdad		       c0		      .byte.b	#<TreeGraphicsColor	;24
   4083  fdae
   4084  fdae		       c0		      .byte.b	#<TreeGraphicsColor	;25
   4085  fdaf
   4086  fdaf		       c0		      .byte.b	#<TreeGraphicsColor	;26
   4087  fdb0
   4088  fdb0		       f0		      .byte.b	#<BlueBallColor	;27
   4089  fdb1
   4090  fdb1		       c0		      .byte.b	#<TreeGraphicsColor	;28
   4091  fdb2
   4092  fdb2		       c0		      .byte.b	#<TreeGraphicsColor	;29
   4093  fdb3
   4094  fdb3		       c0		      .byte.b	#<TreeGraphicsColor	;30
   4095  fdb4
   4096  fdb4		       c0		      .byte.b	#<TreeGraphicsColor	;31
   4097  fdb5
   4098  fdb5				   GraphicsColorTableHigh
   4099  fdb5
   4100  fdb5		       fd		      .byte.b	#>TreeGraphicsColor
   4101  fdb6
   4102  fdb6
   4103  fdb6
   4104  fdb6
   4105  fdc0					      org	#$FDC0	;HeroGraphicsColor + #512
   4106  fdc0
   4107  fdc0
   4108  fdc0				   TreeGraphicsColor
   4109  fdc0		       f0		      .byte.b	#$F0
   4110  fdc1		       f2		      .byte.b	#$F2
   4111  fdc2		       f0		      .byte.b	#$F0
   4112  fdc3		       c0		      .byte.b	#$C0
   4113  fdc4		       c2		      .byte.b	#$C2
   4114  fdc5		       c2		      .byte.b	#$C2
   4115  fdc6		       c2		      .byte.b	#$C2
   4116  fdc7		       c2		      .byte.b	#$C2
   4117  fdc8
   4118  fdc8
   4119  fdc8				   PonyGraphicsColor
   4120  fdc8		       00		      .byte.b	#$00
   4121  fdc9		       00		      .byte.b	#$00
   4122  fdca		       00		      .byte.b	#$00
   4123  fdcb		       00		      .byte.b	#$00
   4124  fdcc		       00		      .byte.b	#$00
   4125  fdcd		       00		      .byte.b	#$00
   4126  fdce		       00		      .byte.b	#$00
   4127  fdcf		       00		      .byte.b	#$00
   4128  fdd0
   4129  fdd0				   RatColor
   4130  fdd0		       0f		      .byte.b	#$0F
   4131  fdd1		       0f		      .byte.b	#$0F
   4132  fdd2		       0f		      .byte.b	#$0F
   4133  fdd3		       2f		      .byte.b	#$2F
   4134  fdd4		       2f		      .byte.b	#$2F
   4135  fdd5		       4f		      .byte.b	#$4F
   4136  fdd6		       4f		      .byte.b	#$4F
   4137  fdd7		       4f		      .byte.b	#$4F
   4138  fdd8
   4139  fdd8				   WarriorColor
   4140  fdd8		       40		      .byte.b	#$40
   4141  fdd9		       40		      .byte.b	#$40
   4142  fdda		       40		      .byte.b	#$40
   4143  fddb		       20		      .byte.b	#$20
   4144  fddc		       3e		      .byte.b	#$3E
   4145  fddd		       3e		      .byte.b	#$3E
   4146  fdde		       80		      .byte.b	#$80
   4147  fddf		       80		      .byte.b	#$80
   4148  fde0
   4149  fde0
   4150  fde0				   SnakeColor
   4151  fde0		       d2		      .byte.b	#$D2	;
   4152  fde1		       d2		      .byte.b	#$D2	;
   4153  fde2		       d2		      .byte.b	#$D2	;
   4154  fde3		       c2		      .byte.b	#$C2	;
   4155  fde4		       c4		      .byte.b	#$C4	;
   4156  fde5		       d2		      .byte.b	#$D2	;
   4157  fde6		       c4		      .byte.b	#$C4	;
   4158  fde7		       30		      .byte.b	#$30	;
   4159  fde8
   4160  fde8
   4161  fde8				   GhostColor		;Ghost with Red Eyes
   4162  fde8		       0e		      .byte.b	#$0E	;
   4163  fde9		       0e		      .byte.b	#$0E	;
   4164  fdea		       0e		      .byte.b	#$0E	;
   4165  fdeb		       0e		      .byte.b	#$0E	;
   4166  fdec		       0e		      .byte.b	#$0E	;
   4167  fded		       0e		      .byte.b	#$0E	;
   4168  fdee		       32		      .byte.b	#$32	;
   4169  fdef		       0e		      .byte.b	#$0E	;
   4170  fdf0
   4171  fdf0				   BlueBallColor		;Will o wisp
   4172  fdf0		       90		      .byte.b	#$90	;
   4173  fdf1		       92		      .byte.b	#$92	;
   4174  fdf2		       92		      .byte.b	#$92	;
   4175  fdf3		       94		      .byte.b	#$94	;
   4176  fdf4		       92		      .byte.b	#$92	;
   4177  fdf5		       96		      .byte.b	#$96	;
   4178  fdf6		       98		      .byte.b	#$98	;
   4179  fdf7		       98		      .byte.b	#$98	;
   4180  fdf8
   4181  fdf8
   4182  fdf8
   4183  fdf8				   MandrakeColorRed		;Mandrake Plant
   4184  fdf8		       c2		      .byte.b	#$C2	;
   4185  fdf9		       c2		      .byte.b	#$C2	;
   4186  fdfa		       c2		      .byte.b	#$C2	;
   4187  fdfb		       c2		      .byte.b	#$C2	;
   4188  fdfc		       c2		      .byte.b	#$C2	;
   4189  fdfd		       c4		      .byte.b	#$C4	;
   4190  fdfe		       40		      .byte.b	#$40	;
   4191  fdff		       40		      .byte.b	#$40	;
   4192  fe00
   4193  fe00				   MandrakeColorBlue		;Mandrake Plant
   4194  fe00		       c2		      .byte.b	#$C2	;
   4195  fe01		       c2		      .byte.b	#$C2	;
   4196  fe02		       c2		      .byte.b	#$C2	;
   4197  fe03		       c2		      .byte.b	#$C2	;
   4198  fe04		       c2		      .byte.b	#$C2	;
   4199  fe05		       c4		      .byte.b	#$C4	;
   4200  fe06		       80		      .byte.b	#$80	;
   4201  fe07		       80		      .byte.b	#$80	;
   4202  fe08
   4203  fe08
   4204  fe08				   BatColor		;Bat Color Gray and Black
   4205  fe08		       02		      .byte.b	#$02	;
   4206  fe09		       02		      .byte.b	#$02	;
   4207  fe0a		       04		      .byte.b	#$04	;
   4208  fe0b		       04		      .byte.b	#$04	;
   4209  fe0c		       06		      .byte.b	#$06	;
   4210  fe0d		       06		      .byte.b	#$06	;
   4211  fe0e		       04		      .byte.b	#$04	;
   4212  fe0f		       04		      .byte.b	#$04	;
   4213  fe10
   4214  fe10				   ChestColor		;
   4215  fe10		       10		      .byte.b	#$10	;
   4216  fe11		       10		      .byte.b	#$10	;
   4217  fe12		       12		      .byte.b	#$12	;
   4218  fe13		       12		      .byte.b	#$12	;
   4219  fe14		       12		      .byte.b	#$12	;
   4220  fe15		       14		      .byte.b	#$14	;
   4221  fe16		       30		      .byte.b	#$30	;
   4222  fe17		       30		      .byte.b	#$30	;
   4223  fe18
   4224  fe18				   EnemyHitColor
   4225  fe18		       02		      .byte.b	#$02	;
   4226  fe19		       02		      .byte.b	#$02	;
   4227  fe1a		       04		      .byte.b	#$04	;
   4228  fe1b		       04		      .byte.b	#$04	;
   4229  fe1c		       06		      .byte.b	#$06	;
   4230  fe1d		       06		      .byte.b	#$06	;
   4231  fe1e		       08		      .byte.b	#$08	;
   4232  fe1f		       08		      .byte.b	#$08	;
   4233  fe20
   4234  fe20				   EnemyFireColor
   4235  fe20		       02		      .byte.b	#$02
   4236  fe21		       40		      .byte.b	#$40
   4237  fe22		       1d		      .byte.b	#$1D
   4238  fe23		       42		      .byte.b	#$42
   4239  fe24		       1d		      .byte.b	#$1D
   4240  fe25		       44		      .byte.b	#$44
   4241  fe26		       50		      .byte.b	#$50
   4242  fe27		       02		      .byte.b	#$02
   4243  fe28
   4244  fe28
   4245  fe28				   SnakeColorb
   4246  fe28		       30		      .byte.b	#$30	;
   4247  fe29		       c4		      .byte.b	#$C4	;
   4248  fe2a		       d2		      .byte.b	#$D2	;
   4249  fe2b		       c4		      .byte.b	#$C4	;
   4250  fe2c		       c2		      .byte.b	#$C2	;
   4251  fe2d		       d2		      .byte.b	#$D2	;
   4252  fe2e		       d2		      .byte.b	#$D2	;
   4253  fe2f		       d2		      .byte.b	#$D2	;
   4254  fe30
   4255  fe30
   4256  fe30				   Mask
   4257  fe30		       fe		      .byte.b	#%11111110
   4258  fe31		       fd		      .byte.b	#%11111101
   4259  fe32		       fb		      .byte.b	#%11111011
   4260  fe33		       f7		      .byte.b	#%11110111
   4261  fe34		       ef		      .byte.b	#%11101111
   4262  fe35		       df		      .byte.b	#%11011111
   4263  fe36		       bf		      .byte.b	#%10111111
   4264  fe37		       7f		      .byte.b	#%01111111
   4265  fe38
   4266  fe38
   4267  fe38				   SLICE0
   4268  fe38		       a9 00		      LDA	#0
   4269  fe3a		       c5 d2		      cmp	Pause	;If screen paused because ceratures going backwords, pause
   4270  fe3c		       90 57		      bcc	NotYet
   4271  fe3e				   RESSURECT
   4272  fe3e		       c6 fb		      DEC	Baddie_Duration
   4273  fe40		       30 02		      bmi	TOOLARGE
   4274  fe42		       d0 51		      bne	NotYet
   4275  fe44
   4276  fe44				   TOOLARGE
   4277  fe44
   4278  fe44
   4279  fe44							;Old get baddie routine
   4280  fe44							;
   4281  fe44							;	ldx Baddie_Num
   4282  fe44							;
   4283  fe44							;	LDA NEXTBADDIETYPE,x
   4284  fe44							;	CMP #255
   4285  fe44							;	BNE DONTLOOP
   4286  fe44							;	LDX #0
   4287  fe44							;	STX Baddie_Num
   4288  fe44				   DONTLOOP
   4289  fe44							;Old get baddie routine
   4290  fe44
   4291  fe44							;Increment to next baddie
   4292  fe44
   4293  fe44		       a5 fc		      lda	Baddie_Num
   4294  fe46		       c9 17		      cmp	#23
   4295  fe48		       d0 04		      bne	resetto0
   4296  fe4a		       a9 00		      lda	#0
   4297  fe4c		       85 fc		      sta	Baddie_Num
   4298  fe4e				   resetto0
   4299  fe4e		       e6 fc		      inc	Baddie_Num
   4300  fe50							;Increment to next baddie
   4301  fe50
   4302  fe50
   4303  fe50
   4304  fe50
   4305  fe50							;old get baddie lane info
   4306  fe50							;	LDA NEXTBADDIETYPE,x
   4307  fe50							;	LSR
   4308  fe50							;	LSR
   4309  fe50							;	LSR
   4310  fe50							;	LSR
   4311  fe50							;	LSR
   4312  fe50							;	AND #%00000111
   4313  fe50							;	TAY
   4314  fe50							;old get baddie lane info
   4315  fe50
   4316  fe50							;Makeup lane
   4317  fe50		       29 06		      AND	#%00000110
   4318  fe52		       a8		      TAY
   4319  fe53							;Makeup lane
   4320  fe53
   4321  fe53
   4322  fe53
   4323  fe53							;Need to change to not need a badditype for the pit, if baddie > 23, need to autoload 2 part, and belly
   4324  fe53							;	LDA NEXTBADDIETYPE,x
   4325  fe53		       a5 fc		      LDA	Baddie_Num	;This is loadding the next
   4326  fe55		       a9 05		      LDA	#05
   4327  fe57							;list of monsters BADDIEVALUE3, or MonsterList, this is probably loading the monster
   4328  fe57		       29 1f		      AND	#%00011111
   4329  fe59		       c9 1f		      CMP	#%00011111
   4330  fe5b		       d0 08		      BNE	NotPit
   4331  fe5d							;Setup Pit
   4332  fe5d
   4333  fe5d		       a9 8b		      LDA	#Far_Right -#1	;this is where we are changing pit to middle body
   4334  fe5f							;LDA #%00001110
   4335  fe5f		       99 b7 00 	      STA	Pit0_XPos,y
   4336  fe62		       4c 77 fe 	      JMP	AddingPit
   4337  fe65				   NotPit
   4338  fe65
   4339  fe65		       99 a9 00 	      STA	E0_Type,y	;This is placing enemy into lane
   4340  fe68		       c9 19		      CMP	#LVL2BOSS
   4341  fe6a		       d0 02		      BNE	NOTMUMMY
   4342  fe6c		       84 ce		      sty	Link
   4343  fe6e
   4344  fe6e				   NOTMUMMY
   4345  fe6e							;	TAX
   4346  fe6e							;	LDA EnemyLife,x
   4347  fe6e		       a5 fc		      LDA	Baddie_Num
   4348  fe70		       6a		      ROR
   4349  fe71		       6a		      ROR
   4350  fe72		       09 01		      ORA	#1
   4351  fe74		       99 b0 00 	      STA	E0_Health,y	;HOW did this ever work without TAX???
   4352  fe77
   4353  fe77				   AddingPit
   4354  fe77		       a9 8b		      lda	#Far_Right-1
   4355  fe79		       99 a1 00 	      sta	E0_XPos,y
   4356  fe7c
   4357  fe7c		       a9 00		      lda	#0
   4358  fe7e		       85 94		      sta	Direction
   4359  fe80
   4360  fe80
   4361  fe80
   4362  fe80
   4363  fe80
   4364  fe80		       b9 b5 fa 	      LDA	Multiplexer,y
   4365  fe83		       05 d1		      ora	Enemy_Life
   4366  fe85		       85 d1		      sta	Enemy_Life
   4367  fe87
   4368  fe87							;	INC Baddie_Num
   4369  fe87
   4370  fe87							;	lda NEXTBADDIEDUR,y
   4371  fe87
   4372  fe87		       a5 fc		      lda	Baddie_Num
   4373  fe89
   4374  fe89		       c9 3c		      CMP	#Min_Eye_Quake
   4375  fe8b		       b0 02		      BCS	DONTLOOP2
   4376  fe8d		       85 d2		      STA	Pause
   4377  fe8f							;	lda NEXTBADDIEDUR,y
   4378  fe8f				   DONTLOOP2
   4379  fe8f
   4380  fe8f
   4381  fe8f		       a9 14		      lda	#20
   4382  fe91		       85 fb		      sta	Baddie_Duration
   4383  fe93		       f0 af		      BEQ	TOOLARGE
   4384  fe95
   4385  fe95
   4386  fe95				   NotYet
   4387  fe95
   4388  fe95
   4389  fe95		       4c 17 f1 	      JMP	ENDSLICES
   4390  fe98
   4391  fe98
   4392  fe98				   BrownieGraphics
   4393  fe98		       00		      .byte.b	#%00000000
   4394  fe99		       14		      .byte.b	#%00010100
   4395  fe9a		       14		      .byte.b	#%00010100
   4396  fe9b		       18		      .byte.b	#%00011000
   4397  fe9c		       7e		      .byte.b	#%01111110
   4398  fe9d		       10		      .byte.b	#%00010000
   4399  fe9e		       38		      .byte.b	#%00111000
   4400  fe9f		       38		      .byte.b	#%00111000
   4401  fea0
   4402  fea0
   4403  fea0		       00		      .byte.b	#%00000000
   4404  fea1		       26		      .byte.b	#%00100110
   4405  fea2		       2c		      .byte.b	#%00101100
   4406  fea3		       18		      .byte.b	#%00011000
   4407  fea4		       7e		      .byte.b	#%01111110
   4408  fea5		       10		      .byte.b	#%00010000
   4409  fea6		       38		      .byte.b	#%00111000
   4410  fea7		       38		      .byte.b	#%00111000
   4411  fea8
   4412  fea8
   4413  fea8
   4414  fea8
   4415  fea8
   4416  fea8
   4417  fea8
   4418  fea8
   4419  fea8
   4420  fea8
   4421  fec0					      org	#$FEC0	;HeroGraphicsColor + #768
   4422  fec0
   4423  fec0
   4424  fec0
   4425  fec0				   RatGraphics
   4426  fec0		       00		      .byte.b	#%00000000	;--
   4427  fec1		       48		      .byte.b	#%01001000	;--
   4428  fec2		       3c		      .byte.b	#%00111100	;--
   4429  fec3		       7f		      .byte.b	#%01111111	;--
   4430  fec4		       f8		      .byte.b	#%11111000	;--
   4431  fec5		       40		      .byte.b	#%01000000	;--
   4432  fec6		       00		      .byte.b	#%00000000	;--
   4433  fec7		       00		      .byte.b	#%00000000	;--
   4434  fec8
   4435  fec8		       00		      .byte.b	#%00000000	;--
   4436  fec9		       c4		      .byte.b	#%11000100	;--
   4437  feca		       7c		      .byte.b	#%01111100	;--
   4438  fecb		       7f		      .byte.b	#%01111111	;--
   4439  fecc		       f8		      .byte.b	#%11111000	;--
   4440  fecd		       40		      .byte.b	#%01000000	;--
   4441  fece		       00		      .byte.b	#%00000000	;--
   4442  fecf		       00		      .byte.b	#%00000000	;--
   4443  fed0
   4444  fed0				   SatyrGraphics
   4445  fed0		       00		      .byte.b	#%00000000	;--
   4446  fed1		       08		      .byte.b	#%00001000	;--
   4447  fed2		       78		      .byte.b	#%01111000	;--
   4448  fed3		       50		      .byte.b	#%01010000	;--
   4449  fed4		       7c		      .byte.b	#%01111100	;--
   4450  fed5		       14		      .byte.b	#%00010100	;--
   4451  fed6		       38		      .byte.b	#%00111000	;--
   4452  fed7		       28		      .byte.b	#%00101000	;--
   4453  fed8
   4454  fed8		       00		      .byte.b	#%00000000	;--
   4455  fed9		       24		      .byte.b	#%00100100	;--
   4456  feda		       38		      .byte.b	#%00111000	;--
   4457  fedb		       14		      .byte.b	#%00010100	;--
   4458  fedc		       7c		      .byte.b	#%01111100	;--
   4459  fedd		       50		      .byte.b	#%01010000	;--
   4460  fede		       38		      .byte.b	#%00111000	;--
   4461  fedf		       28		      .byte.b	#%00101000	;--
   4462  fee0
   4463  fee0
   4464  fee0				   ChestGraphics
   4465  fee0		       00		      .byte.b	#%00000000
   4466  fee1		       00		      .byte.b	#%00000000
   4467  fee2		       ff		      .byte.b	#%11111111
   4468  fee3		       ff		      .byte.b	#%11111111
   4469  fee4		       ff		      .byte.b	#%11111111
   4470  fee5		       7e		      .byte.b	#%01111110
   4471  fee6		       3c		      .byte.b	#%00111100
   4472  fee7		       00		      .byte.b	#%00000000
   4473  fee8
   4474  fee8		       00		      .byte.b	#%00000000
   4475  fee9		       00		      .byte.b	#%00000000
   4476  feea		       ff		      .byte.b	#%11111111
   4477  feeb		       ff		      .byte.b	#%11111111
   4478  feec		       ff		      .byte.b	#%11111111
   4479  feed		       7e		      .byte.b	#%01111110
   4480  feee		       3c		      .byte.b	#%00111100
   4481  feef		       00		      .byte.b	#%00000000
   4482  fef0
   4483  fef0
   4484  fef0
   4485  fef0
   4486  fef0
   4487  fef0
   4488  fef0				   VampGraphicsb
   4489  fef0				   VampGraphicsa
   4490  fef0				   MinotaurGraphicsa
   4491  fef0				   MinotaurGraphicsb
   4492  fef0				   Mummy0b
   4493  fef0				   Mummy0a
   4494  fef0
   4495  fef0				   NUM0
   4496  fef0
   4497  fef0		       ee		      .byte.b	#%11101110	;
   4498  fef1		       aa		      .byte.b	#%10101010	;
   4499  fef2		       aa		      .byte.b	#%10101010	;
   4500  fef3		       aa		      .byte.b	#%10101010	;
   4501  fef4		       ee		      .byte.b	#%11101110	;
   4502  fef5				   PFData0
   4503  fef5		       03		      .byte.b	#%00000011
   4504  fef6		       07		      .byte.b	#%00000111
   4505  fef7		       0f		      .byte.b	#%00001111
   4506  fef8				   NUM1
   4507  fef8
   4508  fef8		       22		      .byte.b	#%00100010	;
   4509  fef9		       22		      .byte.b	#%00100010	;
   4510  fefa		       22		      .byte.b	#%00100010	;
   4511  fefb		       22		      .byte.b	#%00100010	;
   4512  fefc		       22		      .byte.b	#%00100010	;
   4513  fefd				   PFData1
   4514  fefd		       7f		      .byte.b	#%01111111
   4515  fefe		       3b		      .byte.b	#%00111011
   4516  feff		       11		      .byte.b	#%00010001
   4517  ff00				   NUM2
   4518  ff00
   4519  ff00		       ee		      .byte.b	#%11101110	;
   4520  ff01		       88		      .byte.b	#%10001000	;
   4521  ff02		       ee		      .byte.b	#%11101110	;
   4522  ff03		       22		      .byte.b	#%00100010	;
   4523  ff04		       ee		      .byte.b	#%11101110	;
   4524  ff05				   PFData2
   4525  ff05		       e7		      .byte.b	#%11100111
   4526  ff06		       c3		      .byte.b	#%11000011
   4527  ff07		       00		      .byte.b	#%00000000
   4528  ff08				   NUM3
   4529  ff08
   4530  ff08		       ee		      .byte.b	#%11101110	;
   4531  ff09		       22		      .byte.b	#%00100010	;
   4532  ff0a		       ee		      .byte.b	#%11101110	;
   4533  ff0b		       22		      .byte.b	#%00100010	;
   4534  ff0c		       ee		      .byte.b	#%11101110	;
   4535  ff0d				   PFData3
   4536  ff0d		       bb		      .byte.b	#%10111011
   4537  ff0e		       99		      .byte.b	#%10011001
   4538  ff0f		       00		      .byte.b	#%00000000
   4539  ff10				   NUM4
   4540  ff10
   4541  ff10		       22		      .byte.b	#%00100010	;
   4542  ff11		       22		      .byte.b	#%00100010	;
   4543  ff12		       ee		      .byte.b	#%11101110	;
   4544  ff13		       aa		      .byte.b	#%10101010	;
   4545  ff14		       aa		      .byte.b	#%10101010	;
   4546  ff15				   PFData4
   4547  ff15		       ef		      .byte.b	#%11101111
   4548  ff16		       c7		      .byte.b	#%11000111
   4549  ff17		       83		      .byte.b	#%10000011
   4550  ff18				   NUM5
   4551  ff18
   4552  ff18		       ee		      .byte.b	#%11101110	;
   4553  ff19		       22		      .byte.b	#%00100010	;
   4554  ff1a		       ee		      .byte.b	#%11101110	;
   4555  ff1b		       88		      .byte.b	#%10001000	;
   4556  ff1c		       ee		      .byte.b	#%11101110	;
   4557  ff1d				   PFData5
   4558  ff1d		       c3		      .byte.b	#%11000011
   4559  ff1e		       81		      .byte.b	#%10000001
   4560  ff1f		       00		      .byte.b	#%00000000
   4561  ff20
   4562  ff20				   NUM6
   4563  ff20
   4564  ff20		       ee		      .byte.b	#%11101110	;
   4565  ff21		       aa		      .byte.b	#%10101010	;
   4566  ff22		       ee		      .byte.b	#%11101110	;
   4567  ff23		       88		      .byte.b	#%10001000	;
   4568  ff24		       ee		      .byte.b	#%11101110	;
   4569  ff25				   SwordSongv		;10 bytes each section, interlaced with nums to save space.
   4570  ff25		       00		      .byte.b	#0	;SwordSongv
   4571  ff26				   SwordSongc		;10 bytes each section
   4572  ff26		       00		      .byte.b	#0	;SwordSongc
   4573  ff27				   SwordSongf		;10 bytes each section
   4574  ff27		       00		      .byte.b	#0	;SwordSongf
   4575  ff28				   NUM7
   4576  ff28
   4577  ff28		       22		      .byte.b	#%00100010	;
   4578  ff29		       22		      .byte.b	#%00100010	;
   4579  ff2a		       22		      .byte.b	#%00100010	;
   4580  ff2b		       22		      .byte.b	#%00100010	;
   4581  ff2c		       ee		      .byte.b	#%11101110	;
   4582  ff2d		       01		      .byte.b	#1	;SwordSongv
   4583  ff2e		       0a		      .byte.b	#10	;SwordSongc
   4584  ff2f		       0a		      .byte.b	#10	;SwordSongf
   4585  ff30				   NUM8
   4586  ff30
   4587  ff30		       ee		      .byte.b	#%11101110	;
   4588  ff31		       aa		      .byte.b	#%10101010	;
   4589  ff32		       ee		      .byte.b	#%11101110	;
   4590  ff33		       aa		      .byte.b	#%10101010	;
   4591  ff34		       ee		      .byte.b	#%11101110	;
   4592  ff35		       02		      .byte.b	#2	;SwordSongv
   4593  ff36		       14		      .byte.b	#20	;SwordSongc
   4594  ff37		       14		      .byte.b	#20	;SwordSongf
   4595  ff38
   4596  ff38				   NUM9
   4597  ff38
   4598  ff38		       22		      .byte.b	#%00100010	;
   4599  ff39		       22		      .byte.b	#%00100010	;
   4600  ff3a		       ee		      .byte.b	#%11101110	;
   4601  ff3b		       aa		      .byte.b	#%10101010	;
   4602  ff3c		       ee		      .byte.b	#%11101110	;
   4603  ff3d		       03		      .byte.b	#3	;SwordSongv
   4604  ff3e		       1e		      .byte.b	#30	;SwordSongc
   4605  ff3f		       1e		      .byte.b	#30	;SwordSongf
   4606  ff40
   4607  ff40
   4608  ff40				   NUM0_
   4609  ff40		       77		      .byte.b	#%01110111	;
   4610  ff41		       55		      .byte.b	#%01010101	;
   4611  ff42		       55		      .byte.b	#%01010101	;
   4612  ff43		       55		      .byte.b	#%01010101	;
   4613  ff44		       77		      .byte.b	#%01110111	;
   4614  ff45		       04		      .byte.b	#4	;SwordSongv
   4615  ff46		       28		      .byte.b	#40	;SwordSongc
   4616  ff47		       28		      .byte.b	#40	;SwordSongf
   4617  ff48
   4618  ff48				   NUM1_
   4619  ff48		       44		      .byte.b	#%01000100	;
   4620  ff49		       44		      .byte.b	#%01000100	;
   4621  ff4a		       44		      .byte.b	#%01000100	;
   4622  ff4b		       44		      .byte.b	#%01000100	;
   4623  ff4c		       44		      .byte.b	#%01000100	;
   4624  ff4d		       05		      .byte.b	#5	;SwordSongv
   4625  ff4e		       32		      .byte.b	#50	;SwordSongc
   4626  ff4f		       32		      .byte.b	#50	;SwordSongf
   4627  ff50
   4628  ff50				   NUM2_
   4629  ff50		       77		      .byte.b	#%01110111	;
   4630  ff51		       11		      .byte.b	#%00010001	;
   4631  ff52		       77		      .byte.b	#%01110111	;
   4632  ff53		       44		      .byte.b	#%01000100	;
   4633  ff54		       77		      .byte.b	#%01110111	;
   4634  ff55		       06		      .byte.b	#6	;SwordSongv
   4635  ff56		       3c		      .byte.b	#60	;SwordSongc
   4636  ff57		       3c		      .byte.b	#60	;SwordSongf
   4637  ff58
   4638  ff58				   NUM3_
   4639  ff58		       77		      .byte.b	#%01110111	;
   4640  ff59		       44		      .byte.b	#%01000100	;
   4641  ff5a		       77		      .byte.b	#%01110111	;
   4642  ff5b		       44		      .byte.b	#%01000100	;
   4643  ff5c		       77		      .byte.b	#%01110111	;
   4644  ff5d		       07		      .byte.b	#7	;SwordSongv
   4645  ff5e		       46		      .byte.b	#70	;SwordSongc
   4646  ff5f		       46		      .byte.b	#70	;SwordSongf
   4647  ff60
   4648  ff60				   NUM4_
   4649  ff60		       44		      .byte.b	#%01000100	;
   4650  ff61		       44		      .byte.b	#%01000100	;
   4651  ff62		       77		      .byte.b	#%01110111	;
   4652  ff63		       55		      .byte.b	#%01010101	;
   4653  ff64		       55		      .byte.b	#%01010101	;
   4654  ff65		       09		      .byte.b	#9	;SwordSongv
   4655  ff66		       5a		      .byte.b	#90	;SwordSongc
   4656  ff67		       5a		      .byte.b	#90	;SwordSongf
   4657  ff68
   4658  ff68				   NUM5_
   4659  ff68		       77		      .byte.b	#%01110111	;
   4660  ff69		       44		      .byte.b	#%01000100	;
   4661  ff6a		       77		      .byte.b	#%01110111	;
   4662  ff6b		       11		      .byte.b	#%00010001	;
   4663  ff6c		       77		      .byte.b	#%01110111	;
   4664  ff6d		       ff		      .byte.b	#$FF
   4665  ff6e		       ff		      .byte.b	#$FF
   4666  ff6f		       ff		      .byte.b	#$FF
   4667  ff70				   NUM6_
   4668  ff70		       77		      .byte.b	#%01110111	;
   4669  ff71		       55		      .byte.b	#%01010101	;
   4670  ff72		       77		      .byte.b	#%01110111	;
   4671  ff73		       11		      .byte.b	#%00010001	;
   4672  ff74		       77		      .byte.b	#%01110111	;
   4673  ff75		       ff		      .byte.b	#$FF
   4674  ff76		       ff		      .byte.b	#$FF
   4675  ff77		       ff		      .byte.b	#$FF
   4676  ff78				   NUM7_
   4677  ff78		       44		      .byte.b	#%01000100	;
   4678  ff79		       44		      .byte.b	#%01000100	;
   4679  ff7a		       44		      .byte.b	#%01000100	;
   4680  ff7b		       44		      .byte.b	#%01000100	;
   4681  ff7c		       77		      .byte.b	#%01110111	;
   4682  ff7d		       ff		      .byte.b	#$FF
   4683  ff7e		       ff		      .byte.b	#$FF
   4684  ff7f		       ff		      .byte.b	#$FF
   4685  ff80				   NUM8_
   4686  ff80		       77		      .byte.b	#%01110111	;
   4687  ff81		       55		      .byte.b	#%01010101	;
   4688  ff82		       77		      .byte.b	#%01110111	;
   4689  ff83		       55		      .byte.b	#%01010101	;
   4690  ff84		       77		      .byte.b	#%01110111	;
   4691  ff85		       ff		      .byte.b	#$FF
   4692  ff86		       ff		      .byte.b	#$FF
   4693  ff87		       ff		      .byte.b	#$FF
   4694  ff88				   NUM9_
   4695  ff88		       44		      .byte.b	#%01000100	;
   4696  ff89		       44		      .byte.b	#%01000100	;
   4697  ff8a		       77		      .byte.b	#%01110111	;
   4698  ff8b		       55		      .byte.b	#%01010101	;
   4699  ff8c		       77		      .byte.b	#%01110111	;
   4700  ff8d
   4701  ff8d
   4702  ff8d
   4703  ff8d				   PFCOLOR
   4704  ff8d		       2a		      .byte.b	#$2A
   4705  ff8e		       5d		      .byte.b	#$5D
   4706  ff8f		       4a		      .byte.b	#$4A
   4707  ff90		       3a		      .byte.b	#$3A
   4708  ff91		       0f		      .byte.b	#$F
   4709  ff92		       0f		      .byte.b	#$F
   4710  ff93
   4711  ff93				   PFCOLORB
   4712  ff93		       74		      .byte.b	#$74
   4713  ff94		       76		      .byte.b	#$76
   4714  ff95		       74		      .byte.b	#$74
   4715  ff96		       76		      .byte.b	#$76
   4716  ff97
   4717  ff97				   Enemy_Row_Data
   4718  ff97		       b9		      .byte.b	Enemy_Row_0
   4719  ff98		       a5		      .byte.b	Enemy_Row_E0
   4720  ff99		       91		      .byte.b	Enemy_Row_E1
   4721  ff9a		       7d		      .byte.b	Enemy_Row_E2
   4722  ff9b		       69		      .byte.b	Enemy_Row_E3
   4723  ff9c		       55		      .byte.b	Enemy_Row_E4
   4724  ff9d		       41		      .byte.b	Enemy_Row_E5
   4725  ff9e		       2d		      .byte.b	Enemy_Row_E6
   4726  ff9f		       17		      .byte.b	Enemy_Row_E7
   4727  ffa0
   4728  ffa0
   4729  ffa0				   RIGHTAUDF
   4730  ffa0		       1b		      .byte.b	27
   4731  ffa1		       1e		      .byte.b	30
   4732  ffa2		       15		      .byte.b	21
   4733  ffa3		       1c		      .byte.b	28
   4734  ffa4		       1b		      .byte.b	27
   4735  ffa5		       1e		      .byte.b	30
   4736  ffa6		       15		      .byte.b	21
   4737  ffa7		       19		      .byte.b	25
   4738  ffa8		       1e		      .byte.b	30
   4739  ffa9		       1b		      .byte.b	27
   4740  ffaa		       15		      .byte.b	21
   4741  ffab		       19		      .byte.b	25
   4742  ffac		       1b		      .byte.b	27
   4743  ffad		       1e		      .byte.b	30
   4744  ffae		       15		      .byte.b	21
   4745  ffaf		       1c		      .byte.b	28
   4746  ffb0		       1b		      .byte.b	27
   4747  ffb1		       1e		      .byte.b	30
   4748  ffb2		       15		      .byte.b	21
   4749  ffb3		       19		      .byte.b	25
   4750  ffb4		       1e		      .byte.b	30
   4751  ffb5		       1b		      .byte.b	27
   4752  ffb6		       15		      .byte.b	21
   4753  ffb7		       19		      .byte.b	25
   4754  ffb8		       1b		      .byte.b	27
   4755  ffb9		       1e		      .byte.b	30
   4756  ffba		       15		      .byte.b	21
   4757  ffbb		       1c		      .byte.b	28
   4758  ffbc		       1b		      .byte.b	27
   4759  ffbd		       1e		      .byte.b	30
   4760  ffbe		       15		      .byte.b	21
   4761  ffbf		       19		      .byte.b	25
   4762  ffc0		       1e		      .byte.b	30
   4763  ffc1		       1b		      .byte.b	27
   4764  ffc2		       15		      .byte.b	21
   4765  ffc3		       19		      .byte.b	25
   4766  ffc4		       1b		      .byte.b	27
   4767  ffc5		       1e		      .byte.b	30
   4768  ffc6		       15		      .byte.b	21
   4769  ffc7		       1c		      .byte.b	28
   4770  ffc8		       1b		      .byte.b	27
   4771  ffc9		       1e		      .byte.b	30
   4772  ffca		       15		      .byte.b	21
   4773  ffcb		       19		      .byte.b	25
   4774  ffcc		       1e		      .byte.b	30
   4775  ffcd		       1b		      .byte.b	27
   4776  ffce		       15		      .byte.b	21
   4777  ffcf		       19		      .byte.b	25
   4778  ffd0		       14		      .byte.b	20
   4779  ffd1		       18		      .byte.b	24
   4780  ffd2		       1e		      .byte.b	30
   4781  ffd3		       16		      .byte.b	22
   4782  ffd4		       15		      .byte.b	21
   4783  ffd5		       1c		      .byte.b	28
   4784  ffd6		       19		      .byte.b	25
   4785  ffd7		       15		      .byte.b	21
   4786  ffd8		       1e		      .byte.b	30
   4787  ffd9		       16		      .byte.b	22
   4788  ffda		       15		      .byte.b	21
   4789  ffdb		       1c		      .byte.b	28
   4790  ffdc		       19		      .byte.b	25
   4791  ffdd		       15		      .byte.b	21
   4792  ffde		       1c		      .byte.b	28
   4793  ffdf		       15		      .byte.b	21
   4794  ffe0		       14		      .byte.b	20
   4795  ffe1		       18		      .byte.b	24
   4796  ffe2		       1e		      .byte.b	30
   4797  ffe3		       16		      .byte.b	22
   4798  ffe4		       15		      .byte.b	21
   4799  ffe5		       1c		      .byte.b	28
   4800  ffe6		       19		      .byte.b	25
   4801  ffe7		       15		      .byte.b	21
   4802  ffe8		       1c		      .byte.b	28
   4803  ffe9		       15		      .byte.b	21
   4804  ffea		       1e		      .byte.b	30
   4805  ffeb		       1b		      .byte.b	27
   4806  ffec		       1c		      .byte.b	28
   4807  ffed		       15		      .byte.b	21
   4808  ffee		       19		      .byte.b	25
   4809  ffef		       15		      .byte.b	21
   4810  fff0		       1e		      .byte.b	30
   4811  fff1		       16		      .byte.b	22
   4812  fff2		       15		      .byte.b	21
   4813  fff3		       15		      .byte.b	21
   4814  fff4
   4815  fff4
   4816  fff4
   4817  fff4				   BITMASK
   4818  fff4		       00		      .byte.b	#%
   4819  fff5
   4820  fffc					      org	$FFFC
   4821  fffc		       00 f0		      .word.w	Start
   4822  fffe		       00 f0		      .word.w	Start
   4823  10000
   4824  10000
   4825  10000
   4826  10000
   4827  10000
   4828  10000
   4829  10000
   4830  10000
   4831  10000
   4832  10000
   4833  10000
   4834  10000
   4835  10000
   4836  10000
   4837  10000							;NOTES from Golden Axe Game
   4838  10000							;MAP of Golden Axe http://maps.speccy.cz/map.php?id=GoldenAxe&sort=0&part=10&ath= 
   4839  10000							;5 real stages, with mini potion/thief stages in between, 1 min a piece
   4840  10000							;level 1 : 10 enemies
   4841  10000							;2 Mins, 6 sub screens
   4842  10000							;level 2 : 17 enemies
   4843  10000							;level 3 : 9  enemies
   4844  10000							;level 4 : 15 enemies
   4845  10000							;level 5 : 18 enemies
   4846  10000							;Total enemies in game 69
   4847  10000							;Total Game 16 minutes, need 16min*60seconds/min*60frame/sec = 28800 worth of delay
   4848  10000							;
   4849  10000
   4850  10000							;Villians
   4851  10000							;------------------------------
   4852  10000							;Heninger
   4853  10000
   4854  10000							;Attack strength: D (Silver, Purple), C (Green, Gold), B (Dark, Bronze), A (Red)
   4855  10000							;Attack speed: C (Silver, Purple, Green, Bronze), B (Red, Gold, Dark)
   4856  10000							;Combo attacks: 2 damage (1/8 bar) per hit [1]
   4857  10000							;Knockdown attack (combo finisher): 4 damage (1/4 bar) [1]
   4858  10000							;Dash attack: 4 damage (1/4 bar) [1]
   4859  10000							;Combo completed (two hits, knockdown): 8 damage (1/2 bar) [1]
   4860  10000
   4861  10000							;You cannot block their dash attack.
   4862  10000							;------------------------------
   4863  10000							;Longmoan
   4864  10000
   4865  10000							;Attack strength: D (Silver, Purple), C (Green, Gold), B (Dark, Bronze), A (Red)
   4866  10000							;Attack speed: C (Silver, Purple, Green, Bronze), B (Red, Gold, Dark)
   4867  10000							;Combo attacks: 2 damage (1/8 bar) per hit [1]
   4868  10000							;Knockdown attack (combo finisher): 4 damage (1/4 bar) [1]
   4869  10000							;Dash attack: 4 damage (1/4 bar) [1]
   4870  10000							;Combo completed (two hits, knockdown): 8 damage (1/2 bar) [1]
   4871  10000
   4872  10000							;Unlike the Heninger, the Longmoan's dash attack can be stopped, but only by your own dash attack.
   4873  10000							;------------------------------
   4874  10000							;Amazons
   4875  10000
   4876  10000							;Attack strength: B (Purple, Green), A (Red, Dark)
   4877  10000							;Attack speed: C (Purple), B (Green, Dark), A (Red)
   4878  10000							;Combo attacks: 2 damage (1/8 bar) per hit [1]
   4879  10000							;knockdown attack (combo finisher): 4 damage (1/4 bar) [1]
   4880  10000							;Dash attack: 4 damage (1/4 bar) [1]
   4881  10000							;Combo completed (two hits, knockdown): 8 damage (1/2 bar) [1]
   4882  10000
   4883  10000							;Dash attacks can't be blocked.
   4884  10000							;------------------------------
   4885  10000							;Skeletons
   4886  10000
   4887  10000							;Attack strength/speed: B (White), A (Purple)
   4888  10000							;Combo attacks: 4 damage (1/4 bar) [1]
   4889  10000							;Knockdown attack (combo finisher): 8 damage (1/2 bar) [1]
   4890  10000							;Jump slash: 12 damage (3/4 bar) [1]
   4891  10000							;Downward thrust: 16 damage (1 bar) [1]
   4892  10000							;Combo completed (four hits, knockdown): 24 damage (1.5 bars) [1]
   4893  10000
   4894  10000							;Except for the downward thrust, Skeletons deal double the damage 
   4895  10000							;of any lesser enemy type (Heningers, Longmoans and Amazons). Purple 
   4896  10000							;Skeletons are only seen in the arcade version and The Duel mode. 
   4897  10000							;Note that Death Bringer's Skeletons can be killed; they have 256 HP 
   4898  10000							;whereas Death Bringer himself has only 128 HP, meaning he usually 
   4899  10000							;dies first.[1]
   4900  10000							;------------------------------
   4901  10000							;Bad Brothers
   4902  10000
   4903  10000							;Attack strength: C (Green), B (Silver), A (Red)
   4904  10000							;Attack speed: C (all variants)
   4905  10000							;Dash attack: 8 damage (1/2 bar) [1]
   4906  10000							;All other attacks: 16 damage (1 bar) [1]
   4907  10000
   4908  10000							;Bad Brothers cannot ride Bizarrians. Dash attacks can be stopped.
   4909  10000							;------------------------------
   4910  10000							;Knights
   4911  10000
   4912  10000							;Attack strength: A (all variants)
   4913  10000							;Attack speed: B (Silver), A (Red, Gold)
   4914  10000							;All attacks: 16 damage (1 bar) [1]
   4915  10000
   4916  10000							;Cannot run or ride Bizarrians.
   4917  10000							;------------------------------
   4918  10000							;Death Adder/Death Adder Jr.
   4919  10000
   4920  10000							;Attack strength: A (all variants)
   4921  10000							;Attack speed: B (all variants)
   4922  10000							;Axe swing: 16 damage (1 bar) [1]
   4923  10000							;Projectile: 8 (1/2 bar) [1]
   4924  10000
   4925  10000							;Death Adder Jr. replaces Lt. Bitter as the boss of Stage 3 in Beginner 
   4926  10000							;Mode. There are a couple of differences between the two:
   4927  10000
   4928  10000							;Death Adder Junior's projectile attack is launched through the air and 
   4929  10000							;he wears blue armour. He is Death Adder's son.
   4930  10000							;Death Adder's projectile attack is planted on the ground, and homes in 
   4931  10000							;on your character and he wears red armour. He is Death Adder Junior's 
   4932  10000							;father and Death Bringer's son.
   4933  10000							;They can both run, but they do not use dash attacks or downward thrusts
   4934  10000							; with their axes.
   4935  10000							;------------------------------
   4936  10000							;Death Bringer
   4937  10000							;
   4938  10000							;Attack strength/speed: A
   4939  10000							;HP: 128 [2]
   4940  10000							;Swing attack: 16 damage (1 bar) [2]
   4941  10000							;Earth magic: 16 damage (1 bar) [2]
   4942  10000							;Lighting magic: 8 damage (1/2 bar) [2]
   4943  10000							;Fire (dragon) magic: 40 damage (2 1/2 bars) [2]
   4944  10000
   4945  10000							;Death Bringer is essentially the same as his son, Death Adder and his 
   4946  10000							;grandson, Death Adder Junior, except for wearing pink armour and having 
   4947  10000							;green skin. His projectile attack is launched the same way as Death 
   4948  10000							;Adder's is, except it splits into six separate ones when planted on the 
   4949  10000							;floor, which then home in on your character.
   4950  10000
   4951  10000							;He is also capable of using magic, as follows:
   4952  10000
   4953  10000							;If he knocks you down with his axe, he uses either Thunder magic level 1 
   4954  10000							;if your character is to the left of him. He uses earth level 3 if you are
   4955  10000							; to the right of him.
   4956  10000							;If he knocks you down with his projectile, he will use the level six Fire 
   4957  10000							;magic (Dragon), but it will be a purple dragon instead of white. If you get 
   4958  10000							;hit by the first round of the projectile and dodge the second one quickly (or 
   4959  10000							;if it just misses you right when you get back up from the ground), you have 
   4960  10000							;about a two second window of opportunity to hit Death Bringer with a dash 
   4961  10000							;attack. If executed just in time, he would not call upon the fire dragon. 
   4962  10000							;This does not work with his axe attack because he calls upon his magic almost 
   4963  10000							;immediately and you are either in the air or on the ground.
   4964  10000							;He is also capable of running, but not using dash attacks or downward thrusts. 
   4965  10000							;Note that Death Bringer's Skeletons can be killed; they have 256 HP whereas 
   4966  10000							;Death Bringer himself has only 128 HP, meaning he usually dies first.[1]
   4967  10000
   4968  10000							;The Death Bringer is present only in the home versions. In the MS-DOS version 
   4969  10000							;his abilities are somewhat limited compared to the Sega Genesis version - he 
   4970  10000							;does not have the projectile attack, and his skeletons are far weaker than him. 
   4971  10000							;Another difference is that in the MS-DOS version, you are actually required to 
   4972  10000							;kill both skeletons, even if Death Bringer is already dead, allowing for 
   4973  10000							;somewhat anti-climactic endings.
   4974  10000
   4975  10000							;------------------------------
   4976  10000
   4977  10000							;Thieves
   4978  10000							; The Blue Thief drops magic pots. He will also steal them during the Bonus Stage. 
   4979  10000							;Hit him to make him drop the goods.
   4980  10000
   4981  10000							; The Green Thief drops food. He does not steal. Hit him to make him drop the goods.
   4982  10000
   4983  10000							;------------------------------
   4984  10000							;Chicken Leg
   4985  10000
   4986  10000							;Dash attack: 4 damage (1/4 bar) [1]
   4987  10000							;Tail whip: 8 damage (1/2 bar) [1]
   4988  10000							;First seen in Altered Beast, the Chicken Leg's attack is to spin around and hit 
   4989  10000							;enemies with its tail. Because it has to turn to attack its attack is powerful 
   4990  10000							;but delayed.
   4991  10000							;------------------------------
   4992  10000							;Blue Dragon
   4993  10000
   4994  10000							;Dash attack: 4 damage (1/4 bar) [1]
   4995  10000							;Fire breath: 8 damage (1/2 bar) [1]
   4996  10000							;The Blue Dragon spits fire with fairly good range. It cannot move while breathing 
   4997  10000							;fire so is vulnerable when using this attack. Its dash attack has no such limitations.
   4998  10000							;------------------------------
   4999  10000							;Red Dragon
   5000  10000
   5001  10000							;Dash attack: 4 damage (1/4 bar) [1]
   5002  10000							;Fireball: 8 damage (1/2 bar) [1]
   5003  10000							;The Red Dragon's fireball can hit enemies across the screen (or even offscreen).
   5004  10000							; Like the Blue Dragon it is unable to move while spitting fire. It also cannot spit 
   5005  10000							;another fireball until the previous one is gone.
   5006  10000
   5007  10000
   5008  10000
   5009  10000
   5010  10000
   5011  10000
   5012  10000
   5013  10000
   5014  10000
   5015  10000
   5016  10000
